// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-users-and-permissions/manage-server-users/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/http_api/user/)
//
// This data source uses Grafana's admin APIs for reading users which
// does not currently work with API Tokens. You must use basic auth.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := grafana.NewUser(ctx, "test", &grafana.UserArgs{
//				Email:    pulumi.String("test.datasource@example.com"),
//				Login:    pulumi.String("test-datasource"),
//				Password: pulumi.String("my-password"),
//				IsAdmin:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_ = grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{
//				UserId: test.UserId,
//			}, nil)
//			_ = grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{
//				Email: test.Email,
//			}, nil)
//			_ = test.Login.ApplyT(func(login *string) (grafana.GetUserResult, error) {
//				return grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{
//					Login: login,
//				}, nil), nil
//			}).(grafana.GetUserResultOutput)
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("grafana:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The email address of the Grafana user. Defaults to ``.
	Email *string `pulumi:"email"`
	// The username for the Grafana user. Defaults to ``.
	Login *string `pulumi:"login"`
	// The numerical ID of the Grafana user. Defaults to `-1`.
	UserId *int `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The email address of the Grafana user. Defaults to ``.
	Email *string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin bool `pulumi:"isAdmin"`
	// The username for the Grafana user. Defaults to ``.
	Login *string `pulumi:"login"`
	// The display name for the Grafana user.
	Name string `pulumi:"name"`
	// The numerical ID of the Grafana user. Defaults to `-1`.
	UserId *int `pulumi:"userId"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The email address of the Grafana user. Defaults to ``.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The username for the Grafana user. Defaults to ``.
	Login pulumi.StringPtrInput `pulumi:"login"`
	// The numerical ID of the Grafana user. Defaults to `-1`.
	UserId pulumi.IntPtrInput `pulumi:"userId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

// The email address of the Grafana user. Defaults to “.
func (o LookupUserResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the user is an admin.
func (o LookupUserResultOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupUserResult) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// The username for the Grafana user. Defaults to “.
func (o LookupUserResultOutput) Login() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.Login }).(pulumi.StringPtrOutput)
}

// The display name for the Grafana user.
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The numerical ID of the Grafana user. Defaults to `-1`.
func (o LookupUserResultOutput) UserId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *int { return v.UserId }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
