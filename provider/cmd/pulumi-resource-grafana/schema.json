{
    "name": "grafana",
    "displayName": "Grafana",
    "description": "A Pulumi package for creating and managing grafana.",
    "keywords": [
        "pulumi",
        "grafana",
        "lbrlabs"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`grafana` Terraform Provider](https://github.com/grafana/terraform-provider-grafana).",
    "repository": "https://github.com/lbrlabs/pulumi-grafana",
    "logoUrl": "https://raw.githubusercontent.com/lbrlabs/pulumi-grafana/master/assets/121px-Grafana_logo.svg.png",
    "pluginDownloadURL": "github://api.github.com/lbrlabs",
    "publisher": "lbrlabs",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Lbrlabs.PulumiPackage"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing grafana.",
            "packageName": "@lbrlabs/pulumi-grafana",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/grafana/terraform-provider-grafana)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-grafana` repo](https://github.com/lbrlabs/pulumi-grafana/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-grafana` repo](https://github.com/grafana/terraform-provider-grafana/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "lbrlabs_pulumi_grafana",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/grafana/terraform-provider-grafana)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-grafana` repo](https://github.com/lbrlabs/pulumi-grafana/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-grafana` repo](https://github.com/grafana/terraform-provider-grafana/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "auth": {
                "type": "string",
                "description": "API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_AUTH"
                    ]
                },
                "secret": true
            },
            "caCert": {
                "type": "string",
                "description": "Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the\n`GRAFANA_CA_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CA_CERT"
                    ]
                }
            },
            "cloudApiKey": {
                "type": "string",
                "description": "API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_KEY"
                    ]
                },
                "secret": true
            },
            "cloudApiUrl": {
                "type": "string",
                "description": "Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_URL"
                    ]
                }
            },
            "httpHeaders": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Optional. HTTP headers mapping keys to values used for accessing the Grafana API. May alternatively be set via the\n`GRAFANA_HTTP_HEADERS` environment variable in JSON format.\n",
                "secret": true
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_INSECURE_SKIP_VERIFY"
                    ]
                }
            },
            "oncallAccessToken": {
                "type": "string",
                "description": "A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "oncallUrl": {
                "type": "string",
                "description": "An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_URL"
                    ]
                }
            },
            "orgId": {
                "type": "integer",
                "description": "The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ORG_ID"
                    ]
                }
            },
            "retries": {
                "type": "integer",
                "description": "The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_RETRIES"
                    ]
                }
            },
            "smAccessToken": {
                "type": "string",
                "description": "A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "smUrl": {
                "type": "string",
                "description": "Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The\ncorrect value for each service region is cited in the [Synthetic Monitoring\ndocumentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note\nthe `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the\n`grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances\nmanaging SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for\neach provider ensures all providers interact with the same SM API.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_URL"
                    ]
                }
            },
            "storeDashboardSha256": {
                "type": "boolean",
                "description": "Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_STORE_DASHBOARD_SHA256"
                    ]
                }
            },
            "tlsCert": {
                "type": "string",
                "description": "Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the\n`GRAFANA_TLS_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_CERT"
                    ]
                }
            },
            "tlsKey": {
                "type": "string",
                "description": "Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_KEY"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_URL"
                    ]
                }
            }
        },
        "defaults": [
            "orgId"
        ]
    },
    "types": {
        "grafana:index/BuiltinRoleAssignmentRole:BuiltinRoleAssignmentRole": {
            "properties": {
                "global": {
                    "type": "boolean",
                    "description": "States whether the assignment is available across all organizations or not. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier of the role to assign to `builtin_role`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "uid"
            ]
        },
        "grafana:index/ContactPointAlertmanager:ContactPointAlertmanager": {
            "properties": {
                "basicAuthPassword": {
                    "type": "string",
                    "description": "The password component of the basic auth credentials to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "basicAuthUser": {
                    "type": "string",
                    "description": "The username component of the basic auth credentials to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Alertmanager instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointDingding:ContactPointDingding": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageType": {
                    "type": "string",
                    "description": "The format of message to send - either 'link' or 'actionCard'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The DingDing webhook URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointDiscord:ContactPointDiscord": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of a custom avatar image to use. Defaults to ``.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message. Defaults to ``.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The discord webhook URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "useDiscordUsername": {
                    "type": "boolean",
                    "description": "Whether to use the bot account's plain username instead of \"Grafana.\" Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointEmail:ContactPointEmail": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The addresses to send emails to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the email. Defaults to ``.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "singleEmail": {
                    "type": "boolean",
                    "description": "Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "description": "The templated subject line of the email. Defaults to ``.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addresses"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointGooglechat:ContactPointGooglechat": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The Google Chat webhook URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointKafka:ContactPointKafka": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restProxyUrl": {
                    "type": "string",
                    "description": "The URL of the Kafka REST proxy to send requests to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "topic": {
                    "type": "string",
                    "description": "The name of the Kafka topic to publish to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "restProxyUrl",
                "topic"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "restProxyUrl",
                        "topic",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointOpsgeny:ContactPointOpsgeny": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The OpsGenie API key to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "autoClose": {
                    "type": "boolean",
                    "description": "Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A templated high-level description to use for the alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overridePriority": {
                    "type": "boolean",
                    "description": "Whether to allow the alert priority to be configured via the value of the `og_priority` annotation on the alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendTagsAs": {
                    "type": "string",
                    "description": "Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Allows customization of the OpsGenie API URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiKey",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointPagerduty:ContactPointPagerduty": {
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class or type of event, for example `ping failure`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "component": {
                    "type": "string",
                    "description": "The component being affected by the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The group to which the provided component belongs to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "integrationKey": {
                    "type": "string",
                    "description": "The PagerDuty API key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "severity": {
                    "type": "string",
                    "description": "The PagerDuty event severity level. Default is `critical`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "description": "The templated summary message of the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "integrationKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "integrationKey",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointPushover:ContactPointPushover": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "The Pushover API token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "device": {
                    "type": "string",
                    "description": "Comma-separated list of devices to which the event is associated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expire": {
                    "type": "integer",
                    "description": "How many seconds for which the notification will continue to be retried by Pushover.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated notification message content.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "okPriority": {
                    "type": "integer",
                    "description": "The priority level of the resolved event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "okSound": {
                    "type": "string",
                    "description": "The sound associated with the resolved notification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority level of the event.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retry": {
                    "type": "integer",
                    "description": "How often, in seconds, the Pushover servers will send the same notification to the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "sound": {
                    "type": "string",
                    "description": "The sound associated with the notification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userKey": {
                    "type": "string",
                    "description": "The Pushover user key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "userKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiToken",
                        "uid",
                        "userKey"
                    ]
                }
            }
        },
        "grafana:index/ContactPointSensugo:ContactPointSensugo": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The SensuGo API key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "check": {
                    "type": "string",
                    "description": "The SensuGo check to which the event should be routed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entity": {
                    "type": "string",
                    "description": "The entity being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "handler": {
                    "type": "string",
                    "description": "A custom handler to execute in addition to the check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Templated message content describing the alert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in which the check resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The SensuGo URL to send requests to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiKey",
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointSlack:ContactPointSlack": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "Use this to override the Slack API endpoint URL to send requests to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iconEmoji": {
                    "type": "string",
                    "description": "The name of a Slack workspace emoji to use as the bot icon.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iconUrl": {
                    "type": "string",
                    "description": "A URL of an image to use as the bot icon.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mentionChannel": {
                    "type": "string",
                    "description": "Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mentionGroups": {
                    "type": "string",
                    "description": "Comma-separated list of groups to mention in the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mentionUsers": {
                    "type": "string",
                    "description": "Comma-separated list of users to mention in the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "description": "Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "text": {
                    "type": "string",
                    "description": "Templated content of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "Templated title of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "A Slack API token,for sending messages directly without the webhook method.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "A Slack webhook URL,for sending messages via the webhook method.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username for the bot to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointTeam:ContactPointTeam": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated message content to send.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sectionTitle": {
                    "type": "string",
                    "description": "The templated subtitle for each message section.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "A Teams webhook URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointTelegram:ContactPointTelegram": {
            "properties": {
                "chatId": {
                    "type": "string",
                    "description": "The chat ID to send messages to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "The Telegram bot token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "chatId",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "chatId",
                        "token",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointThreema:ContactPointThreema": {
            "properties": {
                "apiSecret": {
                    "type": "string",
                    "description": "The Threema API key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The Threema gateway ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipientId": {
                    "type": "string",
                    "description": "The ID of the recipient of the message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiSecret",
                "gatewayId",
                "recipientId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiSecret",
                        "gatewayId",
                        "recipientId",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointVictorop:ContactPointVictorop": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageType": {
                    "type": "string",
                    "description": "The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The VictorOps webhook URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointWebhook:ContactPointWebhook": {
            "properties": {
                "authorizationCredentials": {
                    "type": "string",
                    "description": "Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "authorizationScheme": {
                    "type": "string",
                    "description": "Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "basicAuthPassword": {
                    "type": "string",
                    "description": "The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "basicAuthUser": {
                    "type": "string",
                    "description": "The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method to use in the request. Defaults to `POST`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAlerts": {
                    "type": "integer",
                    "description": "The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL to send webhook requests to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointWecom:ContactPointWecom": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message to send.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message to send.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The WeCom webhook URL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/DashboardPermissionPermission:DashboardPermissionPermission": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Manage permissions for `Viewer` or `Editor` roles.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "integer",
                    "description": "ID of the team to manage permissions for. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "description": "ID of the user to manage permissions for. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/DataSourceJsonData:DataSourceJsonData": {
            "properties": {
                "alertmanagerUid": {
                    "type": "string",
                    "description": "(Prometheus) The name of the Alertmanager datasource to manage alerts via UI\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "(CloudWatch, Athena) The ARN of the role to be assumed by Grafana when using the CloudWatch or Athena data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authType": {
                    "type": "string",
                    "description": "(CloudWatch, Athena) The authentication type used to access the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authenticationType": {
                    "type": "string",
                    "description": "(Stackdriver) The authentication type: `jwt` or `gce`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "catalog": {
                    "type": "string",
                    "description": "(Athena) Athena catalog.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "description": "(Stackdriver) Service account email address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "description": "(Azure Monitor) The service account client id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudName": {
                    "type": "string",
                    "description": "(Azure Monitor) The cloud name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connMaxLifetime": {
                    "type": "integer",
                    "description": "(MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customMetricsNamespaces": {
                    "type": "string",
                    "description": "(CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "database": {
                    "type": "string",
                    "description": "(Athena) Name of the database within the catalog.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultBucket": {
                    "type": "string",
                    "description": "(InfluxDB) The default bucket for the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultProject": {
                    "type": "string",
                    "description": "(Stackdriver) The default project for the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultRegion": {
                    "type": "string",
                    "description": "(CloudWatch, Athena) The default region for the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "derivedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourceJsonDataDerivedField:DataSourceJsonDataDerivedField"
                    },
                    "description": "(Loki) See https://grafana.com/docs/grafana/latest/datasources/loki/#derived-fields\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encrypt": {
                    "type": "string",
                    "description": "(MSSQL) Connection SSL encryption handling: 'disable', 'false' or 'true'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "esVersion": {
                    "type": "string",
                    "description": "(Elasticsearch) Elasticsearch semantic version (Grafana v8.0+).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalId": {
                    "type": "string",
                    "description": "(CloudWatch, Athena) If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "githubUrl": {
                    "type": "string",
                    "description": "(Github) Github URL\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "graphiteVersion": {
                    "type": "string",
                    "description": "(Graphite) Graphite version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMethod": {
                    "type": "string",
                    "description": "(Prometheus) HTTP method to use for making requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "implementation": {
                    "type": "string",
                    "description": "(Alertmanager) Implementation of Alertmanager. Either 'cortex' or 'prometheus'\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "(Elasticsearch) Index date time format. nil(No Pattern), 'Hourly', 'Daily', 'Weekly', 'Monthly' or 'Yearly'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logLevelField": {
                    "type": "string",
                    "description": "(Elasticsearch) Which field should be used to indicate the priority of the log message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logMessageField": {
                    "type": "string",
                    "description": "(Elasticsearch) Which field should be used as the log message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manageAlerts": {
                    "type": "boolean",
                    "description": "(Prometheus) Manage alerts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentShardRequests": {
                    "type": "integer",
                    "description": "(Elasticsearch) Maximum number of concurrent shard requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxIdleConns": {
                    "type": "integer",
                    "description": "(MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxLines": {
                    "type": "integer",
                    "description": "(Loki) Upper limit for the number of log lines returned by Loki\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxOpenConns": {
                    "type": "integer",
                    "description": "(MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgSlug": {
                    "type": "string",
                    "description": "(Sentry) Organization slug.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "description": "(InfluxDB) An organization is a workspace for a group of users. All dashboards, tasks, buckets, members, etc., belong to an organization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outputLocation": {
                    "type": "string",
                    "description": "(Athena) AWS S3 bucket to store execution outputs. If not specified, the default query result location from the Workgroup configuration will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postgresVersion": {
                    "type": "integer",
                    "description": "(PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, etc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "type": "string",
                    "description": "(CloudWatch, Athena) The credentials profile name to use when authentication type is set as 'Credentials file'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryTimeout": {
                    "type": "string",
                    "description": "(Prometheus) Timeout for queries made to the Prometheus data source in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sigv4AssumeRoleArn": {
                    "type": "string",
                    "description": "(Elasticsearch and Prometheus) Specifies the ARN of an IAM role to assume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sigv4Auth": {
                    "type": "boolean",
                    "description": "(Elasticsearch and Prometheus) Enable usage of SigV4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sigv4AuthType": {
                    "type": "string",
                    "description": "(Elasticsearch and Prometheus) The Sigv4 authentication provider to use: 'default', 'credentials' or 'keys' (AMG: 'workspace-iam-role').\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sigv4ExternalId": {
                    "type": "string",
                    "description": "(Elasticsearch and Prometheus) When assuming a role in another account use this external ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sigv4Profile": {
                    "type": "string",
                    "description": "(Elasticsearch and Prometheus) Credentials profile name, leave blank for default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sigv4Region": {
                    "type": "string",
                    "description": "(Elasticsearch and Prometheus) AWS region to use for Sigv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslMode": {
                    "type": "string",
                    "description": "(PostgreSQL) SSLmode. 'disable', 'require', 'verify-ca' or 'verify-full'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "(Azure Monitor) The subscription id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "(Azure Monitor) Service account tenant ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeField": {
                    "type": "string",
                    "description": "(Elasticsearch) Which field that should be used as timestamp.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeInterval": {
                    "type": "string",
                    "description": "(Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source. Sometimes called \"Scrape Interval\" in the Grafana UI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timescaledb": {
                    "type": "boolean",
                    "description": "(PostgreSQL) Enable usage of TimescaleDB extension.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsAuth": {
                    "type": "boolean",
                    "description": "(All) Enable TLS authentication using client cert configured in secure json data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsAuthWithCaCert": {
                    "type": "boolean",
                    "description": "(All) Enable TLS authentication using CA cert.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsConfigurationMethod": {
                    "type": "string",
                    "description": "(All) SSL Certificate configuration, either by ‘file-path’ or ‘file-content’.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsSkipVerify": {
                    "type": "boolean",
                    "description": "(All) Controls whether a client verifies the server’s certificate chain and host name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "description": "(Stackdriver) The token URI used, provided in the service account key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tracingDatasourceUid": {
                    "type": "string",
                    "description": "(Cloudwatch) The X-Ray datasource uid to associate to this Cloudwatch datasource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsdbResolution": {
                    "type": "integer",
                    "description": "(OpenTSDB) Resolution.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tsdbVersion": {
                    "type": "integer",
                    "description": "(OpenTSDB) Version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "(InfluxDB) InfluxQL or Flux.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workgroup": {
                    "type": "string",
                    "description": "(Athena) Workgroup to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "xpackEnabled": {
                    "type": "boolean",
                    "description": "(Elasticsearch) Enable X-Pack support.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/DataSourceJsonDataDerivedField:DataSourceJsonDataDerivedField": {
            "properties": {
                "datasourceUid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matcherRegex": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL for the data source. The type of URL required varies depending on the chosen data source type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission": {
            "properties": {
                "builtInRole": {
                    "type": "string",
                    "description": "Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`. Can only be set from Grafana v9.2.3+. Defaults to ``.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Options: `Query` or `Edit` (`Edit` can only be used with Grafana v9.2.3+).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "integer",
                    "description": "ID of the team to manage permissions for. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "description": "ID of the user to manage permissions for. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/DataSourceSecureJsonData:DataSourceSecureJsonData": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "(CloudWatch, Athena) The access key used to access the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "accessToken": {
                    "type": "string",
                    "description": "(Github) The access token used to access the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "authToken": {
                    "type": "string",
                    "description": "(Sentry) Authorization token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "basicAuthPassword": {
                    "type": "string",
                    "description": "(All) Password to use for basic authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "(Azure Monitor) Client secret for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "(All) Password to use for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "(Stackdriver) The service account key `private_key` to use to access the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "(CloudWatch, Athena) The secret key to use to access the data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "sigv4AccessKey": {
                    "type": "string",
                    "description": "(Elasticsearch and Prometheus) SigV4 access key. Required when using 'keys' auth provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "sigv4SecretKey": {
                    "type": "string",
                    "description": "(Elasticsearch and Prometheus) SigV4 secret key. Required when using 'keys' auth provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "(All) CA cert for out going requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "(All) TLS Client cert for outgoing requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "(All) TLS Client key for outgoing requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object"
        },
        "grafana:index/FolderPermissionPermission:FolderPermissionPermission": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Manage permissions for `Viewer` or `Editor` roles.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "integer",
                    "description": "ID of the team to manage permissions for. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "description": "ID of the user to manage permissions for. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/MuteTimingInterval:MuteTimingInterval": {
            "properties": {
                "daysOfMonths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An inclusive range of days, 1-31, within a month, e.g. \"1\" or \"14:16\". Negative values can be used to represent days counting from the end of a month, e.g. \"-1\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "months": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An inclusive range of months, either numerical or full calendar month, e.g. \"1:3\", \"december\", or \"may:august\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "times": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MuteTimingIntervalTime:MuteTimingIntervalTime"
                    },
                    "description": "The time ranges, represented in minutes, during which to mute in a given day.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An inclusive range of weekdays, e.g. \"monday\" or \"tuesday:thursday\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "years": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A positive inclusive range of years, e.g. \"2030\" or \"2025:2026\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/MuteTimingIntervalTime:MuteTimingIntervalTime": {
            "properties": {
                "end": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyMatcher:NotificationPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicy:NotificationPolicyPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "contactPoint",
                "groupBies"
            ]
        },
        "grafana:index/NotificationPolicyPolicyMatcher:NotificationPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "match": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicy:NotificationPolicyPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "contactPoint",
                "groupBies"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "match": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "contactPoint",
                "groupBies"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "match": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "contactPoint",
                "groupBies"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "match": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute": {
            "properties": {
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "msteams": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRouteMsteams:OncallIntegrationDefaultRouteMsteams",
                    "description": "MS teams-specific settings for a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRouteSlack:OncallIntegrationDefaultRouteSlack",
                    "description": "Slack-specific settings for a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "telegram": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRouteTelegram:OncallIntegrationDefaultRouteTelegram",
                    "description": "Telegram-specific settings for a route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "grafana:index/OncallIntegrationDefaultRouteMsteams:OncallIntegrationDefaultRouteMsteams": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationDefaultRouteSlack:OncallIntegrationDefaultRouteSlack": {
            "properties": {
                "channelId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationDefaultRouteTelegram:OncallIntegrationDefaultRouteTelegram": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates": {
            "properties": {
                "groupingKey": {
                    "type": "string",
                    "description": "Template for the key by which alerts are grouped.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolveSignal": {
                    "type": "string",
                    "description": "Template for sending a signal to resolve the Incident.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesSlack:OncallIntegrationTemplatesSlack",
                    "description": "Templates for Slack.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesSlack:OncallIntegrationTemplatesSlack": {
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallRouteMsteams:OncallRouteMsteams": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in MS teams. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "MS teams channel id. Alerts will be directed to this channel in Microsoft teams.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallRouteSlack:OncallRouteSlack": {
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "Slack channel id. Alerts will be directed to this channel in Slack.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in Slack. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallRouteTelegram:OncallRouteTelegram": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in Telegram. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Telegram channel id. Alerts will be directed to this channel in Telegram.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/OncallScheduleSlack:OncallScheduleSlack": {
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Slack user group id. Members of user group will be updated when on-call users change.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/PlaylistItem:PlaylistItem": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "order": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "order",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "order",
                        "title"
                    ]
                }
            }
        },
        "grafana:index/ReportSchedule:ReportSchedule": {
            "properties": {
                "customInterval": {
                    "type": "string",
                    "description": "Custom interval of the report.\n**Note:** This field is only available when frequency is set to `custom`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endTime": {
                    "type": "string",
                    "description": "End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequency": {
                    "type": "string",
                    "description": "Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastDayOfMonth": {
                    "type": "boolean",
                    "description": "Send the report on the last day of the month Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workdaysOnly": {
                    "type": "boolean",
                    "description": "Whether to send the report only on work days. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "frequency"
            ]
        },
        "grafana:index/ReportTimeRange:ReportTimeRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Start of the time range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "string",
                    "description": "End of the time range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/RolePermission:RolePermission": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Specific action users granted with the role will be allowed to perform (for example: `users:read`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scope": {
                    "type": "string",
                    "description": "Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "grafana:index/RuleGroupRule:RuleGroupRule": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "condition": {
                    "type": "string",
                    "description": "The `ref_id` of the query node in the `data` field to use as the alert condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RuleGroupRuleData:RuleGroupRuleData"
                    },
                    "description": "A sequence of stages that describe the contents of the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "execErrState": {
                    "type": "string",
                    "description": "Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "for": {
                    "type": "string",
                    "description": "The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noDataState": {
                    "type": "string",
                    "description": "Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier of the alert rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "datas",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "condition",
                        "datas",
                        "name",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/RuleGroupRuleData:RuleGroupRuleData": {
            "properties": {
                "datasourceUid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "model": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/grafana:index/RuleGroupRuleDataRelativeTimeRange:RuleGroupRuleDataRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datasourceUid",
                "model",
                "refId",
                "relativeTimeRange"
            ]
        },
        "grafana:index/RuleGroupRuleDataRelativeTimeRange:RuleGroupRuleDataRelativeTimeRange": {
            "properties": {
                "from": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from",
                "to"
            ]
        },
        "grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Must be `Edit` or `Admin`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "integer",
                    "description": "ID of the team to manage permissions for. Specify either this or `user_id`. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "description": "ID of the user to manage permissions for. Specify either this or `team_id`. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings": {
            "properties": {
                "dns": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDns:SyntheticMonitoringCheckSettingsDns",
                    "description": "Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttp:SyntheticMonitoringCheckSettingsHttp",
                    "description": "Settings for HTTP check. The target must be a URL (http or https).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ping": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsPing:SyntheticMonitoringCheckSettingsPing",
                    "description": "Settings for ping (ICMP) check. The target must be a valid hostname or IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcp": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTcp:SyntheticMonitoringCheckSettingsTcp",
                    "description": "Settings for TCP check. The target must be of the form `\u003chost\u003e:\u003cport\u003e`, where the host portion must be a valid hostname or IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "traceroute": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTraceroute:SyntheticMonitoringCheckSettingsTraceroute",
                    "description": "Settings for traceroute check. The target must be a valid hostname or IP address\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDns:SyntheticMonitoringCheckSettingsDns": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recordType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validRCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validateAdditionalRrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr:SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validateAnswerRrs": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs:SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validateAuthorityRrs": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs:SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr:SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr": {
            "properties": {
                "failIfMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs:SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs": {
            "properties": {
                "failIfMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs:SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs": {
            "properties": {
                "failIfMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttp:SyntheticMonitoringCheckSettingsHttp": {
            "properties": {
                "basicAuth": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpBasicAuth:SyntheticMonitoringCheckSettingsHttpBasicAuth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bearerToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cacheBustingQueryParamName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfBodyMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfBodyNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfHeaderMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfHeaderNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfNotSsl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failIfSsl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noFollowRedirects": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsConfig": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpTlsConfig:SyntheticMonitoringCheckSettingsHttpTlsConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validHttpVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpBasicAuth:SyntheticMonitoringCheckSettingsHttpBasicAuth": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp": {
            "properties": {
                "allowMissing": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "header",
                "regexp"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp": {
            "properties": {
                "allowMissing": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "header",
                "regexp"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpTlsConfig:SyntheticMonitoringCheckSettingsHttpTlsConfig": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecureSkipVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsPing:SyntheticMonitoringCheckSettingsPing": {
            "properties": {
                "dontFragment": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTcp:SyntheticMonitoringCheckSettingsTcp": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryResponses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTcpQueryResponse:SyntheticMonitoringCheckSettingsTcpQueryResponse"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsConfig": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTcpTlsConfig:SyntheticMonitoringCheckSettingsTcpTlsConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTcpQueryResponse:SyntheticMonitoringCheckSettingsTcpQueryResponse": {
            "properties": {
                "expect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "send": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTls": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expect",
                "send"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTcpTlsConfig:SyntheticMonitoringCheckSettingsTcpTlsConfig": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "insecureSkipVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTraceroute:SyntheticMonitoringCheckSettingsTraceroute": {
            "properties": {
                "maxHops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnknownHops": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptrLookup": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/getDashboardsDashboard:getDashboardsDashboard": {
            "properties": {
                "folderTitle": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "folderTitle",
                "title",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getFoldersFolder:getFoldersFolder": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "title",
                "uid",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getUsersUser:getUsersUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isAdmin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "login": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "isAdmin",
                "login",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the grafana package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "auth": {
                "type": "string",
                "description": "API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.\n",
                "secret": true
            },
            "caCert": {
                "type": "string",
                "description": "Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the\n`GRAFANA_CA_CERT` environment variable.\n"
            },
            "cloudApiKey": {
                "type": "string",
                "description": "API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.\n",
                "secret": true
            },
            "cloudApiUrl": {
                "type": "string",
                "description": "Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.\n"
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.\n"
            },
            "oncallAccessToken": {
                "type": "string",
                "description": "A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.\n",
                "secret": true
            },
            "oncallUrl": {
                "type": "string",
                "description": "An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.\n"
            },
            "orgId": {
                "type": "integer",
                "description": "The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment\nvariable.\n"
            },
            "retries": {
                "type": "integer",
                "description": "The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment\nvariable.\n"
            },
            "smAccessToken": {
                "type": "string",
                "description": "A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.\n",
                "secret": true
            },
            "smUrl": {
                "type": "string",
                "description": "Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The\ncorrect value for each service region is cited in the [Synthetic Monitoring\ndocumentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note\nthe `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the\n`grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances\nmanaging SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for\neach provider ensures all providers interact with the same SM API.\n"
            },
            "storeDashboardSha256": {
                "type": "boolean",
                "description": "Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.\n"
            },
            "tlsCert": {
                "type": "string",
                "description": "Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the\n`GRAFANA_TLS_CERT` environment variable.\n"
            },
            "tlsKey": {
                "type": "string",
                "description": "Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`\nenvironment variable.\n"
            },
            "url": {
                "type": "string",
                "description": "The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.\n"
            }
        },
        "inputProperties": {
            "auth": {
                "type": "string",
                "description": "API token or basic auth `username:password`. May alternatively be set via the `GRAFANA_AUTH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_AUTH"
                    ]
                },
                "secret": true
            },
            "caCert": {
                "type": "string",
                "description": "Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the\n`GRAFANA_CA_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CA_CERT"
                    ]
                }
            },
            "cloudApiKey": {
                "type": "string",
                "description": "API key for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_KEY"
                    ]
                },
                "secret": true
            },
            "cloudApiUrl": {
                "type": "string",
                "description": "Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_URL"
                    ]
                }
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_INSECURE_SKIP_VERIFY"
                    ]
                }
            },
            "oncallAccessToken": {
                "type": "string",
                "description": "A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "oncallUrl": {
                "type": "string",
                "description": "An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_URL"
                    ]
                }
            },
            "orgId": {
                "type": "integer",
                "description": "The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ORG_ID"
                    ]
                }
            },
            "retries": {
                "type": "integer",
                "description": "The amount of retries to use for Grafana API calls. May alternatively be set via the `GRAFANA_RETRIES` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_RETRIES"
                    ]
                }
            },
            "smAccessToken": {
                "type": "string",
                "description": "A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "smUrl": {
                "type": "string",
                "description": "Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The\ncorrect value for each service region is cited in the [Synthetic Monitoring\ndocumentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note\nthe `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the\n`grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances\nmanaging SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for\neach provider ensures all providers interact with the same SM API.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_URL"
                    ]
                }
            },
            "storeDashboardSha256": {
                "type": "boolean",
                "description": "Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_STORE_DASHBOARD_SHA256"
                    ]
                }
            },
            "tlsCert": {
                "type": "string",
                "description": "Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the\n`GRAFANA_TLS_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_CERT"
                    ]
                }
            },
            "tlsKey": {
                "type": "string",
                "description": "Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_KEY`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_KEY"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_URL"
                    ]
                }
            }
        }
    },
    "resources": {
        "grafana:index/alertNotification:AlertNotification": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst emailSometeam = new grafana.AlertNotification(\"emailSometeam\", {\n    frequency: \"24h\",\n    isDefault: false,\n    sendReminder: true,\n    settings: {\n        addresses: \"foo@example.net;bar@example.net\",\n        uploadImage: \"false\",\n    },\n    type: \"email\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nemail_someteam = grafana.AlertNotification(\"emailSometeam\",\n    frequency=\"24h\",\n    is_default=False,\n    send_reminder=True,\n    settings={\n        \"addresses\": \"foo@example.net;bar@example.net\",\n        \"uploadImage\": \"false\",\n    },\n    type=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var emailSometeam = new Grafana.AlertNotification(\"emailSometeam\", new()\n    {\n        Frequency = \"24h\",\n        IsDefault = false,\n        SendReminder = true,\n        Settings = \n        {\n            { \"addresses\", \"foo@example.net;bar@example.net\" },\n            { \"uploadImage\", \"false\" },\n        },\n        Type = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewAlertNotification(ctx, \"emailSometeam\", \u0026grafana.AlertNotificationArgs{\n\t\t\tFrequency:    pulumi.String(\"24h\"),\n\t\t\tIsDefault:    pulumi.Bool(false),\n\t\t\tSendReminder: pulumi.Bool(true),\n\t\t\tSettings: pulumi.AnyMap{\n\t\t\t\t\"addresses\":   pulumi.Any(\"foo@example.net;bar@example.net\"),\n\t\t\t\t\"uploadImage\": pulumi.Any(\"false\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.AlertNotification;\nimport com.pulumi.grafana.AlertNotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var emailSometeam = new AlertNotification(\"emailSometeam\", AlertNotificationArgs.builder()        \n            .frequency(\"24h\")\n            .isDefault(false)\n            .sendReminder(true)\n            .settings(Map.ofEntries(\n                Map.entry(\"addresses\", \"foo@example.net;bar@example.net\"),\n                Map.entry(\"uploadImage\", \"false\")\n            ))\n            .type(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  emailSometeam:\n    type: grafana:AlertNotification\n    properties:\n      frequency: 24h\n      isDefault: false\n      sendReminder: true\n      settings:\n        addresses: foo@example.net;bar@example.net\n        uploadImage: 'false'\n      type: email\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/alertNotification:AlertNotification alert_notification_name {{alert_notification_id}}\n```\n\n ",
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "Frequency of alert reminders. Frequency must be set if reminders are enabled. Defaults to ``.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is this the default channel for all your alerts. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert notification channel.\n"
                },
                "secureSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional secure settings, for full reference lookup [Grafana Supported Settings documentation](https://grafana.com/docs/grafana/latest/administration/provisioning/#supported-settings).\n",
                    "secret": true
                },
                "sendReminder": {
                    "type": "boolean",
                    "description": "Whether to send reminders for triggered alerts. Defaults to `false`.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional settings, for full reference see [Grafana HTTP API documentation](https://grafana.com/docs/grafana/latest/http_api/alerting_notification_channels/).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the alert notification channel.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier. If unset, this will be automatically generated.\n"
                }
            },
            "required": [
                "name",
                "type",
                "uid"
            ],
            "inputProperties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages. Defaults to `false`.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "Frequency of alert reminders. Frequency must be set if reminders are enabled. Defaults to ``.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is this the default channel for all your alerts. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert notification channel.\n"
                },
                "secureSettings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional secure settings, for full reference lookup [Grafana Supported Settings documentation](https://grafana.com/docs/grafana/latest/administration/provisioning/#supported-settings).\n",
                    "secret": true
                },
                "sendReminder": {
                    "type": "boolean",
                    "description": "Whether to send reminders for triggered alerts. Defaults to `false`.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional settings, for full reference see [Grafana HTTP API documentation](https://grafana.com/docs/grafana/latest/http_api/alerting_notification_channels/).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the alert notification channel.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier. If unset, this will be automatically generated.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertNotification resources.\n",
                "properties": {
                    "disableResolveMessage": {
                        "type": "boolean",
                        "description": "Whether to disable sending resolve messages. Defaults to `false`.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "Frequency of alert reminders. Frequency must be set if reminders are enabled. Defaults to ``.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Is this the default channel for all your alerts. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert notification channel.\n"
                    },
                    "secureSettings": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional secure settings, for full reference lookup [Grafana Supported Settings documentation](https://grafana.com/docs/grafana/latest/administration/provisioning/#supported-settings).\n",
                        "secret": true
                    },
                    "sendReminder": {
                        "type": "boolean",
                        "description": "Whether to send reminders for triggered alerts. Defaults to `false`.\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional settings, for full reference see [Grafana HTTP API documentation](https://grafana.com/docs/grafana/latest/http_api/alerting_notification_channels/).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the alert notification channel.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier. If unset, this will be automatically generated.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/annotation:Annotation": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/annotations/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/annotations/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.Annotation(\"test\", {text: \"basic text\"});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.Annotation(\"test\", text=\"basic text\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.Annotation(\"test\", new()\n    {\n        Text = \"basic text\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewAnnotation(ctx, \"test\", \u0026grafana.AnnotationArgs{\n\t\t\tText: pulumi.String(\"basic text\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Annotation;\nimport com.pulumi.grafana.AnnotationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Annotation(\"test\", AnnotationArgs.builder()        \n            .text(\"basic text\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:Annotation\n    properties:\n      text: basic text\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "The ID of the dashboard on which to create the annotation.\n"
                },
                "panelId": {
                    "type": "integer",
                    "description": "The ID of the dashboard panel on which to create the annotation.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the annotation.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text to associate with the annotation.\n"
                },
                "time": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's time.\n"
                },
                "timeEnd": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's end time.\n"
                }
            },
            "required": [
                "text",
                "time",
                "timeEnd"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "The ID of the dashboard on which to create the annotation.\n",
                    "willReplaceOnChanges": true
                },
                "panelId": {
                    "type": "integer",
                    "description": "The ID of the dashboard panel on which to create the annotation.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the annotation.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text to associate with the annotation.\n"
                },
                "time": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's time.\n"
                },
                "timeEnd": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's end time.\n"
                }
            },
            "requiredInputs": [
                "text"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Annotation resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer",
                        "description": "The ID of the dashboard on which to create the annotation.\n",
                        "willReplaceOnChanges": true
                    },
                    "panelId": {
                        "type": "integer",
                        "description": "The ID of the dashboard panel on which to create the annotation.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags to associate with the annotation.\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "The text to associate with the annotation.\n"
                    },
                    "time": {
                        "type": "string",
                        "description": "The RFC 3339-formatted time string indicating the annotation's time.\n"
                    },
                    "timeEnd": {
                        "type": "string",
                        "description": "The RFC 3339-formatted time string indicating the annotation's end time.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/apiKey:ApiKey": {
            "description": "Manages Grafana API Keys.\n\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/auth/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst foo = new grafana.ApiKey(\"foo\", {role: \"Viewer\"});\nconst bar = new grafana.ApiKey(\"bar\", {\n    role: \"Admin\",\n    secondsToLive: 30,\n});\nexport const apiKeyFooKeyOnly = foo.key;\nexport const apiKeyBar = bar;\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nfoo = grafana.ApiKey(\"foo\", role=\"Viewer\")\nbar = grafana.ApiKey(\"bar\",\n    role=\"Admin\",\n    seconds_to_live=30)\npulumi.export(\"apiKeyFooKeyOnly\", foo.key)\npulumi.export(\"apiKeyBar\", bar)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Grafana.ApiKey(\"foo\", new()\n    {\n        Role = \"Viewer\",\n    });\n\n    var bar = new Grafana.ApiKey(\"bar\", new()\n    {\n        Role = \"Admin\",\n        SecondsToLive = 30,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"apiKeyFooKeyOnly\"] = foo.Key,\n        [\"apiKeyBar\"] = bar,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := grafana.NewApiKey(ctx, \"foo\", \u0026grafana.ApiKeyArgs{\n\t\t\tRole: pulumi.String(\"Viewer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := grafana.NewApiKey(ctx, \"bar\", \u0026grafana.ApiKeyArgs{\n\t\t\tRole:          pulumi.String(\"Admin\"),\n\t\t\tSecondsToLive: pulumi.Int(30),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"apiKeyFooKeyOnly\", foo.Key)\n\t\tctx.Export(\"apiKeyBar\", bar)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.ApiKey;\nimport com.pulumi.grafana.ApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ApiKey(\"foo\", ApiKeyArgs.builder()        \n            .role(\"Viewer\")\n            .build());\n\n        var bar = new ApiKey(\"bar\", ApiKeyArgs.builder()        \n            .role(\"Admin\")\n            .secondsToLive(30)\n            .build());\n\n        ctx.export(\"apiKeyFooKeyOnly\", foo.key());\n        ctx.export(\"apiKeyBar\", bar);\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: grafana:ApiKey\n    properties:\n      role: Viewer\n  bar:\n    type: grafana:ApiKey\n    properties:\n      role: Admin\n      secondsToLive: 30\noutputs:\n  apiKeyFooKeyOnly: ${foo.key}\n  apiKeyBar: ${bar}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudStackSlug": {
                    "type": "string",
                    "description": "If set, the API key will be created for the given Cloud stack. This can be used to bootstrap a management API key for a new stack. **Note**: This requires a cloud token to be configured.\n"
                },
                "expiration": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "secondsToLive": {
                    "type": "integer"
                }
            },
            "required": [
                "expiration",
                "key",
                "name",
                "role"
            ],
            "inputProperties": {
                "cloudStackSlug": {
                    "type": "string",
                    "description": "If set, the API key will be created for the given Cloud stack. This can be used to bootstrap a management API key for a new stack. **Note**: This requires a cloud token to be configured.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "secondsToLive": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "cloudStackSlug": {
                        "type": "string",
                        "description": "If set, the API key will be created for the given Cloud stack. This can be used to bootstrap a management API key for a new stack. **Note**: This requires a cloud token to be configured.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiration": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "secondsToLive": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/builtinRoleAssignment:BuiltinRoleAssignment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst viewer = new grafana.BuiltinRoleAssignment(\"viewer\", {\n    builtinRole: \"Viewer\",\n    roles: [\n        {\n            global: false,\n            uid: \"firstuid\",\n        },\n        {\n            global: true,\n            uid: \"seconduid\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nviewer = grafana.BuiltinRoleAssignment(\"viewer\",\n    builtin_role=\"Viewer\",\n    roles=[\n        grafana.BuiltinRoleAssignmentRoleArgs(\n            global_=False,\n            uid=\"firstuid\",\n        ),\n        grafana.BuiltinRoleAssignmentRoleArgs(\n            global_=True,\n            uid=\"seconduid\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var viewer = new Grafana.BuiltinRoleAssignment(\"viewer\", new()\n    {\n        BuiltinRole = \"Viewer\",\n        Roles = new[]\n        {\n            new Grafana.Inputs.BuiltinRoleAssignmentRoleArgs\n            {\n                Global = false,\n                Uid = \"firstuid\",\n            },\n            new Grafana.Inputs.BuiltinRoleAssignmentRoleArgs\n            {\n                Global = true,\n                Uid = \"seconduid\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewBuiltinRoleAssignment(ctx, \"viewer\", \u0026grafana.BuiltinRoleAssignmentArgs{\n\t\t\tBuiltinRole: pulumi.String(\"Viewer\"),\n\t\t\tRoles: grafana.BuiltinRoleAssignmentRoleArray{\n\t\t\t\t\u0026grafana.BuiltinRoleAssignmentRoleArgs{\n\t\t\t\t\tGlobal: pulumi.Bool(false),\n\t\t\t\t\tUid:    pulumi.String(\"firstuid\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.BuiltinRoleAssignmentRoleArgs{\n\t\t\t\t\tGlobal: pulumi.Bool(true),\n\t\t\t\t\tUid:    pulumi.String(\"seconduid\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.BuiltinRoleAssignment;\nimport com.pulumi.grafana.BuiltinRoleAssignmentArgs;\nimport com.pulumi.grafana.inputs.BuiltinRoleAssignmentRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var viewer = new BuiltinRoleAssignment(\"viewer\", BuiltinRoleAssignmentArgs.builder()        \n            .builtinRole(\"Viewer\")\n            .roles(            \n                BuiltinRoleAssignmentRoleArgs.builder()\n                    .global(false)\n                    .uid(\"firstuid\")\n                    .build(),\n                BuiltinRoleAssignmentRoleArgs.builder()\n                    .global(true)\n                    .uid(\"seconduid\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  viewer:\n    type: grafana:BuiltinRoleAssignment\n    properties:\n      builtinRole: Viewer\n      roles:\n        - global: false\n          uid: firstuid\n        - global: true\n          uid: seconduid\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/builtinRoleAssignment:BuiltinRoleAssignment builtin_role_name {{builtin_role_name}}\n```\n\n ",
            "properties": {
                "builtinRole": {
                    "type": "string",
                    "description": "Organization roles (`Viewer`, `Editor`, `Admin`) or `Grafana Admin` to assign the roles to.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/BuiltinRoleAssignmentRole:BuiltinRoleAssignmentRole"
                    },
                    "description": "Fixed or custom roles which provide granular access for specific resources within Grafana.\n"
                }
            },
            "required": [
                "builtinRole",
                "roles"
            ],
            "inputProperties": {
                "builtinRole": {
                    "type": "string",
                    "description": "Organization roles (`Viewer`, `Editor`, `Admin`) or `Grafana Admin` to assign the roles to.\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/BuiltinRoleAssignmentRole:BuiltinRoleAssignmentRole"
                    },
                    "description": "Fixed or custom roles which provide granular access for specific resources within Grafana.\n"
                }
            },
            "requiredInputs": [
                "builtinRole",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuiltinRoleAssignment resources.\n",
                "properties": {
                    "builtinRole": {
                        "type": "string",
                        "description": "Organization roles (`Viewer`, `Editor`, `Admin`) or `Grafana Admin` to assign the roles to.\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/BuiltinRoleAssignmentRole:BuiltinRoleAssignmentRole"
                        },
                        "description": "Fixed or custom roles which provide granular access for specific resources within Grafana.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudApiKey:CloudApiKey": {
            "description": "Manages a single API key on the Grafana Cloud portal (on the organization level)\n* [API documentation](https://grafana.com/docs/grafana-cloud/reference/cloud-api/#api-keys)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.CloudApiKey(\"test\", {\n    cloudOrgSlug: \"myorg\",\n    role: \"Admin\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.CloudApiKey(\"test\",\n    cloud_org_slug=\"myorg\",\n    role=\"Admin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.CloudApiKey(\"test\", new()\n    {\n        CloudOrgSlug = \"myorg\",\n        Role = \"Admin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewCloudApiKey(ctx, \"test\", \u0026grafana.CloudApiKeyArgs{\n\t\t\tCloudOrgSlug: pulumi.String(\"myorg\"),\n\t\t\tRole:         pulumi.String(\"Admin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.CloudApiKey;\nimport com.pulumi.grafana.CloudApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new CloudApiKey(\"test\", CloudApiKeyArgs.builder()        \n            .cloudOrgSlug(\"myorg\")\n            .role(\"Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:CloudApiKey\n    properties:\n      cloudOrgSlug: myorg\n      role: Admin\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/cloudApiKey:CloudApiKey resource_name \"{{org-name}}-{{api_key_name}}\"\n```\n\n ",
            "properties": {
                "cloudOrgSlug": {
                    "type": "string",
                    "description": "The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The generated API key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API key.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.\n"
                }
            },
            "required": [
                "cloudOrgSlug",
                "key",
                "name",
                "role"
            ],
            "inputProperties": {
                "cloudOrgSlug": {
                    "type": "string",
                    "description": "The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API key.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloudOrgSlug",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudApiKey resources.\n",
                "properties": {
                    "cloudOrgSlug": {
                        "type": "string",
                        "description": "The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The generated API key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the API key.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudPluginInstallation:CloudPluginInstallation": {
            "description": "Manages Grafana Cloud Plugin Installations.\n\n* [Plugin Catalog](https://grafana.com/grafana/plugins/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.CloudPluginInstallation(\"test\", {\n    slug: \"some-plugin\",\n    stackSlug: \"stackname\",\n    version: \"1.2.3\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.CloudPluginInstallation(\"test\",\n    slug=\"some-plugin\",\n    stack_slug=\"stackname\",\n    version=\"1.2.3\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.CloudPluginInstallation(\"test\", new()\n    {\n        Slug = \"some-plugin\",\n        StackSlug = \"stackname\",\n        Version = \"1.2.3\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewCloudPluginInstallation(ctx, \"test\", \u0026grafana.CloudPluginInstallationArgs{\n\t\t\tSlug:      pulumi.String(\"some-plugin\"),\n\t\t\tStackSlug: pulumi.String(\"stackname\"),\n\t\t\tVersion:   pulumi.String(\"1.2.3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.CloudPluginInstallation;\nimport com.pulumi.grafana.CloudPluginInstallationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new CloudPluginInstallation(\"test\", CloudPluginInstallationArgs.builder()        \n            .slug(\"some-plugin\")\n            .stackSlug(\"stackname\")\n            .version(\"1.2.3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:CloudPluginInstallation\n    properties:\n      slug: some-plugin\n      stackSlug: stackname\n      version: 1.2.3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/cloudPluginInstallation:CloudPluginInstallation plugin_name {{stack_slug}}_{{plugin_slug}}\n```\n\n ",
            "properties": {
                "slug": {
                    "type": "string",
                    "description": "Slug of the plugin to be installed.\n"
                },
                "stackSlug": {
                    "type": "string",
                    "description": "The stack id to which the plugin should be installed.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the plugin to be installed.\n"
                }
            },
            "required": [
                "slug",
                "stackSlug",
                "version"
            ],
            "inputProperties": {
                "slug": {
                    "type": "string",
                    "description": "Slug of the plugin to be installed.\n",
                    "willReplaceOnChanges": true
                },
                "stackSlug": {
                    "type": "string",
                    "description": "The stack id to which the plugin should be installed.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Version of the plugin to be installed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "slug",
                "stackSlug",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudPluginInstallation resources.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "Slug of the plugin to be installed.\n",
                        "willReplaceOnChanges": true
                    },
                    "stackSlug": {
                        "type": "string",
                        "description": "The stack id to which the plugin should be installed.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the plugin to be installed.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudStack:CloudStack": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana-cloud/reference/cloud-api/#stacks/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.CloudStack(\"test\", {\n    description: \"Test Grafana Cloud Stack\",\n    regionSlug: \"eu\",\n    slug: \"gcloudstacktest\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.CloudStack(\"test\",\n    description=\"Test Grafana Cloud Stack\",\n    region_slug=\"eu\",\n    slug=\"gcloudstacktest\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.CloudStack(\"test\", new()\n    {\n        Description = \"Test Grafana Cloud Stack\",\n        RegionSlug = \"eu\",\n        Slug = \"gcloudstacktest\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewCloudStack(ctx, \"test\", \u0026grafana.CloudStackArgs{\n\t\t\tDescription: pulumi.String(\"Test Grafana Cloud Stack\"),\n\t\t\tRegionSlug:  pulumi.String(\"eu\"),\n\t\t\tSlug:        pulumi.String(\"gcloudstacktest\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.CloudStack;\nimport com.pulumi.grafana.CloudStackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new CloudStack(\"test\", CloudStackArgs.builder()        \n            .description(\"Test Grafana Cloud Stack\")\n            .regionSlug(\"eu\")\n            .slug(\"gcloudstacktest\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:CloudStack\n    properties:\n      description: Test Grafana Cloud Stack\n      regionSlug: eu\n      slug: gcloudstacktest\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/cloudStack:CloudStack stack_name {{stack_id}}\n```\n\n ",
            "properties": {
                "alertmanagerName": {
                    "type": "string",
                    "description": "Name of the Alertmanager instance configured for this stack.\n"
                },
                "alertmanagerStatus": {
                    "type": "string",
                    "description": "Status of the Alertmanager instance configured for this stack.\n"
                },
                "alertmanagerUrl": {
                    "type": "string",
                    "description": "Base URL of the Alertmanager instance configured for this stack.\n"
                },
                "alertmanagerUserId": {
                    "type": "integer",
                    "description": "User ID of the Alertmanager instance configured for this stack.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of stack.\n"
                },
                "graphiteName": {
                    "type": "string"
                },
                "graphiteStatus": {
                    "type": "string"
                },
                "graphiteUrl": {
                    "type": "string"
                },
                "graphiteUserId": {
                    "type": "integer"
                },
                "logsName": {
                    "type": "string"
                },
                "logsStatus": {
                    "type": "string"
                },
                "logsUrl": {
                    "type": "string"
                },
                "logsUserId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of stack. Conventionally matches the url of the instance (e.g. “\\n\\n.grafana.net”).\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Organization id to assign to this stack.\n"
                },
                "orgName": {
                    "type": "string",
                    "description": "Organization name to assign to this stack.\n"
                },
                "orgSlug": {
                    "type": "string",
                    "description": "Organization slug to assign to this stack.\n"
                },
                "prometheusName": {
                    "type": "string",
                    "description": "Prometheus name for this instance.\n"
                },
                "prometheusRemoteEndpoint": {
                    "type": "string",
                    "description": "Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana\n"
                },
                "prometheusRemoteWriteEndpoint": {
                    "type": "string",
                    "description": "Use this URL to send prometheus metrics to Grafana cloud\n"
                },
                "prometheusStatus": {
                    "type": "string",
                    "description": "Prometheus status for this instance.\n"
                },
                "prometheusUrl": {
                    "type": "string",
                    "description": "Prometheus url for this instance.\n"
                },
                "prometheusUserId": {
                    "type": "integer",
                    "description": "Prometheus user ID. Used for e.g. remote_write.\n"
                },
                "regionSlug": {
                    "type": "string",
                    "description": "Region slug to assign to this stack.\nChanging region will destroy the existing stack and create a new one in the desired region.\nAvailable input au (GCP Australia), eu (GCP Belgium), us (GCP US Central), prod-ap-southeast-0 (GCP Singapore), prod-gb-south-0 (GCP UK), prod-ap-south-0 (GCP India), prod-sa-east-0 (GCP Brazil)\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Subdomain that the Grafana instance will be available at (i.e. setting slug to “\\n\\n” will make the instance\navailable at “https://\\n\\n.grafana.net\".\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the stack.\n"
                },
                "tracesName": {
                    "type": "string"
                },
                "tracesStatus": {
                    "type": "string"
                },
                "tracesUrl": {
                    "type": "string"
                },
                "tracesUserId": {
                    "type": "integer"
                },
                "url": {
                    "type": "string",
                    "description": "Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack\n"
                },
                "waitForReadiness": {
                    "type": "boolean",
                    "description": "Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.\n"
                },
                "waitForReadinessTimeout": {
                    "type": "string",
                    "description": "How long to wait for readiness (if enabled). Defaults to `5m0s`.\n"
                }
            },
            "required": [
                "alertmanagerName",
                "alertmanagerStatus",
                "alertmanagerUrl",
                "alertmanagerUserId",
                "graphiteName",
                "graphiteStatus",
                "graphiteUrl",
                "graphiteUserId",
                "logsName",
                "logsStatus",
                "logsUrl",
                "logsUserId",
                "name",
                "orgId",
                "orgName",
                "orgSlug",
                "prometheusName",
                "prometheusRemoteEndpoint",
                "prometheusRemoteWriteEndpoint",
                "prometheusStatus",
                "prometheusUrl",
                "prometheusUserId",
                "slug",
                "status",
                "tracesName",
                "tracesStatus",
                "tracesUrl",
                "tracesUserId",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of stack.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of stack. Conventionally matches the url of the instance (e.g. “\\n\\n.grafana.net”).\n"
                },
                "regionSlug": {
                    "type": "string",
                    "description": "Region slug to assign to this stack.\nChanging region will destroy the existing stack and create a new one in the desired region.\nAvailable input au (GCP Australia), eu (GCP Belgium), us (GCP US Central), prod-ap-southeast-0 (GCP Singapore), prod-gb-south-0 (GCP UK), prod-ap-south-0 (GCP India), prod-sa-east-0 (GCP Brazil)\n",
                    "willReplaceOnChanges": true
                },
                "slug": {
                    "type": "string",
                    "description": "Subdomain that the Grafana instance will be available at (i.e. setting slug to “\\n\\n” will make the instance\navailable at “https://\\n\\n.grafana.net\".\n"
                },
                "url": {
                    "type": "string",
                    "description": "Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack\n"
                },
                "waitForReadiness": {
                    "type": "boolean",
                    "description": "Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.\n"
                },
                "waitForReadinessTimeout": {
                    "type": "string",
                    "description": "How long to wait for readiness (if enabled). Defaults to `5m0s`.\n"
                }
            },
            "requiredInputs": [
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudStack resources.\n",
                "properties": {
                    "alertmanagerName": {
                        "type": "string",
                        "description": "Name of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerStatus": {
                        "type": "string",
                        "description": "Status of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerUrl": {
                        "type": "string",
                        "description": "Base URL of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerUserId": {
                        "type": "integer",
                        "description": "User ID of the Alertmanager instance configured for this stack.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of stack.\n"
                    },
                    "graphiteName": {
                        "type": "string"
                    },
                    "graphiteStatus": {
                        "type": "string"
                    },
                    "graphiteUrl": {
                        "type": "string"
                    },
                    "graphiteUserId": {
                        "type": "integer"
                    },
                    "logsName": {
                        "type": "string"
                    },
                    "logsStatus": {
                        "type": "string"
                    },
                    "logsUrl": {
                        "type": "string"
                    },
                    "logsUserId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of stack. Conventionally matches the url of the instance (e.g. “\\n\\n.grafana.net”).\n"
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "Organization id to assign to this stack.\n"
                    },
                    "orgName": {
                        "type": "string",
                        "description": "Organization name to assign to this stack.\n"
                    },
                    "orgSlug": {
                        "type": "string",
                        "description": "Organization slug to assign to this stack.\n"
                    },
                    "prometheusName": {
                        "type": "string",
                        "description": "Prometheus name for this instance.\n"
                    },
                    "prometheusRemoteEndpoint": {
                        "type": "string",
                        "description": "Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana\n"
                    },
                    "prometheusRemoteWriteEndpoint": {
                        "type": "string",
                        "description": "Use this URL to send prometheus metrics to Grafana cloud\n"
                    },
                    "prometheusStatus": {
                        "type": "string",
                        "description": "Prometheus status for this instance.\n"
                    },
                    "prometheusUrl": {
                        "type": "string",
                        "description": "Prometheus url for this instance.\n"
                    },
                    "prometheusUserId": {
                        "type": "integer",
                        "description": "Prometheus user ID. Used for e.g. remote_write.\n"
                    },
                    "regionSlug": {
                        "type": "string",
                        "description": "Region slug to assign to this stack.\nChanging region will destroy the existing stack and create a new one in the desired region.\nAvailable input au (GCP Australia), eu (GCP Belgium), us (GCP US Central), prod-ap-southeast-0 (GCP Singapore), prod-gb-south-0 (GCP UK), prod-ap-south-0 (GCP India), prod-sa-east-0 (GCP Brazil)\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Subdomain that the Grafana instance will be available at (i.e. setting slug to “\\n\\n” will make the instance\navailable at “https://\\n\\n.grafana.net\".\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the stack.\n"
                    },
                    "tracesName": {
                        "type": "string"
                    },
                    "tracesStatus": {
                        "type": "string"
                    },
                    "tracesUrl": {
                        "type": "string"
                    },
                    "tracesUserId": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string",
                        "description": "Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack\n"
                    },
                    "waitForReadiness": {
                        "type": "boolean",
                        "description": "Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.\n"
                    },
                    "waitForReadinessTimeout": {
                        "type": "string",
                        "description": "How long to wait for readiness (if enabled). Defaults to `5m0s`.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/contactPoint:ContactPoint": {
            "description": "Manages Grafana Alerting contact points.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/alerting/contact-points)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#contact-points)\n\nThis resource requires Grafana 9.1.0 or later.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst myContactPoint = new grafana.ContactPoint(\"myContactPoint\", {emails: [{\n    addresses: [\n        \"one@company.org\",\n        \"two@company.org\",\n    ],\n    disableResolveMessage: false,\n    message: \"{{ len .Alerts.Firing }} firing.\",\n    singleEmail: true,\n    subject: \"{{ template \\\"default.title\\\" .}}\",\n}]});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nmy_contact_point = grafana.ContactPoint(\"myContactPoint\", emails=[grafana.ContactPointEmailArgs(\n    addresses=[\n        \"one@company.org\",\n        \"two@company.org\",\n    ],\n    disable_resolve_message=False,\n    message=\"{{ len .Alerts.Firing }} firing.\",\n    single_email=True,\n    subject=\"{{ template \\\"default.title\\\" .}}\",\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myContactPoint = new Grafana.ContactPoint(\"myContactPoint\", new()\n    {\n        Emails = new[]\n        {\n            new Grafana.Inputs.ContactPointEmailArgs\n            {\n                Addresses = new[]\n                {\n                    \"one@company.org\",\n                    \"two@company.org\",\n                },\n                DisableResolveMessage = false,\n                Message = \"{{ len .Alerts.Firing }} firing.\",\n                SingleEmail = true,\n                Subject = \"{{ template \\\"default.title\\\" .}}\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewContactPoint(ctx, \"myContactPoint\", \u0026grafana.ContactPointArgs{\n\t\t\tEmails: grafana.ContactPointEmailArray{\n\t\t\t\t\u0026grafana.ContactPointEmailArgs{\n\t\t\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"one@company.org\"),\n\t\t\t\t\t\tpulumi.String(\"two@company.org\"),\n\t\t\t\t\t},\n\t\t\t\t\tDisableResolveMessage: pulumi.Bool(false),\n\t\t\t\t\tMessage:               pulumi.String(\"{{ len .Alerts.Firing }} firing.\"),\n\t\t\t\t\tSingleEmail:           pulumi.Bool(true),\n\t\t\t\t\tSubject:               pulumi.String(\"{{ template \\\"default.title\\\" .}}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.ContactPoint;\nimport com.pulumi.grafana.ContactPointArgs;\nimport com.pulumi.grafana.inputs.ContactPointEmailArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myContactPoint = new ContactPoint(\"myContactPoint\", ContactPointArgs.builder()        \n            .emails(ContactPointEmailArgs.builder()\n                .addresses(                \n                    \"one@company.org\",\n                    \"two@company.org\")\n                .disableResolveMessage(false)\n                .message(\"{{ len .Alerts.Firing }} firing.\")\n                .singleEmail(true)\n                .subject(\"{{ template \\\"default.title\\\" .}}\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myContactPoint:\n    type: grafana:ContactPoint\n    properties:\n      emails:\n        - addresses:\n            - one@company.org\n            - two@company.org\n          disableResolveMessage: false\n          message: '{{ len .Alerts.Firing }} firing.'\n          singleEmail: true\n          subject: '{{ template \"default.title\" .}}'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/contactPoint:ContactPoint contact_point_name {{contact_point_name}}\n```\n\n ",
            "properties": {
                "alertmanagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointAlertmanager:ContactPointAlertmanager"
                    },
                    "description": "A contact point that sends notifications to other Alertmanager instances.\n"
                },
                "dingdings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDingding:ContactPointDingding"
                    },
                    "description": "A contact point that sends notifications to DingDing.\n"
                },
                "discords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDiscord:ContactPointDiscord"
                    },
                    "description": "A contact point that sends notifications as Discord messages\n"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointEmail:ContactPointEmail"
                    },
                    "description": "A contact point that sends notifications to an email address.\n"
                },
                "googlechats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointGooglechat:ContactPointGooglechat"
                    },
                    "description": "A contact point that sends notifications to Google Chat.\n"
                },
                "kafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointKafka:ContactPointKafka"
                    },
                    "description": "A contact point that publishes notifications to Apache Kafka topics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the contact point.\n"
                },
                "opsgenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointOpsgeny:ContactPointOpsgeny"
                    },
                    "description": "A contact point that sends notifications to OpsGenie.\n"
                },
                "pagerduties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPagerduty:ContactPointPagerduty"
                    },
                    "description": "A contact point that sends notifications to PagerDuty.\n"
                },
                "pushovers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPushover:ContactPointPushover"
                    },
                    "description": "A contact point that sends notifications to Pushover.\n"
                },
                "sensugos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSensugo:ContactPointSensugo"
                    },
                    "description": "A contact point that sends notifications to SensuGo.\n"
                },
                "slacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSlack:ContactPointSlack"
                    },
                    "description": "A contact point that sends notifications to Slack.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTeam:ContactPointTeam"
                    },
                    "description": "A contact point that sends notifications to Microsoft Teams.\n"
                },
                "telegrams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTelegram:ContactPointTelegram"
                    },
                    "description": "A contact point that sends notifications to Telegram.\n"
                },
                "threemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointThreema:ContactPointThreema"
                    },
                    "description": "A contact point that sends notifications to Threema.\n"
                },
                "victorops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointVictorop:ContactPointVictorop"
                    },
                    "description": "A contact point that sends notifications to VictorOps (now known as Splunk OnCall).\n"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWebhook:ContactPointWebhook"
                    },
                    "description": "A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config\n"
                },
                "wecoms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWecom:ContactPointWecom"
                    },
                    "description": "A contact point that sends notifications to WeCom.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "alertmanagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointAlertmanager:ContactPointAlertmanager"
                    },
                    "description": "A contact point that sends notifications to other Alertmanager instances.\n"
                },
                "dingdings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDingding:ContactPointDingding"
                    },
                    "description": "A contact point that sends notifications to DingDing.\n"
                },
                "discords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDiscord:ContactPointDiscord"
                    },
                    "description": "A contact point that sends notifications as Discord messages\n"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointEmail:ContactPointEmail"
                    },
                    "description": "A contact point that sends notifications to an email address.\n"
                },
                "googlechats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointGooglechat:ContactPointGooglechat"
                    },
                    "description": "A contact point that sends notifications to Google Chat.\n"
                },
                "kafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointKafka:ContactPointKafka"
                    },
                    "description": "A contact point that publishes notifications to Apache Kafka topics.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the contact point.\n"
                },
                "opsgenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointOpsgeny:ContactPointOpsgeny"
                    },
                    "description": "A contact point that sends notifications to OpsGenie.\n"
                },
                "pagerduties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPagerduty:ContactPointPagerduty"
                    },
                    "description": "A contact point that sends notifications to PagerDuty.\n"
                },
                "pushovers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPushover:ContactPointPushover"
                    },
                    "description": "A contact point that sends notifications to Pushover.\n"
                },
                "sensugos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSensugo:ContactPointSensugo"
                    },
                    "description": "A contact point that sends notifications to SensuGo.\n"
                },
                "slacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSlack:ContactPointSlack"
                    },
                    "description": "A contact point that sends notifications to Slack.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTeam:ContactPointTeam"
                    },
                    "description": "A contact point that sends notifications to Microsoft Teams.\n"
                },
                "telegrams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTelegram:ContactPointTelegram"
                    },
                    "description": "A contact point that sends notifications to Telegram.\n"
                },
                "threemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointThreema:ContactPointThreema"
                    },
                    "description": "A contact point that sends notifications to Threema.\n"
                },
                "victorops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointVictorop:ContactPointVictorop"
                    },
                    "description": "A contact point that sends notifications to VictorOps (now known as Splunk OnCall).\n"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWebhook:ContactPointWebhook"
                    },
                    "description": "A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config\n"
                },
                "wecoms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWecom:ContactPointWecom"
                    },
                    "description": "A contact point that sends notifications to WeCom.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContactPoint resources.\n",
                "properties": {
                    "alertmanagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointAlertmanager:ContactPointAlertmanager"
                        },
                        "description": "A contact point that sends notifications to other Alertmanager instances.\n"
                    },
                    "dingdings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointDingding:ContactPointDingding"
                        },
                        "description": "A contact point that sends notifications to DingDing.\n"
                    },
                    "discords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointDiscord:ContactPointDiscord"
                        },
                        "description": "A contact point that sends notifications as Discord messages\n"
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointEmail:ContactPointEmail"
                        },
                        "description": "A contact point that sends notifications to an email address.\n"
                    },
                    "googlechats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointGooglechat:ContactPointGooglechat"
                        },
                        "description": "A contact point that sends notifications to Google Chat.\n"
                    },
                    "kafkas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointKafka:ContactPointKafka"
                        },
                        "description": "A contact point that publishes notifications to Apache Kafka topics.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the contact point.\n"
                    },
                    "opsgenies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointOpsgeny:ContactPointOpsgeny"
                        },
                        "description": "A contact point that sends notifications to OpsGenie.\n"
                    },
                    "pagerduties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointPagerduty:ContactPointPagerduty"
                        },
                        "description": "A contact point that sends notifications to PagerDuty.\n"
                    },
                    "pushovers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointPushover:ContactPointPushover"
                        },
                        "description": "A contact point that sends notifications to Pushover.\n"
                    },
                    "sensugos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointSensugo:ContactPointSensugo"
                        },
                        "description": "A contact point that sends notifications to SensuGo.\n"
                    },
                    "slacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointSlack:ContactPointSlack"
                        },
                        "description": "A contact point that sends notifications to Slack.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointTeam:ContactPointTeam"
                        },
                        "description": "A contact point that sends notifications to Microsoft Teams.\n"
                    },
                    "telegrams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointTelegram:ContactPointTelegram"
                        },
                        "description": "A contact point that sends notifications to Telegram.\n"
                    },
                    "threemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointThreema:ContactPointThreema"
                        },
                        "description": "A contact point that sends notifications to Threema.\n"
                    },
                    "victorops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointVictorop:ContactPointVictorop"
                        },
                        "description": "A contact point that sends notifications to VictorOps (now known as Splunk OnCall).\n"
                    },
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointWebhook:ContactPointWebhook"
                        },
                        "description": "A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config\n"
                    },
                    "wecoms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointWecom:ContactPointWecom"
                        },
                        "description": "A contact point that sends notifications to WeCom.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dashboard:Dashboard": {
            "description": "Manages Grafana dashboards.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/dashboard/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst metrics = new grafana.Dashboard(\"metrics\", {configJson: fs.readFileSync(\"grafana-dashboard.json\")});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nmetrics = grafana.Dashboard(\"metrics\", config_json=(lambda path: open(path).read())(\"grafana-dashboard.json\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var metrics = new Grafana.Dashboard(\"metrics\", new()\n    {\n        ConfigJson = File.ReadAllText(\"grafana-dashboard.json\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewDashboard(ctx, \"metrics\", \u0026grafana.DashboardArgs{\n\t\t\tConfigJson: readFileOrPanic(\"grafana-dashboard.json\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Dashboard;\nimport com.pulumi.grafana.DashboardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var metrics = new Dashboard(\"metrics\", DashboardArgs.builder()        \n            .configJson(Files.readString(Paths.get(\"grafana-dashboard.json\")))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  metrics:\n    type: grafana:Dashboard\n    properties:\n      configJson:\n        fn::readFile: grafana-dashboard.json\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/dashboard:Dashboard dashboard_name {{dashboard_uid}}\n```\n\n ",
            "properties": {
                "configJson": {
                    "type": "string",
                    "description": "The complete dashboard model JSON.\n"
                },
                "dashboardId": {
                    "type": "integer",
                    "description": "The numeric ID of the dashboard computed by Grafana.\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The id of the folder to save the dashboard in. This attribute is a string to reflect the type of the folder's id.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Set a commit message for the version history.\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "URL friendly version of the dashboard title. This field is deprecated, please use `uid` instead.\n",
                    "deprecationMessage": "Use `uid` instead."
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The full URL of the dashboard.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.\n"
                }
            },
            "required": [
                "configJson",
                "dashboardId",
                "slug",
                "uid",
                "url",
                "version"
            ],
            "inputProperties": {
                "configJson": {
                    "type": "string",
                    "description": "The complete dashboard model JSON.\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The id of the folder to save the dashboard in. This attribute is a string to reflect the type of the folder's id.\n",
                    "willReplaceOnChanges": true
                },
                "message": {
                    "type": "string",
                    "description": "Set a commit message for the version history.\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.\n"
                }
            },
            "requiredInputs": [
                "configJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "configJson": {
                        "type": "string",
                        "description": "The complete dashboard model JSON.\n"
                    },
                    "dashboardId": {
                        "type": "integer",
                        "description": "The numeric ID of the dashboard computed by Grafana.\n"
                    },
                    "folder": {
                        "type": "string",
                        "description": "The id of the folder to save the dashboard in. This attribute is a string to reflect the type of the folder's id.\n",
                        "willReplaceOnChanges": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Set a commit message for the version history.\n"
                    },
                    "overwrite": {
                        "type": "boolean",
                        "description": "Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL friendly version of the dashboard title. This field is deprecated, please use `uid` instead.\n",
                        "deprecationMessage": "Use `uid` instead."
                    },
                    "uid": {
                        "type": "string",
                        "description": "The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The full URL of the dashboard.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dashboardPermission:DashboardPermission": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/permissions/dashboard_folder_permissions/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/dashboard_permissions/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst team = new grafana.Team(\"team\", {});\nconst user = new grafana.User(\"user\", {email: \"user.name@example.com\"});\nconst metrics = new grafana.Dashboard(\"metrics\", {configJson: fs.readFileSync(\"grafana-dashboard.json\")});\nconst collectionPermission = new grafana.DashboardPermission(\"collectionPermission\", {\n    dashboardUid: metrics.uid,\n    permissions: [\n        {\n            role: \"Editor\",\n            permission: \"Edit\",\n        },\n        {\n            teamId: team.id,\n            permission: \"View\",\n        },\n        {\n            userId: user.id,\n            permission: \"Admin\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nteam = grafana.Team(\"team\")\nuser = grafana.User(\"user\", email=\"user.name@example.com\")\nmetrics = grafana.Dashboard(\"metrics\", config_json=(lambda path: open(path).read())(\"grafana-dashboard.json\"))\ncollection_permission = grafana.DashboardPermission(\"collectionPermission\",\n    dashboard_uid=metrics.uid,\n    permissions=[\n        grafana.DashboardPermissionPermissionArgs(\n            role=\"Editor\",\n            permission=\"Edit\",\n        ),\n        grafana.DashboardPermissionPermissionArgs(\n            team_id=team.id,\n            permission=\"View\",\n        ),\n        grafana.DashboardPermissionPermissionArgs(\n            user_id=user.id,\n            permission=\"Admin\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = new Grafana.Team(\"team\");\n\n    var user = new Grafana.User(\"user\", new()\n    {\n        Email = \"user.name@example.com\",\n    });\n\n    var metrics = new Grafana.Dashboard(\"metrics\", new()\n    {\n        ConfigJson = File.ReadAllText(\"grafana-dashboard.json\"),\n    });\n\n    var collectionPermission = new Grafana.DashboardPermission(\"collectionPermission\", new()\n    {\n        DashboardUid = metrics.Uid,\n        Permissions = new[]\n        {\n            new Grafana.Inputs.DashboardPermissionPermissionArgs\n            {\n                Role = \"Editor\",\n                Permission = \"Edit\",\n            },\n            new Grafana.Inputs.DashboardPermissionPermissionArgs\n            {\n                TeamId = team.Id,\n                Permission = \"View\",\n            },\n            new Grafana.Inputs.DashboardPermissionPermissionArgs\n            {\n                UserId = user.Id,\n                Permission = \"Admin\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := grafana.NewTeam(ctx, \"team\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := grafana.NewUser(ctx, \"user\", \u0026grafana.UserArgs{\n\t\t\tEmail: pulumi.String(\"user.name@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmetrics, err := grafana.NewDashboard(ctx, \"metrics\", \u0026grafana.DashboardArgs{\n\t\t\tConfigJson: readFileOrPanic(\"grafana-dashboard.json\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewDashboardPermission(ctx, \"collectionPermission\", \u0026grafana.DashboardPermissionArgs{\n\t\t\tDashboardUid: metrics.Uid,\n\t\t\tPermissions: grafana.DashboardPermissionPermissionArray{\n\t\t\t\t\u0026grafana.DashboardPermissionPermissionArgs{\n\t\t\t\t\tRole:       pulumi.String(\"Editor\"),\n\t\t\t\t\tPermission: pulumi.String(\"Edit\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.DashboardPermissionPermissionArgs{\n\t\t\t\t\tTeamId:     team.ID(),\n\t\t\t\t\tPermission: pulumi.String(\"View\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.DashboardPermissionPermissionArgs{\n\t\t\t\t\tUserId:     user.ID(),\n\t\t\t\t\tPermission: pulumi.String(\"Admin\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.User;\nimport com.pulumi.grafana.UserArgs;\nimport com.pulumi.grafana.Dashboard;\nimport com.pulumi.grafana.DashboardArgs;\nimport com.pulumi.grafana.DashboardPermission;\nimport com.pulumi.grafana.DashboardPermissionArgs;\nimport com.pulumi.grafana.inputs.DashboardPermissionPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var team = new Team(\"team\");\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .email(\"user.name@example.com\")\n            .build());\n\n        var metrics = new Dashboard(\"metrics\", DashboardArgs.builder()        \n            .configJson(Files.readString(Paths.get(\"grafana-dashboard.json\")))\n            .build());\n\n        var collectionPermission = new DashboardPermission(\"collectionPermission\", DashboardPermissionArgs.builder()        \n            .dashboardUid(metrics.uid())\n            .permissions(            \n                DashboardPermissionPermissionArgs.builder()\n                    .role(\"Editor\")\n                    .permission(\"Edit\")\n                    .build(),\n                DashboardPermissionPermissionArgs.builder()\n                    .teamId(team.id())\n                    .permission(\"View\")\n                    .build(),\n                DashboardPermissionPermissionArgs.builder()\n                    .userId(user.id())\n                    .permission(\"Admin\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  team:\n    type: grafana:Team\n  user:\n    type: grafana:User\n    properties:\n      email: user.name@example.com\n  metrics:\n    type: grafana:Dashboard\n    properties:\n      configJson:\n        fn::readFile: grafana-dashboard.json\n  collectionPermission:\n    type: grafana:DashboardPermission\n    properties:\n      dashboardUid: ${metrics.uid}\n      permissions:\n        - role: Editor\n          permission: Edit\n        - teamId: ${team.id}\n          permission: View\n        - userId: ${user.id}\n          permission: Admin\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/dashboardPermission:DashboardPermission dashboard_name {{dashboard_uid}}\n```\n\n ",
            "properties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "ID of the dashboard to apply permissions to. Deprecated: use `dashboard_uid` instead.\n",
                    "deprecationMessage": "use `dashboard_uid` instead"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "UID of the dashboard to apply permissions to.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DashboardPermissionPermission:DashboardPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "required": [
                "dashboardId",
                "dashboardUid",
                "permissions"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "ID of the dashboard to apply permissions to. Deprecated: use `dashboard_uid` instead.\n",
                    "deprecationMessage": "use `dashboard_uid` instead",
                    "willReplaceOnChanges": true
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "UID of the dashboard to apply permissions to.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DashboardPermissionPermission:DashboardPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "requiredInputs": [
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardPermission resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer",
                        "description": "ID of the dashboard to apply permissions to. Deprecated: use `dashboard_uid` instead.\n",
                        "deprecationMessage": "use `dashboard_uid` instead",
                        "willReplaceOnChanges": true
                    },
                    "dashboardUid": {
                        "type": "string",
                        "description": "UID of the dashboard to apply permissions to.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/DashboardPermissionPermission:DashboardPermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dataSource:DataSource": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/datasources/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/data_source/)\n\nThe required arguments for this resource vary depending on the type of data\nsource selected (via the 'type' argument).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst arbitrary_data = new grafana.DataSource(\"arbitrary-data\", {\n    type: \"stackdriver\",\n    jsonDataEncoded: JSON.stringify({\n        tokenUri: \"https://oauth2.googleapis.com/token\",\n        authenticationType: \"jwt\",\n        defaultProject: \"default-project\",\n        clientEmail: \"client-email@default-project.iam.gserviceaccount.com\",\n    }),\n    secureJsonDataEncoded: JSON.stringify({\n        privateKey: `-----BEGIN PRIVATE KEY-----\nprivate-key\n-----END PRIVATE KEY-----\n`,\n    }),\n});\nconst influxdb = new grafana.DataSource(\"influxdb\", {\n    type: \"influxdb\",\n    url: \"http://influxdb.example.net:8086/\",\n    basicAuthEnabled: true,\n    basicAuthUsername: \"username\",\n    databaseName: influxdb_database.metrics.name,\n    jsonDataEncoded: JSON.stringify({\n        authType: \"default\",\n        basicAuthPassword: \"mypassword\",\n    }),\n});\nconst cloudwatch = new grafana.DataSource(\"cloudwatch\", {\n    type: \"cloudwatch\",\n    jsonDataEncoded: JSON.stringify({\n        defaultRegion: \"us-east-1\",\n        authType: \"keys\",\n    }),\n    secureJsonDataEncoded: JSON.stringify({\n        accessKey: \"123\",\n        secretKey: \"456\",\n    }),\n});\nconst prometheus = new grafana.DataSource(\"prometheus\", {\n    type: \"prometheus\",\n    url: \"https://my-instances.com\",\n    basicAuthEnabled: true,\n    basicAuthUsername: \"username\",\n    jsonDataEncoded: JSON.stringify({\n        httpMethod: \"POST\",\n        prometheusType: \"Mimir\",\n        prometheusVersion: \"2.4.0\",\n    }),\n    secureJsonDataEncoded: JSON.stringify({\n        basicAuthPassword: \"password\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport lbrlabs_pulumi_grafana as grafana\n\narbitrary_data = grafana.DataSource(\"arbitrary-data\",\n    type=\"stackdriver\",\n    json_data_encoded=json.dumps({\n        \"tokenUri\": \"https://oauth2.googleapis.com/token\",\n        \"authenticationType\": \"jwt\",\n        \"defaultProject\": \"default-project\",\n        \"clientEmail\": \"client-email@default-project.iam.gserviceaccount.com\",\n    }),\n    secure_json_data_encoded=json.dumps({\n        \"privateKey\": \"\"\"-----BEGIN PRIVATE KEY-----\nprivate-key\n-----END PRIVATE KEY-----\n\"\"\",\n    }))\ninfluxdb = grafana.DataSource(\"influxdb\",\n    type=\"influxdb\",\n    url=\"http://influxdb.example.net:8086/\",\n    basic_auth_enabled=True,\n    basic_auth_username=\"username\",\n    database_name=influxdb_database[\"metrics\"][\"name\"],\n    json_data_encoded=json.dumps({\n        \"authType\": \"default\",\n        \"basicAuthPassword\": \"mypassword\",\n    }))\ncloudwatch = grafana.DataSource(\"cloudwatch\",\n    type=\"cloudwatch\",\n    json_data_encoded=json.dumps({\n        \"defaultRegion\": \"us-east-1\",\n        \"authType\": \"keys\",\n    }),\n    secure_json_data_encoded=json.dumps({\n        \"accessKey\": \"123\",\n        \"secretKey\": \"456\",\n    }))\nprometheus = grafana.DataSource(\"prometheus\",\n    type=\"prometheus\",\n    url=\"https://my-instances.com\",\n    basic_auth_enabled=True,\n    basic_auth_username=\"username\",\n    json_data_encoded=json.dumps({\n        \"httpMethod\": \"POST\",\n        \"prometheusType\": \"Mimir\",\n        \"prometheusVersion\": \"2.4.0\",\n    }),\n    secure_json_data_encoded=json.dumps({\n        \"basicAuthPassword\": \"password\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var arbitrary_data = new Grafana.DataSource(\"arbitrary-data\", new()\n    {\n        Type = \"stackdriver\",\n        JsonDataEncoded = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"tokenUri\"] = \"https://oauth2.googleapis.com/token\",\n            [\"authenticationType\"] = \"jwt\",\n            [\"defaultProject\"] = \"default-project\",\n            [\"clientEmail\"] = \"client-email@default-project.iam.gserviceaccount.com\",\n        }),\n        SecureJsonDataEncoded = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"privateKey\"] = @\"-----BEGIN PRIVATE KEY-----\nprivate-key\n-----END PRIVATE KEY-----\n\",\n        }),\n    });\n\n    var influxdb = new Grafana.DataSource(\"influxdb\", new()\n    {\n        Type = \"influxdb\",\n        Url = \"http://influxdb.example.net:8086/\",\n        BasicAuthEnabled = true,\n        BasicAuthUsername = \"username\",\n        DatabaseName = influxdb_database.Metrics.Name,\n        JsonDataEncoded = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"authType\"] = \"default\",\n            [\"basicAuthPassword\"] = \"mypassword\",\n        }),\n    });\n\n    var cloudwatch = new Grafana.DataSource(\"cloudwatch\", new()\n    {\n        Type = \"cloudwatch\",\n        JsonDataEncoded = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"defaultRegion\"] = \"us-east-1\",\n            [\"authType\"] = \"keys\",\n        }),\n        SecureJsonDataEncoded = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"accessKey\"] = \"123\",\n            [\"secretKey\"] = \"456\",\n        }),\n    });\n\n    var prometheus = new Grafana.DataSource(\"prometheus\", new()\n    {\n        Type = \"prometheus\",\n        Url = \"https://my-instances.com\",\n        BasicAuthEnabled = true,\n        BasicAuthUsername = \"username\",\n        JsonDataEncoded = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"httpMethod\"] = \"POST\",\n            [\"prometheusType\"] = \"Mimir\",\n            [\"prometheusVersion\"] = \"2.4.0\",\n        }),\n        SecureJsonDataEncoded = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"basicAuthPassword\"] = \"password\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"tokenUri\":           \"https://oauth2.googleapis.com/token\",\n\t\t\t\"authenticationType\": \"jwt\",\n\t\t\t\"defaultProject\":     \"default-project\",\n\t\t\t\"clientEmail\":        \"client-email@default-project.iam.gserviceaccount.com\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"privateKey\": \"-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = grafana.NewDataSource(ctx, \"arbitrary-data\", \u0026grafana.DataSourceArgs{\n\t\t\tType:                  pulumi.String(\"stackdriver\"),\n\t\t\tJsonDataEncoded:       pulumi.String(json0),\n\t\t\tSecureJsonDataEncoded: pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON2, err := json.Marshal(map[string]interface{}{\n\t\t\t\"authType\":          \"default\",\n\t\t\t\"basicAuthPassword\": \"mypassword\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson2 := string(tmpJSON2)\n\t\t_, err = grafana.NewDataSource(ctx, \"influxdb\", \u0026grafana.DataSourceArgs{\n\t\t\tType:              pulumi.String(\"influxdb\"),\n\t\t\tUrl:               pulumi.String(\"http://influxdb.example.net:8086/\"),\n\t\t\tBasicAuthEnabled:  pulumi.Bool(true),\n\t\t\tBasicAuthUsername: pulumi.String(\"username\"),\n\t\t\tDatabaseName:      pulumi.Any(influxdb_database.Metrics.Name),\n\t\t\tJsonDataEncoded:   pulumi.String(json2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON3, err := json.Marshal(map[string]interface{}{\n\t\t\t\"defaultRegion\": \"us-east-1\",\n\t\t\t\"authType\":      \"keys\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson3 := string(tmpJSON3)\n\t\ttmpJSON4, err := json.Marshal(map[string]interface{}{\n\t\t\t\"accessKey\": \"123\",\n\t\t\t\"secretKey\": \"456\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson4 := string(tmpJSON4)\n\t\t_, err = grafana.NewDataSource(ctx, \"cloudwatch\", \u0026grafana.DataSourceArgs{\n\t\t\tType:                  pulumi.String(\"cloudwatch\"),\n\t\t\tJsonDataEncoded:       pulumi.String(json3),\n\t\t\tSecureJsonDataEncoded: pulumi.String(json4),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON5, err := json.Marshal(map[string]interface{}{\n\t\t\t\"httpMethod\":        \"POST\",\n\t\t\t\"prometheusType\":    \"Mimir\",\n\t\t\t\"prometheusVersion\": \"2.4.0\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson5 := string(tmpJSON5)\n\t\ttmpJSON6, err := json.Marshal(map[string]interface{}{\n\t\t\t\"basicAuthPassword\": \"password\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson6 := string(tmpJSON6)\n\t\t_, err = grafana.NewDataSource(ctx, \"prometheus\", \u0026grafana.DataSourceArgs{\n\t\t\tType:                  pulumi.String(\"prometheus\"),\n\t\t\tUrl:                   pulumi.String(\"https://my-instances.com\"),\n\t\t\tBasicAuthEnabled:      pulumi.Bool(true),\n\t\t\tBasicAuthUsername:     pulumi.String(\"username\"),\n\t\t\tJsonDataEncoded:       pulumi.String(json5),\n\t\t\tSecureJsonDataEncoded: pulumi.String(json6),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.DataSource;\nimport com.pulumi.grafana.DataSourceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var arbitrary_data = new DataSource(\"arbitrary-data\", DataSourceArgs.builder()        \n            .type(\"stackdriver\")\n            .jsonDataEncoded(serializeJson(\n                jsonObject(\n                    jsonProperty(\"tokenUri\", \"https://oauth2.googleapis.com/token\"),\n                    jsonProperty(\"authenticationType\", \"jwt\"),\n                    jsonProperty(\"defaultProject\", \"default-project\"),\n                    jsonProperty(\"clientEmail\", \"client-email@default-project.iam.gserviceaccount.com\")\n                )))\n            .secureJsonDataEncoded(serializeJson(\n                jsonObject(\n                    jsonProperty(\"privateKey\", \"\"\"\n-----BEGIN PRIVATE KEY-----\nprivate-key\n-----END PRIVATE KEY-----\n                    \"\"\")\n                )))\n            .build());\n\n        var influxdb = new DataSource(\"influxdb\", DataSourceArgs.builder()        \n            .type(\"influxdb\")\n            .url(\"http://influxdb.example.net:8086/\")\n            .basicAuthEnabled(true)\n            .basicAuthUsername(\"username\")\n            .databaseName(influxdb_database.metrics().name())\n            .jsonDataEncoded(serializeJson(\n                jsonObject(\n                    jsonProperty(\"authType\", \"default\"),\n                    jsonProperty(\"basicAuthPassword\", \"mypassword\")\n                )))\n            .build());\n\n        var cloudwatch = new DataSource(\"cloudwatch\", DataSourceArgs.builder()        \n            .type(\"cloudwatch\")\n            .jsonDataEncoded(serializeJson(\n                jsonObject(\n                    jsonProperty(\"defaultRegion\", \"us-east-1\"),\n                    jsonProperty(\"authType\", \"keys\")\n                )))\n            .secureJsonDataEncoded(serializeJson(\n                jsonObject(\n                    jsonProperty(\"accessKey\", \"123\"),\n                    jsonProperty(\"secretKey\", \"456\")\n                )))\n            .build());\n\n        var prometheus = new DataSource(\"prometheus\", DataSourceArgs.builder()        \n            .type(\"prometheus\")\n            .url(\"https://my-instances.com\")\n            .basicAuthEnabled(true)\n            .basicAuthUsername(\"username\")\n            .jsonDataEncoded(serializeJson(\n                jsonObject(\n                    jsonProperty(\"httpMethod\", \"POST\"),\n                    jsonProperty(\"prometheusType\", \"Mimir\"),\n                    jsonProperty(\"prometheusVersion\", \"2.4.0\")\n                )))\n            .secureJsonDataEncoded(serializeJson(\n                jsonObject(\n                    jsonProperty(\"basicAuthPassword\", \"password\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  arbitrary-data:\n    type: grafana:DataSource\n    properties:\n      type: stackdriver\n      jsonDataEncoded:\n        fn::toJSON:\n          tokenUri: https://oauth2.googleapis.com/token\n          authenticationType: jwt\n          defaultProject: default-project\n          clientEmail: client-email@default-project.iam.gserviceaccount.com\n      secureJsonDataEncoded:\n        fn::toJSON:\n          privateKey: |\n            -----BEGIN PRIVATE KEY-----\n            private-key\n            -----END PRIVATE KEY-----\n  influxdb:\n    type: grafana:DataSource\n    properties:\n      type: influxdb\n      url: http://influxdb.example.net:8086/\n      basicAuthEnabled: true\n      basicAuthUsername: username\n      databaseName: ${influxdb_database.metrics.name}\n      jsonDataEncoded:\n        fn::toJSON:\n          authType: default\n          basicAuthPassword: mypassword\n  cloudwatch:\n    type: grafana:DataSource\n    properties:\n      type: cloudwatch\n      jsonDataEncoded:\n        fn::toJSON:\n          defaultRegion: us-east-1\n          authType: keys\n      secureJsonDataEncoded:\n        fn::toJSON:\n          accessKey: '123'\n          secretKey: '456'\n  prometheus:\n    type: grafana:DataSource\n    properties:\n      type: prometheus\n      url: https://my-instances.com\n      basicAuthEnabled: true\n      basicAuthUsername: username\n      jsonDataEncoded:\n        fn::toJSON:\n          httpMethod: POST\n          prometheusType: Mimir\n          prometheusVersion: 2.4.0\n      secureJsonDataEncoded:\n        fn::toJSON:\n          basicAuthPassword: password\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/dataSource:DataSource by_integer_id {{datasource id}}\n```\n\n\n\n```sh\n $ pulumi import grafana:index/dataSource:DataSource by_uid {{datasource uid}}\n```\n\n ",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.\n"
                },
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable basic auth for the data source. Defaults to `false`.\n"
                },
                "basicAuthPassword": {
                    "type": "string",
                    "description": "Basic auth password. Deprecated:Use secure*json*data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.\n",
                    "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+.",
                    "secret": true
                },
                "basicAuthUsername": {
                    "type": "string",
                    "description": "Basic auth username. Defaults to ``.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "(Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.\n"
                },
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers\n",
                    "secret": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.\n"
                },
                "jsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the json data. Replaces the json_data attribute, this attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.\n"
                },
                "jsonDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourceJsonData:DataSourceJsonData"
                    },
                    "description": "(Required by some data source types). Deprecated: Use json*data*encoded instead. It supports arbitrary JSON data, and therefore all attributes.\n",
                    "deprecationMessage": "Use json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes."
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the data source.\n"
                },
                "password": {
                    "type": "string",
                    "description": "(Required by some data source types) The password to use to authenticate to the data source. Deprecated: Use secure*json*data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.\n",
                    "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+.",
                    "secret": true
                },
                "secureJsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the secure json data. Replaces the secure*json*data attribute, this attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.\n",
                    "secret": true
                },
                "secureJsonDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourceSecureJsonData:DataSourceSecureJsonData"
                    },
                    "description": "Deprecated: Use secure*json*data*encoded instead. It supports arbitrary JSON data, and therefore all attributes.\n",
                    "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes.",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The data source type. Must be one of the supported data source keywords.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier. If unset, this will be automatically generated.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL for the data source. The type of URL required varies depending on the chosen data source type.\n"
                },
                "username": {
                    "type": "string",
                    "description": "(Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.\n"
                }
            },
            "required": [
                "name",
                "type",
                "uid"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.\n"
                },
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable basic auth for the data source. Defaults to `false`.\n"
                },
                "basicAuthPassword": {
                    "type": "string",
                    "description": "Basic auth password. Deprecated:Use secure*json*data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.\n",
                    "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+.",
                    "secret": true
                },
                "basicAuthUsername": {
                    "type": "string",
                    "description": "Basic auth username. Defaults to ``.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "(Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.\n"
                },
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers\n",
                    "secret": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.\n"
                },
                "jsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the json data. Replaces the json_data attribute, this attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.\n"
                },
                "jsonDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourceJsonData:DataSourceJsonData"
                    },
                    "description": "(Required by some data source types). Deprecated: Use json*data*encoded instead. It supports arbitrary JSON data, and therefore all attributes.\n",
                    "deprecationMessage": "Use json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes."
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the data source.\n"
                },
                "password": {
                    "type": "string",
                    "description": "(Required by some data source types) The password to use to authenticate to the data source. Deprecated: Use secure*json*data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.\n",
                    "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+.",
                    "secret": true
                },
                "secureJsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the secure json data. Replaces the secure*json*data attribute, this attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.\n",
                    "secret": true
                },
                "secureJsonDatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourceSecureJsonData:DataSourceSecureJsonData"
                    },
                    "description": "Deprecated: Use secure*json*data*encoded instead. It supports arbitrary JSON data, and therefore all attributes.\n",
                    "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes.",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The data source type. Must be one of the supported data source keywords.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier. If unset, this will be automatically generated.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL for the data source. The type of URL required varies depending on the chosen data source type.\n"
                },
                "username": {
                    "type": "string",
                    "description": "(Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataSource resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "The method by which Grafana will access the data source: `proxy` or `direct`. Defaults to `proxy`.\n"
                    },
                    "basicAuthEnabled": {
                        "type": "boolean",
                        "description": "Whether to enable basic auth for the data source. Defaults to `false`.\n"
                    },
                    "basicAuthPassword": {
                        "type": "string",
                        "description": "Basic auth password. Deprecated:Use secure*json*data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.\n",
                        "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+.",
                        "secret": true
                    },
                    "basicAuthUsername": {
                        "type": "string",
                        "description": "Basic auth username. Defaults to ``.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "(Required by some data source types) The name of the database to use on the selected data source server. Defaults to ``.\n"
                    },
                    "httpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers\n",
                        "secret": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Whether to set the data source as default. This should only be `true` to a single data source. Defaults to `false`.\n"
                    },
                    "jsonDataEncoded": {
                        "type": "string",
                        "description": "Serialized JSON string containing the json data. Replaces the json_data attribute, this attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.\n"
                    },
                    "jsonDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/DataSourceJsonData:DataSourceJsonData"
                        },
                        "description": "(Required by some data source types). Deprecated: Use json*data*encoded instead. It supports arbitrary JSON data, and therefore all attributes.\n",
                        "deprecationMessage": "Use json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes."
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name for the data source.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "(Required by some data source types) The password to use to authenticate to the data source. Deprecated: Use secure*json*data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+. Defaults to ``.\n",
                        "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes. This attribute is removed in Grafana 9.0+.",
                        "secret": true
                    },
                    "secureJsonDataEncoded": {
                        "type": "string",
                        "description": "Serialized JSON string containing the secure json data. Replaces the secure*json*data attribute, this attribute can be used to pass secure configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI.\n",
                        "secret": true
                    },
                    "secureJsonDatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/DataSourceSecureJsonData:DataSourceSecureJsonData"
                        },
                        "description": "Deprecated: Use secure*json*data*encoded instead. It supports arbitrary JSON data, and therefore all attributes.\n",
                        "deprecationMessage": "Use secure_json_data_encoded instead. It supports arbitrary JSON data, and therefore all attributes.",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The data source type. Must be one of the supported data source keywords.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier. If unset, this will be automatically generated.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL for the data source. The type of URL required varies depending on the chosen data source type.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "(Required by some data source types) The username to use to authenticate to the data source. Defaults to ``.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dataSourcePermission:DataSourcePermission": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/datasource_permissions/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst team = new grafana.Team(\"team\", {});\nconst foo = new grafana.DataSource(\"foo\", {\n    type: \"cloudwatch\",\n    jsonDatas: [{\n        defaultRegion: \"us-east-1\",\n        authType: \"keys\",\n    }],\n    secureJsonDatas: [{\n        accessKey: \"123\",\n        secretKey: \"456\",\n    }],\n});\nconst fooPermissions = new grafana.DataSourcePermission(\"fooPermissions\", {\n    datasourceId: foo.id,\n    permissions: [\n        {\n            teamId: team.id,\n            permission: \"Query\",\n        },\n        {\n            userId: 3,\n            permission: \"Edit\",\n        },\n        {\n            builtInRole: \"Viewer\",\n            permission: \"Query\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nteam = grafana.Team(\"team\")\nfoo = grafana.DataSource(\"foo\",\n    type=\"cloudwatch\",\n    json_datas=[grafana.DataSourceJsonDataArgs(\n        default_region=\"us-east-1\",\n        auth_type=\"keys\",\n    )],\n    secure_json_datas=[grafana.DataSourceSecureJsonDataArgs(\n        access_key=\"123\",\n        secret_key=\"456\",\n    )])\nfoo_permissions = grafana.DataSourcePermission(\"fooPermissions\",\n    datasource_id=foo.id,\n    permissions=[\n        grafana.DataSourcePermissionPermissionArgs(\n            team_id=team.id,\n            permission=\"Query\",\n        ),\n        grafana.DataSourcePermissionPermissionArgs(\n            user_id=3,\n            permission=\"Edit\",\n        ),\n        grafana.DataSourcePermissionPermissionArgs(\n            built_in_role=\"Viewer\",\n            permission=\"Query\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = new Grafana.Team(\"team\");\n\n    var foo = new Grafana.DataSource(\"foo\", new()\n    {\n        Type = \"cloudwatch\",\n        JsonDatas = new[]\n        {\n            new Grafana.Inputs.DataSourceJsonDataArgs\n            {\n                DefaultRegion = \"us-east-1\",\n                AuthType = \"keys\",\n            },\n        },\n        SecureJsonDatas = new[]\n        {\n            new Grafana.Inputs.DataSourceSecureJsonDataArgs\n            {\n                AccessKey = \"123\",\n                SecretKey = \"456\",\n            },\n        },\n    });\n\n    var fooPermissions = new Grafana.DataSourcePermission(\"fooPermissions\", new()\n    {\n        DatasourceId = foo.Id,\n        Permissions = new[]\n        {\n            new Grafana.Inputs.DataSourcePermissionPermissionArgs\n            {\n                TeamId = team.Id,\n                Permission = \"Query\",\n            },\n            new Grafana.Inputs.DataSourcePermissionPermissionArgs\n            {\n                UserId = 3,\n                Permission = \"Edit\",\n            },\n            new Grafana.Inputs.DataSourcePermissionPermissionArgs\n            {\n                BuiltInRole = \"Viewer\",\n                Permission = \"Query\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := grafana.NewTeam(ctx, \"team\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo, err := grafana.NewDataSource(ctx, \"foo\", \u0026grafana.DataSourceArgs{\n\t\t\tType: pulumi.String(\"cloudwatch\"),\n\t\t\tJsonDatas: grafana.DataSourceJsonDataArray{\n\t\t\t\t\u0026grafana.DataSourceJsonDataArgs{\n\t\t\t\t\tDefaultRegion: pulumi.String(\"us-east-1\"),\n\t\t\t\t\tAuthType:      pulumi.String(\"keys\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecureJsonDatas: grafana.DataSourceSecureJsonDataArray{\n\t\t\t\t\u0026grafana.DataSourceSecureJsonDataArgs{\n\t\t\t\t\tAccessKey: pulumi.String(\"123\"),\n\t\t\t\t\tSecretKey: pulumi.String(\"456\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewDataSourcePermission(ctx, \"fooPermissions\", \u0026grafana.DataSourcePermissionArgs{\n\t\t\tDatasourceId: foo.ID(),\n\t\t\tPermissions: grafana.DataSourcePermissionPermissionArray{\n\t\t\t\t\u0026grafana.DataSourcePermissionPermissionArgs{\n\t\t\t\t\tTeamId:     team.ID(),\n\t\t\t\t\tPermission: pulumi.String(\"Query\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.DataSourcePermissionPermissionArgs{\n\t\t\t\t\tUserId:     pulumi.Int(3),\n\t\t\t\t\tPermission: pulumi.String(\"Edit\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.DataSourcePermissionPermissionArgs{\n\t\t\t\t\tBuiltInRole: pulumi.String(\"Viewer\"),\n\t\t\t\t\tPermission:  pulumi.String(\"Query\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.DataSource;\nimport com.pulumi.grafana.DataSourceArgs;\nimport com.pulumi.grafana.inputs.DataSourceJsonDataArgs;\nimport com.pulumi.grafana.inputs.DataSourceSecureJsonDataArgs;\nimport com.pulumi.grafana.DataSourcePermission;\nimport com.pulumi.grafana.DataSourcePermissionArgs;\nimport com.pulumi.grafana.inputs.DataSourcePermissionPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var team = new Team(\"team\");\n\n        var foo = new DataSource(\"foo\", DataSourceArgs.builder()        \n            .type(\"cloudwatch\")\n            .jsonDatas(DataSourceJsonDataArgs.builder()\n                .defaultRegion(\"us-east-1\")\n                .authType(\"keys\")\n                .build())\n            .secureJsonDatas(DataSourceSecureJsonDataArgs.builder()\n                .accessKey(\"123\")\n                .secretKey(\"456\")\n                .build())\n            .build());\n\n        var fooPermissions = new DataSourcePermission(\"fooPermissions\", DataSourcePermissionArgs.builder()        \n            .datasourceId(foo.id())\n            .permissions(            \n                DataSourcePermissionPermissionArgs.builder()\n                    .teamId(team.id())\n                    .permission(\"Query\")\n                    .build(),\n                DataSourcePermissionPermissionArgs.builder()\n                    .userId(3)\n                    .permission(\"Edit\")\n                    .build(),\n                DataSourcePermissionPermissionArgs.builder()\n                    .builtInRole(\"Viewer\")\n                    .permission(\"Query\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  team:\n    type: grafana:Team\n  foo:\n    type: grafana:DataSource\n    properties:\n      type: cloudwatch\n      jsonDatas:\n        - defaultRegion: us-east-1\n          authType: keys\n      secureJsonDatas:\n        - accessKey: '123'\n          secretKey: '456'\n  fooPermissions:\n    type: grafana:DataSourcePermission\n    properties:\n      datasourceId: ${foo.id}\n      permissions:\n        - teamId: ${team.id}\n          permission: Query\n        - userId: 3\n          permission: Edit\n        - builtInRole: Viewer\n          permission: Query\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "datasourceId": {
                    "type": "integer",
                    "description": "ID of the datasource to apply permissions to.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "required": [
                "datasourceId",
                "permissions"
            ],
            "inputProperties": {
                "datasourceId": {
                    "type": "integer",
                    "description": "ID of the datasource to apply permissions to.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "requiredInputs": [
                "datasourceId",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataSourcePermission resources.\n",
                "properties": {
                    "datasourceId": {
                        "type": "integer",
                        "description": "ID of the datasource to apply permissions to.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/folder:Folder": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/dashboard-folders/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/folder/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst testFolderFolder = new grafana.Folder(\"testFolderFolder\", {title: \"Terraform Test Folder\"});\nconst testFolderDashboard = new grafana.Dashboard(\"testFolderDashboard\", {\n    folder: testFolderFolder.id,\n    configJson: `{\n  \"title\": \"Dashboard in folder\",\n  \"uid\": \"dashboard-in-folder\"\n}\n`,\n});\nconst testFolderWithUid = new grafana.Folder(\"testFolderWithUid\", {\n    uid: \"test-folder-uid\",\n    title: \"Terraform Test Folder With UID\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest_folder_folder = grafana.Folder(\"testFolderFolder\", title=\"Terraform Test Folder\")\ntest_folder_dashboard = grafana.Dashboard(\"testFolderDashboard\",\n    folder=test_folder_folder.id,\n    config_json=\"\"\"{\n  \"title\": \"Dashboard in folder\",\n  \"uid\": \"dashboard-in-folder\"\n}\n\"\"\")\ntest_folder_with_uid = grafana.Folder(\"testFolderWithUid\",\n    uid=\"test-folder-uid\",\n    title=\"Terraform Test Folder With UID\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testFolderFolder = new Grafana.Folder(\"testFolderFolder\", new()\n    {\n        Title = \"Terraform Test Folder\",\n    });\n\n    var testFolderDashboard = new Grafana.Dashboard(\"testFolderDashboard\", new()\n    {\n        Folder = testFolderFolder.Id,\n        ConfigJson = @\"{\n  \"\"title\"\": \"\"Dashboard in folder\"\",\n  \"\"uid\"\": \"\"dashboard-in-folder\"\"\n}\n\",\n    });\n\n    var testFolderWithUid = new Grafana.Folder(\"testFolderWithUid\", new()\n    {\n        Uid = \"test-folder-uid\",\n        Title = \"Terraform Test Folder With UID\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestFolderFolder, err := grafana.NewFolder(ctx, \"testFolderFolder\", \u0026grafana.FolderArgs{\n\t\t\tTitle: pulumi.String(\"Terraform Test Folder\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewDashboard(ctx, \"testFolderDashboard\", \u0026grafana.DashboardArgs{\n\t\t\tFolder:     testFolderFolder.ID(),\n\t\t\tConfigJson: pulumi.String(fmt.Sprintf(\"{\\n  \\\"title\\\": \\\"Dashboard in folder\\\",\\n  \\\"uid\\\": \\\"dashboard-in-folder\\\"\\n}\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewFolder(ctx, \"testFolderWithUid\", \u0026grafana.FolderArgs{\n\t\t\tUid:   pulumi.String(\"test-folder-uid\"),\n\t\t\tTitle: pulumi.String(\"Terraform Test Folder With UID\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Folder;\nimport com.pulumi.grafana.FolderArgs;\nimport com.pulumi.grafana.Dashboard;\nimport com.pulumi.grafana.DashboardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testFolderFolder = new Folder(\"testFolderFolder\", FolderArgs.builder()        \n            .title(\"Terraform Test Folder\")\n            .build());\n\n        var testFolderDashboard = new Dashboard(\"testFolderDashboard\", DashboardArgs.builder()        \n            .folder(testFolderFolder.id())\n            .configJson(\"\"\"\n{\n  \"title\": \"Dashboard in folder\",\n  \"uid\": \"dashboard-in-folder\"\n}\n            \"\"\")\n            .build());\n\n        var testFolderWithUid = new Folder(\"testFolderWithUid\", FolderArgs.builder()        \n            .uid(\"test-folder-uid\")\n            .title(\"Terraform Test Folder With UID\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testFolderFolder:\n    type: grafana:Folder\n    properties:\n      title: Terraform Test Folder\n  testFolderDashboard:\n    type: grafana:Dashboard\n    properties:\n      folder: ${testFolderFolder.id}\n      configJson: |\n        {\n          \"title\": \"Dashboard in folder\",\n          \"uid\": \"dashboard-in-folder\"\n        }\n  testFolderWithUid:\n    type: grafana:Folder\n    properties:\n      uid: test-folder-uid\n      title: Terraform Test Folder With UID\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/folder:Folder by_integer_id {{folder_id}}\n```\n\n\n\n```sh\n $ pulumi import grafana:index/folder:Folder by_uid {{folder_uid}}\n```\n\n ",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the folder.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The full URL of the folder.\n"
                }
            },
            "required": [
                "title",
                "uid",
                "url"
            ],
            "inputProperties": {
                "title": {
                    "type": "string",
                    "description": "The title of the folder.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier.\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Folder resources.\n",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the folder.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The full URL of the folder.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/folderPermission:FolderPermission": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/permissions/dashboard_folder_permissions/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/folder_permissions/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst team = new grafana.Team(\"team\", {});\nconst user = new grafana.User(\"user\", {email: \"user.name@example.com\"});\nconst collection = new grafana.Folder(\"collection\", {title: \"Folder Title\"});\nconst collectionPermission = new grafana.FolderPermission(\"collectionPermission\", {\n    folderUid: collection.uid,\n    permissions: [\n        {\n            role: \"Editor\",\n            permission: \"Edit\",\n        },\n        {\n            teamId: team.id,\n            permission: \"View\",\n        },\n        {\n            userId: user.id,\n            permission: \"Admin\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nteam = grafana.Team(\"team\")\nuser = grafana.User(\"user\", email=\"user.name@example.com\")\ncollection = grafana.Folder(\"collection\", title=\"Folder Title\")\ncollection_permission = grafana.FolderPermission(\"collectionPermission\",\n    folder_uid=collection.uid,\n    permissions=[\n        grafana.FolderPermissionPermissionArgs(\n            role=\"Editor\",\n            permission=\"Edit\",\n        ),\n        grafana.FolderPermissionPermissionArgs(\n            team_id=team.id,\n            permission=\"View\",\n        ),\n        grafana.FolderPermissionPermissionArgs(\n            user_id=user.id,\n            permission=\"Admin\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = new Grafana.Team(\"team\");\n\n    var user = new Grafana.User(\"user\", new()\n    {\n        Email = \"user.name@example.com\",\n    });\n\n    var collection = new Grafana.Folder(\"collection\", new()\n    {\n        Title = \"Folder Title\",\n    });\n\n    var collectionPermission = new Grafana.FolderPermission(\"collectionPermission\", new()\n    {\n        FolderUid = collection.Uid,\n        Permissions = new[]\n        {\n            new Grafana.Inputs.FolderPermissionPermissionArgs\n            {\n                Role = \"Editor\",\n                Permission = \"Edit\",\n            },\n            new Grafana.Inputs.FolderPermissionPermissionArgs\n            {\n                TeamId = team.Id,\n                Permission = \"View\",\n            },\n            new Grafana.Inputs.FolderPermissionPermissionArgs\n            {\n                UserId = user.Id,\n                Permission = \"Admin\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := grafana.NewTeam(ctx, \"team\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := grafana.NewUser(ctx, \"user\", \u0026grafana.UserArgs{\n\t\t\tEmail: pulumi.String(\"user.name@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcollection, err := grafana.NewFolder(ctx, \"collection\", \u0026grafana.FolderArgs{\n\t\t\tTitle: pulumi.String(\"Folder Title\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewFolderPermission(ctx, \"collectionPermission\", \u0026grafana.FolderPermissionArgs{\n\t\t\tFolderUid: collection.Uid,\n\t\t\tPermissions: grafana.FolderPermissionPermissionArray{\n\t\t\t\t\u0026grafana.FolderPermissionPermissionArgs{\n\t\t\t\t\tRole:       pulumi.String(\"Editor\"),\n\t\t\t\t\tPermission: pulumi.String(\"Edit\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.FolderPermissionPermissionArgs{\n\t\t\t\t\tTeamId:     team.ID(),\n\t\t\t\t\tPermission: pulumi.String(\"View\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.FolderPermissionPermissionArgs{\n\t\t\t\t\tUserId:     user.ID(),\n\t\t\t\t\tPermission: pulumi.String(\"Admin\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.User;\nimport com.pulumi.grafana.UserArgs;\nimport com.pulumi.grafana.Folder;\nimport com.pulumi.grafana.FolderArgs;\nimport com.pulumi.grafana.FolderPermission;\nimport com.pulumi.grafana.FolderPermissionArgs;\nimport com.pulumi.grafana.inputs.FolderPermissionPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var team = new Team(\"team\");\n\n        var user = new User(\"user\", UserArgs.builder()        \n            .email(\"user.name@example.com\")\n            .build());\n\n        var collection = new Folder(\"collection\", FolderArgs.builder()        \n            .title(\"Folder Title\")\n            .build());\n\n        var collectionPermission = new FolderPermission(\"collectionPermission\", FolderPermissionArgs.builder()        \n            .folderUid(collection.uid())\n            .permissions(            \n                FolderPermissionPermissionArgs.builder()\n                    .role(\"Editor\")\n                    .permission(\"Edit\")\n                    .build(),\n                FolderPermissionPermissionArgs.builder()\n                    .teamId(team.id())\n                    .permission(\"View\")\n                    .build(),\n                FolderPermissionPermissionArgs.builder()\n                    .userId(user.id())\n                    .permission(\"Admin\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  team:\n    type: grafana:Team\n  user:\n    type: grafana:User\n    properties:\n      email: user.name@example.com\n  collection:\n    type: grafana:Folder\n    properties:\n      title: Folder Title\n  collectionPermission:\n    type: grafana:FolderPermission\n    properties:\n      folderUid: ${collection.uid}\n      permissions:\n        - role: Editor\n          permission: Edit\n        - teamId: ${team.id}\n          permission: View\n        - userId: ${user.id}\n          permission: Admin\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/FolderPermissionPermission:FolderPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "required": [
                "folderUid",
                "permissions"
            ],
            "inputProperties": {
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/FolderPermissionPermission:FolderPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "requiredInputs": [
                "folderUid",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FolderPermission resources.\n",
                "properties": {
                    "folderUid": {
                        "type": "string",
                        "description": "The UID of the folder.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/FolderPermissionPermission:FolderPermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/libraryPanel:LibraryPanel": {
            "description": "Manages Grafana library panels.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/panels/panel-library/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/library_element/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.LibraryPanel(\"test\", {modelJson: JSON.stringify({\n    title: \"updated name\",\n    id: 12,\n    version: 35,\n})});\n```\n```python\nimport pulumi\nimport json\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.LibraryPanel(\"test\", model_json=json.dumps({\n    \"title\": \"updated name\",\n    \"id\": 12,\n    \"version\": 35,\n}))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.LibraryPanel(\"test\", new()\n    {\n        ModelJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"title\"] = \"updated name\",\n            [\"id\"] = 12,\n            [\"version\"] = 35,\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"title\":   \"updated name\",\n\t\t\t\"id\":      12,\n\t\t\t\"version\": 35,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = grafana.NewLibraryPanel(ctx, \"test\", \u0026grafana.LibraryPanelArgs{\n\t\t\tModelJson: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.LibraryPanel;\nimport com.pulumi.grafana.LibraryPanelArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new LibraryPanel(\"test\", LibraryPanelArgs.builder()        \n            .modelJson(serializeJson(\n                jsonObject(\n                    jsonProperty(\"title\", \"updated name\"),\n                    jsonProperty(\"id\", 12),\n                    jsonProperty(\"version\", 35)\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:LibraryPanel\n    properties:\n      modelJson:\n        fn::toJSON:\n          title: updated name\n          id: 12\n          version: 35\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/libraryPanel:LibraryPanel panel_name {{library_panel_slug}}\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "Timestamp when the library panel was created.\n"
                },
                "dashboardIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Numerical IDs of Grafana dashboards containing the library panel.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the library panel.\n"
                },
                "folderId": {
                    "type": "integer",
                    "description": "ID of the folder where the library panel is stored.\n"
                },
                "folderName": {
                    "type": "string",
                    "description": "Name of the folder containing the library panel.\n"
                },
                "folderUid": {
                    "type": "string",
                    "description": "Unique ID (UID) of the folder containing the library panel.\n"
                },
                "modelJson": {
                    "type": "string",
                    "description": "The JSON model for the library panel.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the library panel.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "The numeric ID of the library panel computed by Grafana.\n"
                },
                "panelId": {
                    "type": "integer",
                    "description": "The numeric ID of the library panel computed by Grafana.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the library panel (eg. text).\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "Timestamp when the library panel was last modified.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version of the library panel.\n"
                }
            },
            "required": [
                "created",
                "dashboardIds",
                "description",
                "folderName",
                "folderUid",
                "modelJson",
                "name",
                "orgId",
                "panelId",
                "type",
                "uid",
                "updated",
                "version"
            ],
            "inputProperties": {
                "folderId": {
                    "type": "integer",
                    "description": "ID of the folder where the library panel is stored.\n"
                },
                "modelJson": {
                    "type": "string",
                    "description": "The JSON model for the library panel.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the library panel.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.\n"
                }
            },
            "requiredInputs": [
                "modelJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LibraryPanel resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "Timestamp when the library panel was created.\n"
                    },
                    "dashboardIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Numerical IDs of Grafana dashboards containing the library panel.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the library panel.\n"
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "ID of the folder where the library panel is stored.\n"
                    },
                    "folderName": {
                        "type": "string",
                        "description": "Name of the folder containing the library panel.\n"
                    },
                    "folderUid": {
                        "type": "string",
                        "description": "Unique ID (UID) of the folder containing the library panel.\n"
                    },
                    "modelJson": {
                        "type": "string",
                        "description": "The JSON model for the library panel.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the library panel.\n"
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "The numeric ID of the library panel computed by Grafana.\n"
                    },
                    "panelId": {
                        "type": "integer",
                        "description": "The numeric ID of the library panel computed by Grafana.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the library panel (eg. text).\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "Timestamp when the library panel was last modified.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version of the library panel.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/machineLearningJob:MachineLearningJob": {
            "description": "A job defines the queries and model parameters for a machine learning task.\n",
            "properties": {
                "datasourceId": {
                    "type": "integer",
                    "description": "The id of the datasource to query.\n"
                },
                "datasourceType": {
                    "type": "string",
                    "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                },
                "datasourceUid": {
                    "type": "string",
                    "description": "The uid of the datasource to query.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the job.\n"
                },
                "hyperParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on. Defaults to `300`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric used to query the job results.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the job.\n"
                },
                "queryParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the query params to query Grafana with.\n"
                },
                "trainingWindow": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on. Defaults to `7776000`.\n"
                }
            },
            "required": [
                "datasourceType",
                "metric",
                "name",
                "queryParams"
            ],
            "inputProperties": {
                "datasourceId": {
                    "type": "integer",
                    "description": "The id of the datasource to query.\n"
                },
                "datasourceType": {
                    "type": "string",
                    "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                },
                "datasourceUid": {
                    "type": "string",
                    "description": "The uid of the datasource to query.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the job.\n"
                },
                "hyperParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on. Defaults to `300`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric used to query the job results.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the job.\n"
                },
                "queryParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the query params to query Grafana with.\n"
                },
                "trainingWindow": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on. Defaults to `7776000`.\n"
                }
            },
            "requiredInputs": [
                "datasourceType",
                "metric",
                "queryParams"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MachineLearningJob resources.\n",
                "properties": {
                    "datasourceId": {
                        "type": "integer",
                        "description": "The id of the datasource to query.\n"
                    },
                    "datasourceType": {
                        "type": "string",
                        "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                    },
                    "datasourceUid": {
                        "type": "string",
                        "description": "The uid of the datasource to query.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the job.\n"
                    },
                    "hyperParams": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The data interval in seconds to train the data on. Defaults to `300`.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric used to query the job results.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the job.\n"
                    },
                    "queryParams": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "An object representing the query params to query Grafana with.\n"
                    },
                    "trainingWindow": {
                        "type": "integer",
                        "description": "The data interval in seconds to train the data on. Defaults to `7776000`.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/messageTemplate:MessageTemplate": {
            "description": "Manages Grafana Alerting message templates.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/alerting/contact-points/message-templating/)\n* [HTTP API](https://grafana.com/docs/grafana/next/developers/http_api/alerting_provisioning/#templates)\n\nThis resource requires Grafana 9.1.0 or later.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst myTemplate = new grafana.MessageTemplate(\"myTemplate\", {template: `{{define \"My Reusable Template\" }}\n template content\n{{ end }}\n`});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nmy_template = grafana.MessageTemplate(\"myTemplate\", template=\"\"\"{{define \"My Reusable Template\" }}\n template content\n{{ end }}\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTemplate = new Grafana.MessageTemplate(\"myTemplate\", new()\n    {\n        Template = @\"{{define \"\"My Reusable Template\"\" }}\n template content\n{{ end }}\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewMessageTemplate(ctx, \"myTemplate\", \u0026grafana.MessageTemplateArgs{\n\t\t\tTemplate: pulumi.String(fmt.Sprintf(\"{{define \\\"My Reusable Template\\\" }}\\n template content\\n{{ end }}\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.MessageTemplate;\nimport com.pulumi.grafana.MessageTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTemplate = new MessageTemplate(\"myTemplate\", MessageTemplateArgs.builder()        \n            .template(\"\"\"\n{{define \"My Reusable Template\" }}\n template content\n{{ end }}\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTemplate:\n    type: grafana:MessageTemplate\n    properties:\n      template: |\n        {{define \"My Reusable Template\" }}\n         template content\n        {{ end }}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/messageTemplate:MessageTemplate message_template_name {{message_template_name}}\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the message template.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The content of the message template.\n"
                }
            },
            "required": [
                "name",
                "template"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the message template.\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "type": "string",
                    "description": "The content of the message template.\n"
                }
            },
            "requiredInputs": [
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MessageTemplate resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the message template.\n",
                        "willReplaceOnChanges": true
                    },
                    "template": {
                        "type": "string",
                        "description": "The content of the message template.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/muteTiming:MuteTiming": {
            "description": "Manages Grafana Alerting mute timings.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/alerting/notifications/mute-timings/)\n* [HTTP API](https://grafana.com/docs/grafana/next/developers/http_api/alerting_provisioning/#mute-timings)\n\nThis resource requires Grafana 9.1.0 or later.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst myMuteTiming = new grafana.MuteTiming(\"myMuteTiming\", {intervals: [{\n    daysOfMonths: [\n        \"1:7\",\n        \"-1\",\n    ],\n    months: [\n        \"1:3\",\n        \"december\",\n    ],\n    times: [{\n        end: \"14:17\",\n        start: \"04:56\",\n    }],\n    weekdays: [\n        \"monday\",\n        \"tuesday:thursday\",\n    ],\n    years: [\n        \"2030\",\n        \"2025:2026\",\n    ],\n}]});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nmy_mute_timing = grafana.MuteTiming(\"myMuteTiming\", intervals=[grafana.MuteTimingIntervalArgs(\n    days_of_months=[\n        \"1:7\",\n        \"-1\",\n    ],\n    months=[\n        \"1:3\",\n        \"december\",\n    ],\n    times=[grafana.MuteTimingIntervalTimeArgs(\n        end=\"14:17\",\n        start=\"04:56\",\n    )],\n    weekdays=[\n        \"monday\",\n        \"tuesday:thursday\",\n    ],\n    years=[\n        \"2030\",\n        \"2025:2026\",\n    ],\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myMuteTiming = new Grafana.MuteTiming(\"myMuteTiming\", new()\n    {\n        Intervals = new[]\n        {\n            new Grafana.Inputs.MuteTimingIntervalArgs\n            {\n                DaysOfMonths = new[]\n                {\n                    \"1:7\",\n                    \"-1\",\n                },\n                Months = new[]\n                {\n                    \"1:3\",\n                    \"december\",\n                },\n                Times = new[]\n                {\n                    new Grafana.Inputs.MuteTimingIntervalTimeArgs\n                    {\n                        End = \"14:17\",\n                        Start = \"04:56\",\n                    },\n                },\n                Weekdays = new[]\n                {\n                    \"monday\",\n                    \"tuesday:thursday\",\n                },\n                Years = new[]\n                {\n                    \"2030\",\n                    \"2025:2026\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewMuteTiming(ctx, \"myMuteTiming\", \u0026grafana.MuteTimingArgs{\n\t\t\tIntervals: grafana.MuteTimingIntervalArray{\n\t\t\t\t\u0026grafana.MuteTimingIntervalArgs{\n\t\t\t\t\tDaysOfMonths: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"1:7\"),\n\t\t\t\t\t\tpulumi.String(\"-1\"),\n\t\t\t\t\t},\n\t\t\t\t\tMonths: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"1:3\"),\n\t\t\t\t\t\tpulumi.String(\"december\"),\n\t\t\t\t\t},\n\t\t\t\t\tTimes: grafana.MuteTimingIntervalTimeArray{\n\t\t\t\t\t\t\u0026grafana.MuteTimingIntervalTimeArgs{\n\t\t\t\t\t\t\tEnd:   pulumi.String(\"14:17\"),\n\t\t\t\t\t\t\tStart: pulumi.String(\"04:56\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tWeekdays: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"monday\"),\n\t\t\t\t\t\tpulumi.String(\"tuesday:thursday\"),\n\t\t\t\t\t},\n\t\t\t\t\tYears: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"2030\"),\n\t\t\t\t\t\tpulumi.String(\"2025:2026\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.MuteTiming;\nimport com.pulumi.grafana.MuteTimingArgs;\nimport com.pulumi.grafana.inputs.MuteTimingIntervalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myMuteTiming = new MuteTiming(\"myMuteTiming\", MuteTimingArgs.builder()        \n            .intervals(MuteTimingIntervalArgs.builder()\n                .daysOfMonths(                \n                    \"1:7\",\n                    \"-1\")\n                .months(                \n                    \"1:3\",\n                    \"december\")\n                .times(MuteTimingIntervalTimeArgs.builder()\n                    .end(\"14:17\")\n                    .start(\"04:56\")\n                    .build())\n                .weekdays(                \n                    \"monday\",\n                    \"tuesday:thursday\")\n                .years(                \n                    \"2030\",\n                    \"2025:2026\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myMuteTiming:\n    type: grafana:MuteTiming\n    properties:\n      intervals:\n        - daysOfMonths:\n            - 1:7\n            - '-1'\n          months:\n            - 1:3\n            - december\n          times:\n            - end: 14:17\n              start: 04:56\n          weekdays:\n            - monday\n            - tuesday:thursday\n          years:\n            - '2030'\n            - 2025:2026\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/muteTiming:MuteTiming mute_timing_name {{mute_timing_name}}\n```\n\n ",
            "properties": {
                "intervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MuteTimingInterval:MuteTimingInterval"
                    },
                    "description": "The time intervals at which to mute notifications.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the mute timing.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "intervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MuteTimingInterval:MuteTimingInterval"
                    },
                    "description": "The time intervals at which to mute notifications.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the mute timing.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MuteTiming resources.\n",
                "properties": {
                    "intervals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/MuteTimingInterval:MuteTimingInterval"
                        },
                        "description": "The time intervals at which to mute notifications.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the mute timing.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/notificationPolicy:NotificationPolicy": {
            "description": "Sets the global notification policy for Grafana. Note that this resource manages the entire notification policy tree, and will overwrite any existing policies.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/alerting/notifications/)\n* [HTTP API](https://grafana.com/docs/grafana/next/developers/http_api/alerting_provisioning/#notification-policies)\n\nThis resource requires Grafana 9.1.0 or later.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst aContactPoint = new grafana.ContactPoint(\"aContactPoint\", {emails: [{\n    addresses: [\n        \"one@company.org\",\n        \"two@company.org\",\n    ],\n    message: \"{{ len .Alerts.Firing }} firing.\",\n}]});\nconst aMuteTiming = new grafana.MuteTiming(\"aMuteTiming\", {intervals: [{\n    weekdays: [\"monday\"],\n}]});\nconst myNotificationPolicy = new grafana.NotificationPolicy(\"myNotificationPolicy\", {\n    groupBies: [\"...\"],\n    contactPoint: aContactPoint.name,\n    groupWait: \"45s\",\n    groupInterval: \"6m\",\n    repeatInterval: \"3h\",\n    policies: [\n        {\n            matchers: [{\n                label: \"mylabel\",\n                match: \"=\",\n                value: \"myvalue\",\n            }],\n            contactPoint: aContactPoint.name,\n            groupBies: [\"alertname\"],\n            \"continue\": true,\n            muteTimings: [aMuteTiming.name],\n            groupWait: \"45s\",\n            groupInterval: \"6m\",\n            repeatInterval: \"3h\",\n            policies: [{\n                matchers: [{\n                    label: \"sublabel\",\n                    match: \"=\",\n                    value: \"subvalue\",\n                }],\n                contactPoint: aContactPoint.name,\n                groupBies: [\"...\"],\n            }],\n        },\n        {\n            matchers: [{\n                label: \"anotherlabel\",\n                match: \"=~\",\n                value: \"another value.*\",\n            }],\n            contactPoint: aContactPoint.name,\n            groupBies: [\"...\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\na_contact_point = grafana.ContactPoint(\"aContactPoint\", emails=[grafana.ContactPointEmailArgs(\n    addresses=[\n        \"one@company.org\",\n        \"two@company.org\",\n    ],\n    message=\"{{ len .Alerts.Firing }} firing.\",\n)])\na_mute_timing = grafana.MuteTiming(\"aMuteTiming\", intervals=[grafana.MuteTimingIntervalArgs(\n    weekdays=[\"monday\"],\n)])\nmy_notification_policy = grafana.NotificationPolicy(\"myNotificationPolicy\",\n    group_bies=[\"...\"],\n    contact_point=a_contact_point.name,\n    group_wait=\"45s\",\n    group_interval=\"6m\",\n    repeat_interval=\"3h\",\n    policies=[\n        grafana.NotificationPolicyPolicyArgs(\n            matchers=[grafana.NotificationPolicyPolicyMatcherArgs(\n                label=\"mylabel\",\n                match=\"=\",\n                value=\"myvalue\",\n            )],\n            contact_point=a_contact_point.name,\n            group_bies=[\"alertname\"],\n            continue_=True,\n            mute_timings=[a_mute_timing.name],\n            group_wait=\"45s\",\n            group_interval=\"6m\",\n            repeat_interval=\"3h\",\n            policies=[grafana.NotificationPolicyPolicyPolicyArgs(\n                matchers=[grafana.NotificationPolicyPolicyPolicyMatcherArgs(\n                    label=\"sublabel\",\n                    match=\"=\",\n                    value=\"subvalue\",\n                )],\n                contact_point=a_contact_point.name,\n                group_bies=[\"...\"],\n            )],\n        ),\n        grafana.NotificationPolicyPolicyArgs(\n            matchers=[grafana.NotificationPolicyPolicyMatcherArgs(\n                label=\"anotherlabel\",\n                match=\"=~\",\n                value=\"another value.*\",\n            )],\n            contact_point=a_contact_point.name,\n            group_bies=[\"...\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aContactPoint = new Grafana.ContactPoint(\"aContactPoint\", new()\n    {\n        Emails = new[]\n        {\n            new Grafana.Inputs.ContactPointEmailArgs\n            {\n                Addresses = new[]\n                {\n                    \"one@company.org\",\n                    \"two@company.org\",\n                },\n                Message = \"{{ len .Alerts.Firing }} firing.\",\n            },\n        },\n    });\n\n    var aMuteTiming = new Grafana.MuteTiming(\"aMuteTiming\", new()\n    {\n        Intervals = new[]\n        {\n            new Grafana.Inputs.MuteTimingIntervalArgs\n            {\n                Weekdays = new[]\n                {\n                    \"monday\",\n                },\n            },\n        },\n    });\n\n    var myNotificationPolicy = new Grafana.NotificationPolicy(\"myNotificationPolicy\", new()\n    {\n        GroupBies = new[]\n        {\n            \"...\",\n        },\n        ContactPoint = aContactPoint.Name,\n        GroupWait = \"45s\",\n        GroupInterval = \"6m\",\n        RepeatInterval = \"3h\",\n        Policies = new[]\n        {\n            new Grafana.Inputs.NotificationPolicyPolicyArgs\n            {\n                Matchers = new[]\n                {\n                    new Grafana.Inputs.NotificationPolicyPolicyMatcherArgs\n                    {\n                        Label = \"mylabel\",\n                        Match = \"=\",\n                        Value = \"myvalue\",\n                    },\n                },\n                ContactPoint = aContactPoint.Name,\n                GroupBies = new[]\n                {\n                    \"alertname\",\n                },\n                Continue = true,\n                MuteTimings = new[]\n                {\n                    aMuteTiming.Name,\n                },\n                GroupWait = \"45s\",\n                GroupInterval = \"6m\",\n                RepeatInterval = \"3h\",\n                Policies = new[]\n                {\n                    new Grafana.Inputs.NotificationPolicyPolicyPolicyArgs\n                    {\n                        Matchers = new[]\n                        {\n                            new Grafana.Inputs.NotificationPolicyPolicyPolicyMatcherArgs\n                            {\n                                Label = \"sublabel\",\n                                Match = \"=\",\n                                Value = \"subvalue\",\n                            },\n                        },\n                        ContactPoint = aContactPoint.Name,\n                        GroupBies = new[]\n                        {\n                            \"...\",\n                        },\n                    },\n                },\n            },\n            new Grafana.Inputs.NotificationPolicyPolicyArgs\n            {\n                Matchers = new[]\n                {\n                    new Grafana.Inputs.NotificationPolicyPolicyMatcherArgs\n                    {\n                        Label = \"anotherlabel\",\n                        Match = \"=~\",\n                        Value = \"another value.*\",\n                    },\n                },\n                ContactPoint = aContactPoint.Name,\n                GroupBies = new[]\n                {\n                    \"...\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taContactPoint, err := grafana.NewContactPoint(ctx, \"aContactPoint\", \u0026grafana.ContactPointArgs{\n\t\t\tEmails: grafana.ContactPointEmailArray{\n\t\t\t\t\u0026grafana.ContactPointEmailArgs{\n\t\t\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"one@company.org\"),\n\t\t\t\t\t\tpulumi.String(\"two@company.org\"),\n\t\t\t\t\t},\n\t\t\t\t\tMessage: pulumi.String(\"{{ len .Alerts.Firing }} firing.\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\taMuteTiming, err := grafana.NewMuteTiming(ctx, \"aMuteTiming\", \u0026grafana.MuteTimingArgs{\n\t\t\tIntervals: grafana.MuteTimingIntervalArray{\n\t\t\t\t\u0026grafana.MuteTimingIntervalArgs{\n\t\t\t\t\tWeekdays: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"monday\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewNotificationPolicy(ctx, \"myNotificationPolicy\", \u0026grafana.NotificationPolicyArgs{\n\t\t\tGroupBies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"...\"),\n\t\t\t},\n\t\t\tContactPoint:   aContactPoint.Name,\n\t\t\tGroupWait:      pulumi.String(\"45s\"),\n\t\t\tGroupInterval:  pulumi.String(\"6m\"),\n\t\t\tRepeatInterval: pulumi.String(\"3h\"),\n\t\t\tPolicies: grafana.NotificationPolicyPolicyArray{\n\t\t\t\t\u0026grafana.NotificationPolicyPolicyArgs{\n\t\t\t\t\tMatchers: grafana.NotificationPolicyPolicyMatcherArray{\n\t\t\t\t\t\t\u0026grafana.NotificationPolicyPolicyMatcherArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"mylabel\"),\n\t\t\t\t\t\t\tMatch: pulumi.String(\"=\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"myvalue\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tContactPoint: aContactPoint.Name,\n\t\t\t\t\tGroupBies: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"alertname\"),\n\t\t\t\t\t},\n\t\t\t\t\tContinue: pulumi.Bool(true),\n\t\t\t\t\tMuteTimings: pulumi.StringArray{\n\t\t\t\t\t\taMuteTiming.Name,\n\t\t\t\t\t},\n\t\t\t\t\tGroupWait:      pulumi.String(\"45s\"),\n\t\t\t\t\tGroupInterval:  pulumi.String(\"6m\"),\n\t\t\t\t\tRepeatInterval: pulumi.String(\"3h\"),\n\t\t\t\t\tPolicies: grafana.NotificationPolicyPolicyPolicyArray{\n\t\t\t\t\t\t\u0026grafana.NotificationPolicyPolicyPolicyArgs{\n\t\t\t\t\t\t\tMatchers: grafana.NotificationPolicyPolicyPolicyMatcherArray{\n\t\t\t\t\t\t\t\t\u0026grafana.NotificationPolicyPolicyPolicyMatcherArgs{\n\t\t\t\t\t\t\t\t\tLabel: pulumi.String(\"sublabel\"),\n\t\t\t\t\t\t\t\t\tMatch: pulumi.String(\"=\"),\n\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"subvalue\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tContactPoint: aContactPoint.Name,\n\t\t\t\t\t\t\tGroupBies: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"...\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026grafana.NotificationPolicyPolicyArgs{\n\t\t\t\t\tMatchers: grafana.NotificationPolicyPolicyMatcherArray{\n\t\t\t\t\t\t\u0026grafana.NotificationPolicyPolicyMatcherArgs{\n\t\t\t\t\t\t\tLabel: pulumi.String(\"anotherlabel\"),\n\t\t\t\t\t\t\tMatch: pulumi.String(\"=~\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"another value.*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tContactPoint: aContactPoint.Name,\n\t\t\t\t\tGroupBies: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"...\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.ContactPoint;\nimport com.pulumi.grafana.ContactPointArgs;\nimport com.pulumi.grafana.inputs.ContactPointEmailArgs;\nimport com.pulumi.grafana.MuteTiming;\nimport com.pulumi.grafana.MuteTimingArgs;\nimport com.pulumi.grafana.inputs.MuteTimingIntervalArgs;\nimport com.pulumi.grafana.NotificationPolicy;\nimport com.pulumi.grafana.NotificationPolicyArgs;\nimport com.pulumi.grafana.inputs.NotificationPolicyPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aContactPoint = new ContactPoint(\"aContactPoint\", ContactPointArgs.builder()        \n            .emails(ContactPointEmailArgs.builder()\n                .addresses(                \n                    \"one@company.org\",\n                    \"two@company.org\")\n                .message(\"{{ len .Alerts.Firing }} firing.\")\n                .build())\n            .build());\n\n        var aMuteTiming = new MuteTiming(\"aMuteTiming\", MuteTimingArgs.builder()        \n            .intervals(MuteTimingIntervalArgs.builder()\n                .weekdays(\"monday\")\n                .build())\n            .build());\n\n        var myNotificationPolicy = new NotificationPolicy(\"myNotificationPolicy\", NotificationPolicyArgs.builder()        \n            .groupBies(\"...\")\n            .contactPoint(aContactPoint.name())\n            .groupWait(\"45s\")\n            .groupInterval(\"6m\")\n            .repeatInterval(\"3h\")\n            .policies(            \n                NotificationPolicyPolicyArgs.builder()\n                    .matchers(NotificationPolicyPolicyMatcherArgs.builder()\n                        .label(\"mylabel\")\n                        .match(\"=\")\n                        .value(\"myvalue\")\n                        .build())\n                    .contactPoint(aContactPoint.name())\n                    .groupBies(\"alertname\")\n                    .continue_(true)\n                    .muteTimings(aMuteTiming.name())\n                    .groupWait(\"45s\")\n                    .groupInterval(\"6m\")\n                    .repeatInterval(\"3h\")\n                    .policies(NotificationPolicyPolicyPolicyArgs.builder()\n                        .matchers(NotificationPolicyPolicyPolicyMatcherArgs.builder()\n                            .label(\"sublabel\")\n                            .match(\"=\")\n                            .value(\"subvalue\")\n                            .build())\n                        .contactPoint(aContactPoint.name())\n                        .groupBies(\"...\")\n                        .build())\n                    .build(),\n                NotificationPolicyPolicyArgs.builder()\n                    .matchers(NotificationPolicyPolicyMatcherArgs.builder()\n                        .label(\"anotherlabel\")\n                        .match(\"=~\")\n                        .value(\"another value.*\")\n                        .build())\n                    .contactPoint(aContactPoint.name())\n                    .groupBies(\"...\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aContactPoint:\n    type: grafana:ContactPoint\n    properties:\n      emails:\n        - addresses:\n            - one@company.org\n            - two@company.org\n          message: '{{ len .Alerts.Firing }} firing.'\n  aMuteTiming:\n    type: grafana:MuteTiming\n    properties:\n      intervals:\n        - weekdays:\n            - monday\n  myNotificationPolicy:\n    type: grafana:NotificationPolicy\n    properties:\n      groupBies:\n        - '...'\n      contactPoint: ${aContactPoint.name}\n      groupWait: 45s\n      groupInterval: 6m\n      repeatInterval: 3h\n      policies:\n        - matchers:\n            - label: mylabel\n              match: =\n              value: myvalue\n          contactPoint: ${aContactPoint.name}\n          groupBies:\n            - alertname\n          continue: true\n          muteTimings:\n            - ${aMuteTiming.name}\n          groupWait: 45s\n          groupInterval: 6m\n          repeatInterval: 3h\n          policies:\n            - matchers:\n                - label: sublabel\n                  match: =\n                  value: subvalue\n              contactPoint: ${aContactPoint.name}\n              groupBies:\n                - '...'\n        - matchers:\n            - label: anotherlabel\n              match: =~\n              value: another value.*\n          contactPoint: ${aContactPoint.name}\n          groupBies:\n            - '...'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe policy is a singleton, so the ID is a constant \"policy\" value.\n\n```sh\n $ pulumi import grafana:index/notificationPolicy:NotificationPolicy notification_policy_name \"policy\"\n```\n\n ",
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The default contact point to route all unmatched notifications to.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "required": [
                "contactPoint",
                "groupBies"
            ],
            "inputProperties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The default contact point to route all unmatched notifications to.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "requiredInputs": [
                "contactPoint",
                "groupBies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPolicy resources.\n",
                "properties": {
                    "contactPoint": {
                        "type": "string",
                        "description": "The default contact point to route all unmatched notifications to.\n"
                    },
                    "groupBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.\n"
                    },
                    "groupInterval": {
                        "type": "string",
                        "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                    },
                    "groupWait": {
                        "type": "string",
                        "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy"
                        },
                        "description": "Routing rules for specific label sets.\n"
                    },
                    "repeatInterval": {
                        "type": "string",
                        "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallEscalation:OncallEscalation": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana-cloud/oncall/escalation-policies/)\n* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/escalation_policies/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst _default = new grafana.OncallEscalationChain(\"default\", {}, {\n    provider: grafana.oncall,\n});\nconst alex = grafana.getOncallUser({\n    username: \"alex\",\n});\n// Notify step\nconst exampleNotifyStepOncallEscalation = new grafana.OncallEscalation(\"exampleNotifyStepOncallEscalation\", {\n    escalationChainId: _default.id,\n    type: \"notify_persons\",\n    personsToNotifies: [alex.then(alex =\u003e alex.id)],\n    position: 0,\n});\n// Wait step\nconst exampleNotifyStepIndex_oncallEscalationOncallEscalation = new grafana.OncallEscalation(\"exampleNotifyStepIndex/oncallEscalationOncallEscalation\", {\n    escalationChainId: _default.id,\n    type: \"wait\",\n    duration: 300,\n    position: 1,\n});\n// Important step\nconst exampleNotifyStepGrafanaIndex_oncallEscalationOncallEscalation = new grafana.OncallEscalation(\"exampleNotifyStepGrafanaIndex/oncallEscalationOncallEscalation\", {\n    escalationChainId: _default.id,\n    type: \"notify_persons\",\n    important: true,\n    personsToNotifies: [alex.then(alex =\u003e alex.id)],\n    position: 0,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ndefault = grafana.OncallEscalationChain(\"default\", opts=pulumi.ResourceOptions(provider=grafana[\"oncall\"]))\nalex = grafana.get_oncall_user(username=\"alex\")\n# Notify step\nexample_notify_step_oncall_escalation = grafana.OncallEscalation(\"exampleNotifyStepOncallEscalation\",\n    escalation_chain_id=default.id,\n    type=\"notify_persons\",\n    persons_to_notifies=[alex.id],\n    position=0)\n# Wait step\nexample_notify_step_index_oncall_escalation_oncall_escalation = grafana.OncallEscalation(\"exampleNotifyStepIndex/oncallEscalationOncallEscalation\",\n    escalation_chain_id=default.id,\n    type=\"wait\",\n    duration=300,\n    position=1)\n# Important step\nexample_notify_step_grafana_index_oncall_escalation_oncall_escalation = grafana.OncallEscalation(\"exampleNotifyStepGrafanaIndex/oncallEscalationOncallEscalation\",\n    escalation_chain_id=default.id,\n    type=\"notify_persons\",\n    important=True,\n    persons_to_notifies=[alex.id],\n    position=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Grafana.OncallEscalationChain(\"default\", new()\n    {\n    }, new CustomResourceOptions\n    {\n        Provider = grafana.Oncall,\n    });\n\n    var alex = Grafana.GetOncallUser.Invoke(new()\n    {\n        Username = \"alex\",\n    });\n\n    // Notify step\n    var exampleNotifyStepOncallEscalation = new Grafana.OncallEscalation(\"exampleNotifyStepOncallEscalation\", new()\n    {\n        EscalationChainId = @default.Id,\n        Type = \"notify_persons\",\n        PersonsToNotifies = new[]\n        {\n            alex.Apply(getOncallUserResult =\u003e getOncallUserResult.Id),\n        },\n        Position = 0,\n    });\n\n    // Wait step\n    var exampleNotifyStepIndex_oncallEscalationOncallEscalation = new Grafana.OncallEscalation(\"exampleNotifyStepIndex/oncallEscalationOncallEscalation\", new()\n    {\n        EscalationChainId = @default.Id,\n        Type = \"wait\",\n        Duration = 300,\n        Position = 1,\n    });\n\n    // Important step\n    var exampleNotifyStepGrafanaIndex_oncallEscalationOncallEscalation = new Grafana.OncallEscalation(\"exampleNotifyStepGrafanaIndex/oncallEscalationOncallEscalation\", new()\n    {\n        EscalationChainId = @default.Id,\n        Type = \"notify_persons\",\n        Important = true,\n        PersonsToNotifies = new[]\n        {\n            alex.Apply(getOncallUserResult =\u003e getOncallUserResult.Id),\n        },\n        Position = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewOncallEscalationChain(ctx, \"default\", nil, pulumi.Provider(grafana.Oncall))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\talex, err := grafana.GetOncallUser(ctx, \u0026grafana.GetOncallUserArgs{\n\t\t\tUsername: \"alex\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewOncallEscalation(ctx, \"exampleNotifyStepOncallEscalation\", \u0026grafana.OncallEscalationArgs{\n\t\t\tEscalationChainId: _default.ID(),\n\t\t\tType:              pulumi.String(\"notify_persons\"),\n\t\t\tPersonsToNotifies: pulumi.StringArray{\n\t\t\t\t*pulumi.String(alex.Id),\n\t\t\t},\n\t\t\tPosition: pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewOncallEscalation(ctx, \"exampleNotifyStepIndex/oncallEscalationOncallEscalation\", \u0026grafana.OncallEscalationArgs{\n\t\t\tEscalationChainId: _default.ID(),\n\t\t\tType:              pulumi.String(\"wait\"),\n\t\t\tDuration:          pulumi.Int(300),\n\t\t\tPosition:          pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewOncallEscalation(ctx, \"exampleNotifyStepGrafanaIndex/oncallEscalationOncallEscalation\", \u0026grafana.OncallEscalationArgs{\n\t\t\tEscalationChainId: _default.ID(),\n\t\t\tType:              pulumi.String(\"notify_persons\"),\n\t\t\tImportant:         pulumi.Bool(true),\n\t\t\tPersonsToNotifies: pulumi.StringArray{\n\t\t\t\t*pulumi.String(alex.Id),\n\t\t\t},\n\t\t\tPosition: pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.OncallEscalationChain;\nimport com.pulumi.grafana.OncallEscalationChainArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOncallUserArgs;\nimport com.pulumi.grafana.OncallEscalation;\nimport com.pulumi.grafana.OncallEscalationArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OncallEscalationChain(\"default\", OncallEscalationChainArgs.Empty, CustomResourceOptions.builder()\n            .provider(grafana.oncall())\n            .build());\n\n        final var alex = GrafanaFunctions.getOncallUser(GetOncallUserArgs.builder()\n            .username(\"alex\")\n            .build());\n\n        var exampleNotifyStepOncallEscalation = new OncallEscalation(\"exampleNotifyStepOncallEscalation\", OncallEscalationArgs.builder()        \n            .escalationChainId(default_.id())\n            .type(\"notify_persons\")\n            .personsToNotifies(alex.applyValue(getOncallUserResult -\u003e getOncallUserResult.id()))\n            .position(0)\n            .build());\n\n        var exampleNotifyStepIndex_oncallEscalationOncallEscalation = new OncallEscalation(\"exampleNotifyStepIndex/oncallEscalationOncallEscalation\", OncallEscalationArgs.builder()        \n            .escalationChainId(default_.id())\n            .type(\"wait\")\n            .duration(300)\n            .position(1)\n            .build());\n\n        var exampleNotifyStepGrafanaIndex_oncallEscalationOncallEscalation = new OncallEscalation(\"exampleNotifyStepGrafanaIndex/oncallEscalationOncallEscalation\", OncallEscalationArgs.builder()        \n            .escalationChainId(default_.id())\n            .type(\"notify_persons\")\n            .important(true)\n            .personsToNotifies(alex.applyValue(getOncallUserResult -\u003e getOncallUserResult.id()))\n            .position(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: grafana:OncallEscalationChain\n    options:\n      provider: ${grafana.oncall}\n  # Notify step\n  exampleNotifyStepOncallEscalation:\n    type: grafana:OncallEscalation\n    properties:\n      escalationChainId: ${default.id}\n      type: notify_persons\n      personsToNotifies:\n        - ${alex.id}\n      position: 0\n  # Wait step\n  exampleNotifyStepIndex/oncallEscalationOncallEscalation:\n    type: grafana:OncallEscalation\n    properties:\n      escalationChainId: ${default.id}\n      type: wait\n      duration: 300\n      position: 1\n  # Important step\n  exampleNotifyStepGrafanaIndex/oncallEscalationOncallEscalation:\n    type: grafana:OncallEscalation\n    properties:\n      escalationChainId: ${default.id}\n      type: notify_persons\n      important: true\n      personsToNotifies:\n        - ${alex.id}\n      position: 0\nvariables:\n  alex:\n    fn::invoke:\n      Function: grafana:getOncallUser\n      Arguments:\n        username: alex\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/oncallEscalation:OncallEscalation escalation_name {{escalation_id}}\n```\n\n ",
            "properties": {
                "actionToTrigger": {
                    "type": "string",
                    "description": "The ID of an Action for trigger_action type step.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of delay for wait type step.\n"
                },
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n"
                },
                "groupToNotify": {
                    "type": "string",
                    "description": "The ID of a User Group for notify*user*group type step.\n"
                },
                "important": {
                    "type": "boolean",
                    "description": "Will activate \"important\" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group\n"
                },
                "notifyIfTimeFrom": {
                    "type": "string",
                    "description": "The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).\n"
                },
                "notifyIfTimeTo": {
                    "type": "string",
                    "description": "The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).\n"
                },
                "notifyOnCallFromSchedule": {
                    "type": "string",
                    "description": "ID of a Schedule for notify*on*call*from*schedule type step.\n"
                },
                "personsToNotifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify_persons type step.\n"
                },
                "personsToNotifyNextEachTimes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify*person*next*each*time type step.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the escalation step (starts from 0).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation\n"
                }
            },
            "required": [
                "escalationChainId",
                "position"
            ],
            "inputProperties": {
                "actionToTrigger": {
                    "type": "string",
                    "description": "The ID of an Action for trigger_action type step.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of delay for wait type step.\n"
                },
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n",
                    "willReplaceOnChanges": true
                },
                "groupToNotify": {
                    "type": "string",
                    "description": "The ID of a User Group for notify*user*group type step.\n"
                },
                "important": {
                    "type": "boolean",
                    "description": "Will activate \"important\" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group\n"
                },
                "notifyIfTimeFrom": {
                    "type": "string",
                    "description": "The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).\n"
                },
                "notifyIfTimeTo": {
                    "type": "string",
                    "description": "The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).\n"
                },
                "notifyOnCallFromSchedule": {
                    "type": "string",
                    "description": "ID of a Schedule for notify*on*call*from*schedule type step.\n"
                },
                "personsToNotifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify_persons type step.\n"
                },
                "personsToNotifyNextEachTimes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify*person*next*each*time type step.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the escalation step (starts from 0).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation\n"
                }
            },
            "requiredInputs": [
                "escalationChainId",
                "position"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallEscalation resources.\n",
                "properties": {
                    "actionToTrigger": {
                        "type": "string",
                        "description": "The ID of an Action for trigger_action type step.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration of delay for wait type step.\n"
                    },
                    "escalationChainId": {
                        "type": "string",
                        "description": "The ID of the escalation chain.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupToNotify": {
                        "type": "string",
                        "description": "The ID of a User Group for notify*user*group type step.\n"
                    },
                    "important": {
                        "type": "boolean",
                        "description": "Will activate \"important\" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group\n"
                    },
                    "notifyIfTimeFrom": {
                        "type": "string",
                        "description": "The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).\n"
                    },
                    "notifyIfTimeTo": {
                        "type": "string",
                        "description": "The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).\n"
                    },
                    "notifyOnCallFromSchedule": {
                        "type": "string",
                        "description": "ID of a Schedule for notify*on*call*from*schedule type step.\n"
                    },
                    "personsToNotifies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ID's of users for notify_persons type step.\n"
                    },
                    "personsToNotifyNextEachTimes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ID's of users for notify*person*next*each*time type step.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the escalation step (starts from 0).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallEscalationChain:OncallEscalationChain": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/escalation_chains/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst _default = new grafana.OncallEscalationChain(\"default\", {}, {\n    provider: grafana.oncall,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ndefault = grafana.OncallEscalationChain(\"default\", opts=pulumi.ResourceOptions(provider=grafana[\"oncall\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Grafana.OncallEscalationChain(\"default\", new()\n    {\n    }, new CustomResourceOptions\n    {\n        Provider = grafana.Oncall,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewOncallEscalationChain(ctx, \"default\", nil, pulumi.Provider(grafana.Oncall))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.OncallEscalationChain;\nimport com.pulumi.grafana.OncallEscalationChainArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OncallEscalationChain(\"default\", OncallEscalationChainArgs.Empty, CustomResourceOptions.builder()\n            .provider(grafana.oncall())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: grafana:OncallEscalationChain\n    options:\n      provider: ${grafana.oncall}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/oncallEscalationChain:OncallEscalationChain escalation_chain_name {{escalation_chain_id}}\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the escalation chain.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the escalation chain.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallEscalationChain resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the escalation chain.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallIntegration:OncallIntegration": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana-cloud/oncall/integrations/)\n* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test_acc_integration = new grafana.OncallIntegration(\"test-acc-integration\", {\n    type: \"grafana\",\n    defaultRoute: {},\n}, {\n    provider: grafana.oncall,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest_acc_integration = grafana.OncallIntegration(\"test-acc-integration\",\n    type=\"grafana\",\n    default_route=grafana.OncallIntegrationDefaultRouteArgs(),\n    opts=pulumi.ResourceOptions(provider=grafana[\"oncall\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_acc_integration = new Grafana.OncallIntegration(\"test-acc-integration\", new()\n    {\n        Type = \"grafana\",\n        DefaultRoute = null,\n    }, new CustomResourceOptions\n    {\n        Provider = grafana.Oncall,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewOncallIntegration(ctx, \"test-acc-integration\", \u0026grafana.OncallIntegrationArgs{\n\t\t\tType:         pulumi.String(\"grafana\"),\n\t\t\tDefaultRoute: nil,\n\t\t}, pulumi.Provider(grafana.Oncall))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.OncallIntegration;\nimport com.pulumi.grafana.OncallIntegrationArgs;\nimport com.pulumi.grafana.inputs.OncallIntegrationDefaultRouteArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_acc_integration = new OncallIntegration(\"test-acc-integration\", OncallIntegrationArgs.builder()        \n            .type(\"grafana\")\n            .defaultRoute()\n            .build(), CustomResourceOptions.builder()\n                .provider(grafana.oncall())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-acc-integration:\n    type: grafana:OncallIntegration\n    properties:\n      type: grafana\n      defaultRoute: {}\n    options:\n      provider: ${grafana.oncall}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/oncallIntegration:OncallIntegration integration_name {{integration_id}}\n```\n\n ",
            "properties": {
                "defaultRoute": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute",
                    "description": "The Default route for all alerts from the given integration\n"
                },
                "link": {
                    "type": "string",
                    "description": "The link for using in an integrated tool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "templates": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates",
                    "description": "Jinja2 templates for Alert payload.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email.\n"
                }
            },
            "required": [
                "defaultRoute",
                "link",
                "name",
                "type"
            ],
            "inputProperties": {
                "defaultRoute": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute",
                    "description": "The Default route for all alerts from the given integration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "templates": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates",
                    "description": "Jinja2 templates for Alert payload.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "defaultRoute",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallIntegration resources.\n",
                "properties": {
                    "defaultRoute": {
                        "$ref": "#/types/grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute",
                        "description": "The Default route for all alerts from the given integration\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The link for using in an integrated tool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service integration.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "templates": {
                        "$ref": "#/types/grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates",
                        "description": "Jinja2 templates for Alert payload.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallOnCallShift:OncallOnCallShift": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/on_call_shifts/)\n\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/oncallOnCallShift:OncallOnCallShift on_call_shift_name {{on_call_shift_id}}\n```\n\n ",
            "properties": {
                "byDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                },
                "byMonthdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1\n"
                },
                "byMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of months. Valid values are 1 to 12\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the event.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency of the event. Can be daily, weekly, monthly\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The positive integer representing at which intervals the recurrence rule repeats.\n"
                },
                "level": {
                    "type": "integer",
                    "description": "The priority level. The higher the value, the higher the priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The shift's name.\n"
                },
                "rollingUsers": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The list of lists with on-call users (for rolling_users event type)\n"
                },
                "start": {
                    "type": "string",
                    "description": "The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example \"2020-09-05T08:00:00\")\n"
                },
                "startRotationFromUserIndex": {
                    "type": "integer",
                    "description": "The index of the list of users in rolling_users, from which on-call rotation starts.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The shift's timezone.  Overrides schedule's timezone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The shift's type. Can be rolling*users, recurrent*event, single_event\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of on-call users (for single*event and recurrent*event event type).\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                }
            },
            "required": [
                "duration",
                "name",
                "start",
                "type"
            ],
            "inputProperties": {
                "byDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                },
                "byMonthdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1\n"
                },
                "byMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of months. Valid values are 1 to 12\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the event.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency of the event. Can be daily, weekly, monthly\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The positive integer representing at which intervals the recurrence rule repeats.\n"
                },
                "level": {
                    "type": "integer",
                    "description": "The priority level. The higher the value, the higher the priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The shift's name.\n"
                },
                "rollingUsers": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The list of lists with on-call users (for rolling_users event type)\n"
                },
                "start": {
                    "type": "string",
                    "description": "The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example \"2020-09-05T08:00:00\")\n"
                },
                "startRotationFromUserIndex": {
                    "type": "integer",
                    "description": "The index of the list of users in rolling_users, from which on-call rotation starts.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The shift's timezone.  Overrides schedule's timezone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The shift's type. Can be rolling*users, recurrent*event, single_event\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of on-call users (for single*event and recurrent*event event type).\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                }
            },
            "requiredInputs": [
                "duration",
                "start",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallOnCallShift resources.\n",
                "properties": {
                    "byDays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                    },
                    "byMonthdays": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1\n"
                    },
                    "byMonths": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "This parameter takes a list of months. Valid values are 1 to 12\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration of the event.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency of the event. Can be daily, weekly, monthly\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The positive integer representing at which intervals the recurrence rule repeats.\n"
                    },
                    "level": {
                        "type": "integer",
                        "description": "The priority level. The higher the value, the higher the priority.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The shift's name.\n"
                    },
                    "rollingUsers": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The list of lists with on-call users (for rolling_users event type)\n"
                    },
                    "start": {
                        "type": "string",
                        "description": "The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example \"2020-09-05T08:00:00\")\n"
                    },
                    "startRotationFromUserIndex": {
                        "type": "integer",
                        "description": "The index of the list of users in rolling_users, from which on-call rotation starts.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The shift's timezone.  Overrides schedule's timezone.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The shift's type. Can be rolling*users, recurrent*event, single_event\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of on-call users (for single*event and recurrent*event event type).\n"
                    },
                    "weekStart": {
                        "type": "string",
                        "description": "Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/outgoing_webhooks/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test_acc_outgoingWebhook = new grafana.OncallOutgoingWebhook(\"test-acc-outgoingWebhook\", {url: \"https://example.com/\"}, {\n    provider: grafana.oncall,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest_acc_outgoing_webhook = grafana.OncallOutgoingWebhook(\"test-acc-outgoingWebhook\", url=\"https://example.com/\",\nopts=pulumi.ResourceOptions(provider=grafana[\"oncall\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_acc_outgoingWebhook = new Grafana.OncallOutgoingWebhook(\"test-acc-outgoingWebhook\", new()\n    {\n        Url = \"https://example.com/\",\n    }, new CustomResourceOptions\n    {\n        Provider = grafana.Oncall,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewOncallOutgoingWebhook(ctx, \"test-acc-outgoingWebhook\", \u0026grafana.OncallOutgoingWebhookArgs{\n\t\t\tUrl: pulumi.String(\"https://example.com/\"),\n\t\t}, pulumi.Provider(grafana.Oncall))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.OncallOutgoingWebhook;\nimport com.pulumi.grafana.OncallOutgoingWebhookArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_acc_outgoingWebhook = new OncallOutgoingWebhook(\"test-acc-outgoingWebhook\", OncallOutgoingWebhookArgs.builder()        \n            .url(\"https://example.com/\")\n            .build(), CustomResourceOptions.builder()\n                .provider(grafana.oncall())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-acc-outgoingWebhook:\n    type: grafana:OncallOutgoingWebhook\n    properties:\n      url: https://example.com/\n    options:\n      provider: ${grafana.oncall}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook outgoing_webhook_name {{outgoing_webhook_id}}\n```\n\n ",
            "properties": {
                "authorizationHeader": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used in Authorization header instead of user/password auth.\n"
                },
                "data": {
                    "type": "string",
                    "description": "The data of the webhook.\n"
                },
                "forwardWholePayload": {
                    "type": "boolean",
                    "description": "Forwards whole payload of the alert to the webhook's url as POST data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the outgoing webhook.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used for Basic authentication\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The webhook URL.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used for Basic authentication.\n"
                }
            },
            "required": [
                "name",
                "url"
            ],
            "inputProperties": {
                "authorizationHeader": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used in Authorization header instead of user/password auth.\n"
                },
                "data": {
                    "type": "string",
                    "description": "The data of the webhook.\n"
                },
                "forwardWholePayload": {
                    "type": "boolean",
                    "description": "Forwards whole payload of the alert to the webhook's url as POST data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the outgoing webhook.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used for Basic authentication\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The webhook URL.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used for Basic authentication.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallOutgoingWebhook resources.\n",
                "properties": {
                    "authorizationHeader": {
                        "type": "string",
                        "description": "The auth data of the webhook. Used in Authorization header instead of user/password auth.\n"
                    },
                    "data": {
                        "type": "string",
                        "description": "The data of the webhook.\n"
                    },
                    "forwardWholePayload": {
                        "type": "boolean",
                        "description": "Forwards whole payload of the alert to the webhook's url as POST data.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the outgoing webhook.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The auth data of the webhook. Used for Basic authentication\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The webhook URL.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The auth data of the webhook. Used for Basic authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallRoute:OncallRoute": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/routes/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst exampleSlackChannel = grafana.getOnCallSlackChannel({\n    name: \"example_slack_channel\",\n});\nconst _default = new grafana.OncallEscalationChain(\"default\", {});\nconst exampleIntegration = new grafana.OncallIntegration(\"exampleIntegration\", {type: \"grafana\"});\nconst exampleRoute = new grafana.OncallRoute(\"exampleRoute\", {\n    integrationId: exampleIntegration.id,\n    escalationChainId: _default.id,\n    routingRegex: \"us-(east|west)\",\n    position: 0,\n    slack: {\n        channelId: exampleSlackChannel.then(exampleSlackChannel =\u003e exampleSlackChannel.slackId),\n        enabled: true,\n    },\n    telegram: {\n        id: \"ONCALLTELEGRAMID\",\n        enabled: true,\n    },\n    msteams: {\n        id: \"ONCALLMSTEAMSID\",\n        enabled: false,\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\nexample_slack_channel = grafana.get_on_call_slack_channel(name=\"example_slack_channel\")\ndefault = grafana.OncallEscalationChain(\"default\")\nexample_integration = grafana.OncallIntegration(\"exampleIntegration\", type=\"grafana\")\nexample_route = grafana.OncallRoute(\"exampleRoute\",\n    integration_id=example_integration.id,\n    escalation_chain_id=default.id,\n    routing_regex=\"us-(east|west)\",\n    position=0,\n    slack=grafana.OncallRouteSlackArgs(\n        channel_id=example_slack_channel.slack_id,\n        enabled=True,\n    ),\n    telegram=grafana.OncallRouteTelegramArgs(\n        id=\"ONCALLTELEGRAMID\",\n        enabled=True,\n    ),\n    msteams=grafana.OncallRouteMsteamsArgs(\n        id=\"ONCALLMSTEAMSID\",\n        enabled=False,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSlackChannel = Grafana.GetOnCallSlackChannel.Invoke(new()\n    {\n        Name = \"example_slack_channel\",\n    });\n\n    var @default = new Grafana.OncallEscalationChain(\"default\");\n\n    var exampleIntegration = new Grafana.OncallIntegration(\"exampleIntegration\", new()\n    {\n        Type = \"grafana\",\n    });\n\n    var exampleRoute = new Grafana.OncallRoute(\"exampleRoute\", new()\n    {\n        IntegrationId = exampleIntegration.Id,\n        EscalationChainId = @default.Id,\n        RoutingRegex = \"us-(east|west)\",\n        Position = 0,\n        Slack = new Grafana.Inputs.OncallRouteSlackArgs\n        {\n            ChannelId = exampleSlackChannel.Apply(getOnCallSlackChannelResult =\u003e getOnCallSlackChannelResult.SlackId),\n            Enabled = true,\n        },\n        Telegram = new Grafana.Inputs.OncallRouteTelegramArgs\n        {\n            Id = \"ONCALLTELEGRAMID\",\n            Enabled = true,\n        },\n        Msteams = new Grafana.Inputs.OncallRouteMsteamsArgs\n        {\n            Id = \"ONCALLMSTEAMSID\",\n            Enabled = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleSlackChannel, err := grafana.GetOnCallSlackChannel(ctx, \u0026grafana.GetOnCallSlackChannelArgs{\n\t\t\tName: \"example_slack_channel\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewOncallEscalationChain(ctx, \"default\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleIntegration, err := grafana.NewOncallIntegration(ctx, \"exampleIntegration\", \u0026grafana.OncallIntegrationArgs{\n\t\t\tType: pulumi.String(\"grafana\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewOncallRoute(ctx, \"exampleRoute\", \u0026grafana.OncallRouteArgs{\n\t\t\tIntegrationId:     exampleIntegration.ID(),\n\t\t\tEscalationChainId: _default.ID(),\n\t\t\tRoutingRegex:      pulumi.String(\"us-(east|west)\"),\n\t\t\tPosition:          pulumi.Int(0),\n\t\t\tSlack: \u0026grafana.OncallRouteSlackArgs{\n\t\t\t\tChannelId: *pulumi.String(exampleSlackChannel.SlackId),\n\t\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\t},\n\t\t\tTelegram: \u0026grafana.OncallRouteTelegramArgs{\n\t\t\t\tId:      pulumi.String(\"ONCALLTELEGRAMID\"),\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t\tMsteams: \u0026grafana.OncallRouteMsteamsArgs{\n\t\t\t\tId:      pulumi.String(\"ONCALLMSTEAMSID\"),\n\t\t\t\tEnabled: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;\nimport com.pulumi.grafana.OncallEscalationChain;\nimport com.pulumi.grafana.OncallIntegration;\nimport com.pulumi.grafana.OncallIntegrationArgs;\nimport com.pulumi.grafana.OncallRoute;\nimport com.pulumi.grafana.OncallRouteArgs;\nimport com.pulumi.grafana.inputs.OncallRouteSlackArgs;\nimport com.pulumi.grafana.inputs.OncallRouteTelegramArgs;\nimport com.pulumi.grafana.inputs.OncallRouteMsteamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleSlackChannel = GrafanaFunctions.getOnCallSlackChannel(GetOnCallSlackChannelArgs.builder()\n            .name(\"example_slack_channel\")\n            .build());\n\n        var default_ = new OncallEscalationChain(\"default\");\n\n        var exampleIntegration = new OncallIntegration(\"exampleIntegration\", OncallIntegrationArgs.builder()        \n            .type(\"grafana\")\n            .build());\n\n        var exampleRoute = new OncallRoute(\"exampleRoute\", OncallRouteArgs.builder()        \n            .integrationId(exampleIntegration.id())\n            .escalationChainId(default_.id())\n            .routingRegex(\"us-(east|west)\")\n            .position(0)\n            .slack(OncallRouteSlackArgs.builder()\n                .channelId(exampleSlackChannel.applyValue(getOnCallSlackChannelResult -\u003e getOnCallSlackChannelResult.slackId()))\n                .enabled(true)\n                .build())\n            .telegram(OncallRouteTelegramArgs.builder()\n                .id(\"ONCALLTELEGRAMID\")\n                .enabled(true)\n                .build())\n            .msteams(OncallRouteMsteamsArgs.builder()\n                .id(\"ONCALLMSTEAMSID\")\n                .enabled(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: grafana:OncallEscalationChain\n  exampleIntegration:\n    type: grafana:OncallIntegration\n    properties:\n      type: grafana\n  exampleRoute:\n    type: grafana:OncallRoute\n    properties:\n      integrationId: ${exampleIntegration.id}\n      escalationChainId: ${default.id}\n      routingRegex: us-(east|west)\n      position: 0\n      slack:\n        channelId: ${exampleSlackChannel.slackId}\n        enabled: true\n      telegram:\n        id: ONCALLTELEGRAMID\n        enabled: true\n      msteams:\n        id: ONCALLMSTEAMSID\n        enabled: false\nvariables:\n  exampleSlackChannel:\n    fn::invoke:\n      Function: grafana:getOnCallSlackChannel\n      Arguments:\n        name: example_slack_channel\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/oncallRoute:OncallRoute route_name {{route_id}}\n```\n\n ",
            "properties": {
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration.\n"
                },
                "msteams": {
                    "$ref": "#/types/grafana:index/OncallRouteMsteams:OncallRouteMsteams",
                    "description": "MS teams-specific settings for a route.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the route (starts from 0).\n"
                },
                "routingRegex": {
                    "type": "string",
                    "description": "Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallRouteSlack:OncallRouteSlack",
                    "description": "Slack-specific settings for a route.\n"
                },
                "telegram": {
                    "$ref": "#/types/grafana:index/OncallRouteTelegram:OncallRouteTelegram",
                    "description": "Telegram-specific settings for a route.\n"
                }
            },
            "required": [
                "escalationChainId",
                "integrationId",
                "position",
                "routingRegex"
            ],
            "inputProperties": {
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration.\n",
                    "willReplaceOnChanges": true
                },
                "msteams": {
                    "$ref": "#/types/grafana:index/OncallRouteMsteams:OncallRouteMsteams",
                    "description": "MS teams-specific settings for a route.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the route (starts from 0).\n"
                },
                "routingRegex": {
                    "type": "string",
                    "description": "Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallRouteSlack:OncallRouteSlack",
                    "description": "Slack-specific settings for a route.\n"
                },
                "telegram": {
                    "$ref": "#/types/grafana:index/OncallRouteTelegram:OncallRouteTelegram",
                    "description": "Telegram-specific settings for a route.\n"
                }
            },
            "requiredInputs": [
                "escalationChainId",
                "integrationId",
                "position",
                "routingRegex"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallRoute resources.\n",
                "properties": {
                    "escalationChainId": {
                        "type": "string",
                        "description": "The ID of the escalation chain.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "msteams": {
                        "$ref": "#/types/grafana:index/OncallRouteMsteams:OncallRouteMsteams",
                        "description": "MS teams-specific settings for a route.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the route (starts from 0).\n"
                    },
                    "routingRegex": {
                        "type": "string",
                        "description": "Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.\n"
                    },
                    "slack": {
                        "$ref": "#/types/grafana:index/OncallRouteSlack:OncallRouteSlack",
                        "description": "Slack-specific settings for a route.\n"
                    },
                    "telegram": {
                        "$ref": "#/types/grafana:index/OncallRouteTelegram:OncallRouteTelegram",
                        "description": "Telegram-specific settings for a route.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallSchedule:OncallSchedule": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/schedules/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst exampleSlackChannel = grafana.getOnCallSlackChannel({\n    name: \"example_slack_channel\",\n});\nconst exampleUserGroup = grafana.getOncallUserGroup({\n    slackHandle: \"example_slack_handle\",\n});\n// ICal based schedule\nconst exampleScheduleOncallSchedule = new grafana.OncallSchedule(\"exampleScheduleOncallSchedule\", {\n    type: \"ical\",\n    icalUrlPrimary: \"https://example.com/example_ical.ics\",\n    icalUrlOverrides: \"https://example.com/example_overrides_ical.ics\",\n    slack: {\n        channelId: exampleSlackChannel.then(exampleSlackChannel =\u003e exampleSlackChannel.slackId),\n        userGroupId: exampleUserGroup.then(exampleUserGroup =\u003e exampleUserGroup.slackId),\n    },\n});\n// Shift based schedule\nconst exampleScheduleIndex_oncallScheduleOncallSchedule = new grafana.OncallSchedule(\"exampleScheduleIndex/oncallScheduleOncallSchedule\", {\n    type: \"calendar\",\n    timeZone: \"America/New_York\",\n    shifts: [],\n    icalUrlOverrides: \"https://example.com/example_overrides_ical.ics\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\nexample_slack_channel = grafana.get_on_call_slack_channel(name=\"example_slack_channel\")\nexample_user_group = grafana.get_oncall_user_group(slack_handle=\"example_slack_handle\")\n# ICal based schedule\nexample_schedule_oncall_schedule = grafana.OncallSchedule(\"exampleScheduleOncallSchedule\",\n    type=\"ical\",\n    ical_url_primary=\"https://example.com/example_ical.ics\",\n    ical_url_overrides=\"https://example.com/example_overrides_ical.ics\",\n    slack=grafana.OncallScheduleSlackArgs(\n        channel_id=example_slack_channel.slack_id,\n        user_group_id=example_user_group.slack_id,\n    ))\n# Shift based schedule\nexample_schedule_index_oncall_schedule_oncall_schedule = grafana.OncallSchedule(\"exampleScheduleIndex/oncallScheduleOncallSchedule\",\n    type=\"calendar\",\n    time_zone=\"America/New_York\",\n    shifts=[],\n    ical_url_overrides=\"https://example.com/example_overrides_ical.ics\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSlackChannel = Grafana.GetOnCallSlackChannel.Invoke(new()\n    {\n        Name = \"example_slack_channel\",\n    });\n\n    var exampleUserGroup = Grafana.GetOncallUserGroup.Invoke(new()\n    {\n        SlackHandle = \"example_slack_handle\",\n    });\n\n    // ICal based schedule\n    var exampleScheduleOncallSchedule = new Grafana.OncallSchedule(\"exampleScheduleOncallSchedule\", new()\n    {\n        Type = \"ical\",\n        IcalUrlPrimary = \"https://example.com/example_ical.ics\",\n        IcalUrlOverrides = \"https://example.com/example_overrides_ical.ics\",\n        Slack = new Grafana.Inputs.OncallScheduleSlackArgs\n        {\n            ChannelId = exampleSlackChannel.Apply(getOnCallSlackChannelResult =\u003e getOnCallSlackChannelResult.SlackId),\n            UserGroupId = exampleUserGroup.Apply(getOncallUserGroupResult =\u003e getOncallUserGroupResult.SlackId),\n        },\n    });\n\n    // Shift based schedule\n    var exampleScheduleIndex_oncallScheduleOncallSchedule = new Grafana.OncallSchedule(\"exampleScheduleIndex/oncallScheduleOncallSchedule\", new()\n    {\n        Type = \"calendar\",\n        TimeZone = \"America/New_York\",\n        Shifts = new[] {},\n        IcalUrlOverrides = \"https://example.com/example_overrides_ical.ics\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleSlackChannel, err := grafana.GetOnCallSlackChannel(ctx, \u0026grafana.GetOnCallSlackChannelArgs{\n\t\t\tName: \"example_slack_channel\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUserGroup, err := grafana.GetOncallUserGroup(ctx, \u0026grafana.GetOncallUserGroupArgs{\n\t\t\tSlackHandle: \"example_slack_handle\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewOncallSchedule(ctx, \"exampleScheduleOncallSchedule\", \u0026grafana.OncallScheduleArgs{\n\t\t\tType:             pulumi.String(\"ical\"),\n\t\t\tIcalUrlPrimary:   pulumi.String(\"https://example.com/example_ical.ics\"),\n\t\t\tIcalUrlOverrides: pulumi.String(\"https://example.com/example_overrides_ical.ics\"),\n\t\t\tSlack: \u0026grafana.OncallScheduleSlackArgs{\n\t\t\t\tChannelId:   *pulumi.String(exampleSlackChannel.SlackId),\n\t\t\t\tUserGroupId: *pulumi.String(exampleUserGroup.SlackId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewOncallSchedule(ctx, \"exampleScheduleIndex/oncallScheduleOncallSchedule\", \u0026grafana.OncallScheduleArgs{\n\t\t\tType:             pulumi.String(\"calendar\"),\n\t\t\tTimeZone:         pulumi.String(\"America/New_York\"),\n\t\t\tShifts:           pulumi.StringArray{},\n\t\t\tIcalUrlOverrides: pulumi.String(\"https://example.com/example_overrides_ical.ics\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;\nimport com.pulumi.grafana.inputs.GetOncallUserGroupArgs;\nimport com.pulumi.grafana.OncallSchedule;\nimport com.pulumi.grafana.OncallScheduleArgs;\nimport com.pulumi.grafana.inputs.OncallScheduleSlackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleSlackChannel = GrafanaFunctions.getOnCallSlackChannel(GetOnCallSlackChannelArgs.builder()\n            .name(\"example_slack_channel\")\n            .build());\n\n        final var exampleUserGroup = GrafanaFunctions.getOncallUserGroup(GetOncallUserGroupArgs.builder()\n            .slackHandle(\"example_slack_handle\")\n            .build());\n\n        var exampleScheduleOncallSchedule = new OncallSchedule(\"exampleScheduleOncallSchedule\", OncallScheduleArgs.builder()        \n            .type(\"ical\")\n            .icalUrlPrimary(\"https://example.com/example_ical.ics\")\n            .icalUrlOverrides(\"https://example.com/example_overrides_ical.ics\")\n            .slack(OncallScheduleSlackArgs.builder()\n                .channelId(exampleSlackChannel.applyValue(getOnCallSlackChannelResult -\u003e getOnCallSlackChannelResult.slackId()))\n                .userGroupId(exampleUserGroup.applyValue(getOncallUserGroupResult -\u003e getOncallUserGroupResult.slackId()))\n                .build())\n            .build());\n\n        var exampleScheduleIndex_oncallScheduleOncallSchedule = new OncallSchedule(\"exampleScheduleIndex/oncallScheduleOncallSchedule\", OncallScheduleArgs.builder()        \n            .type(\"calendar\")\n            .timeZone(\"America/New_York\")\n            .shifts()\n            .icalUrlOverrides(\"https://example.com/example_overrides_ical.ics\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ICal based schedule\n  exampleScheduleOncallSchedule:\n    type: grafana:OncallSchedule\n    properties:\n      type: ical\n      icalUrlPrimary: https://example.com/example_ical.ics\n      icalUrlOverrides: https://example.com/example_overrides_ical.ics\n      slack:\n        channelId: ${exampleSlackChannel.slackId}\n        userGroupId: ${exampleUserGroup.slackId}\n  # Shift based schedule\n  exampleScheduleIndex/oncallScheduleOncallSchedule:\n    type: grafana:OncallSchedule\n    properties:\n      type: calendar\n      timeZone: America/New_York\n      shifts: []\n      icalUrlOverrides: https://example.com/example_overrides_ical.ics\nvariables:\n  exampleSlackChannel:\n    fn::invoke:\n      Function: grafana:getOnCallSlackChannel\n      Arguments:\n        name: example_slack_channel\n  exampleUserGroup:\n    fn::invoke:\n      Function: grafana:getOncallUserGroup\n      Arguments:\n        slackHandle: example_slack_handle\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/oncallSchedule:OncallSchedule schedule_name {{schedule_id}}\n```\n\n ",
            "properties": {
                "icalUrlOverrides": {
                    "type": "string",
                    "description": "The URL of external iCal calendar which override primary events.\n"
                },
                "icalUrlPrimary": {
                    "type": "string",
                    "description": "The URL of the external calendar iCal file.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule's name.\n"
                },
                "shifts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of on-call shifts.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallScheduleSlack:OncallScheduleSlack",
                    "description": "The Slack-specific settings for a schedule.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The schedule's time zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The schedule's type.\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "icalUrlOverrides": {
                    "type": "string",
                    "description": "The URL of external iCal calendar which override primary events.\n"
                },
                "icalUrlPrimary": {
                    "type": "string",
                    "description": "The URL of the external calendar iCal file.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule's name.\n"
                },
                "shifts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of on-call shifts.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallScheduleSlack:OncallScheduleSlack",
                    "description": "The Slack-specific settings for a schedule.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The schedule's time zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The schedule's type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallSchedule resources.\n",
                "properties": {
                    "icalUrlOverrides": {
                        "type": "string",
                        "description": "The URL of external iCal calendar which override primary events.\n"
                    },
                    "icalUrlPrimary": {
                        "type": "string",
                        "description": "The URL of the external calendar iCal file.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The schedule's name.\n"
                    },
                    "shifts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ID's of on-call shifts.\n"
                    },
                    "slack": {
                        "$ref": "#/types/grafana:index/OncallScheduleSlack:OncallScheduleSlack",
                        "description": "The Slack-specific settings for a schedule.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The schedule's time zone.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The schedule's type.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/organization:Organization": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-organizations/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/org/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.Organization(\"test\", {\n    adminUser: \"admin\",\n    admins: [\"admin@example.com\"],\n    createUsers: true,\n    editors: [\n        \"editor-01@example.com\",\n        \"editor-02@example.com\",\n    ],\n    viewers: [\n        \"viewer-01@example.com\",\n        \"viewer-02@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.Organization(\"test\",\n    admin_user=\"admin\",\n    admins=[\"admin@example.com\"],\n    create_users=True,\n    editors=[\n        \"editor-01@example.com\",\n        \"editor-02@example.com\",\n    ],\n    viewers=[\n        \"viewer-01@example.com\",\n        \"viewer-02@example.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.Organization(\"test\", new()\n    {\n        AdminUser = \"admin\",\n        Admins = new[]\n        {\n            \"admin@example.com\",\n        },\n        CreateUsers = true,\n        Editors = new[]\n        {\n            \"editor-01@example.com\",\n            \"editor-02@example.com\",\n        },\n        Viewers = new[]\n        {\n            \"viewer-01@example.com\",\n            \"viewer-02@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewOrganization(ctx, \"test\", \u0026grafana.OrganizationArgs{\n\t\t\tAdminUser: pulumi.String(\"admin\"),\n\t\t\tAdmins: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"admin@example.com\"),\n\t\t\t},\n\t\t\tCreateUsers: pulumi.Bool(true),\n\t\t\tEditors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"editor-01@example.com\"),\n\t\t\t\tpulumi.String(\"editor-02@example.com\"),\n\t\t\t},\n\t\t\tViewers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"viewer-01@example.com\"),\n\t\t\t\tpulumi.String(\"viewer-02@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Organization;\nimport com.pulumi.grafana.OrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Organization(\"test\", OrganizationArgs.builder()        \n            .adminUser(\"admin\")\n            .admins(\"admin@example.com\")\n            .createUsers(true)\n            .editors(            \n                \"editor-01@example.com\",\n                \"editor-02@example.com\")\n            .viewers(            \n                \"viewer-01@example.com\",\n                \"viewer-02@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:Organization\n    properties:\n      adminUser: admin\n      admins:\n        - admin@example.com\n      createUsers: true\n      editors:\n        - editor-01@example.com\n        - editor-02@example.com\n      viewers:\n        - viewer-01@example.com\n        - viewer-02@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/organization:Organization org_name {{org_id}}\n```\n\n ",
            "properties": {
                "adminUser": {
                    "type": "string",
                    "description": "The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to\nadmin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and\nthis parameter keeps Terraform from removing it from organizations.\n"
                },
                "admins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given admin\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                },
                "createUsers": {
                    "type": "boolean",
                    "description": "Whether or not to create Grafana users specified in the organization's\nmembership if they don't already exist in Grafana. If unspecified, this\nparameter defaults to true, creating placeholder users with the name, login,\nand email set to the email of the user, and a random password. Setting this\noption to false will cause an error to be thrown for any users that do not\nalready exist in Grafana.\nDefaults to `true`.\n"
                },
                "editors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given editor\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana organization created.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "The organization id assigned to this organization by Grafana.\n"
                },
                "viewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given viewer\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                }
            },
            "required": [
                "name",
                "orgId"
            ],
            "inputProperties": {
                "adminUser": {
                    "type": "string",
                    "description": "The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to\nadmin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and\nthis parameter keeps Terraform from removing it from organizations.\n"
                },
                "admins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given admin\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                },
                "createUsers": {
                    "type": "boolean",
                    "description": "Whether or not to create Grafana users specified in the organization's\nmembership if they don't already exist in Grafana. If unspecified, this\nparameter defaults to true, creating placeholder users with the name, login,\nand email set to the email of the user, and a random password. Setting this\noption to false will cause an error to be thrown for any users that do not\nalready exist in Grafana.\nDefaults to `true`.\n"
                },
                "editors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given editor\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana organization created.\n"
                },
                "viewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given viewer\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "adminUser": {
                        "type": "string",
                        "description": "The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to\nadmin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and\nthis parameter keeps Terraform from removing it from organizations.\n"
                    },
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users who should be given admin\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                    },
                    "createUsers": {
                        "type": "boolean",
                        "description": "Whether or not to create Grafana users specified in the organization's\nmembership if they don't already exist in Grafana. If unspecified, this\nparameter defaults to true, creating placeholder users with the name, login,\nand email set to the email of the user, and a random password. Setting this\noption to false will cause an error to be thrown for any users that do not\nalready exist in Grafana.\nDefaults to `true`.\n"
                    },
                    "editors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users who should be given editor\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the Grafana organization created.\n"
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "The organization id assigned to this organization by Grafana.\n"
                    },
                    "viewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users who should be given viewer\naccess to the organization. Note: users specified here must already exist in\nGrafana unless 'create_users' is set to true.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/organizationPreference:OrganizationPreference": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-organizations/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.OrganizationPreference(\"test\", {\n    theme: \"light\",\n    timezone: \"utc\",\n    weekStart: \"Tuesday\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.OrganizationPreference(\"test\",\n    theme=\"light\",\n    timezone=\"utc\",\n    week_start=\"Tuesday\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.OrganizationPreference(\"test\", new()\n    {\n        Theme = \"light\",\n        Timezone = \"utc\",\n        WeekStart = \"Tuesday\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewOrganizationPreference(ctx, \"test\", \u0026grafana.OrganizationPreferenceArgs{\n\t\t\tTheme:     pulumi.String(\"light\"),\n\t\t\tTimezone:  pulumi.String(\"utc\"),\n\t\t\tWeekStart: pulumi.String(\"Tuesday\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.OrganizationPreference;\nimport com.pulumi.grafana.OrganizationPreferenceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new OrganizationPreference(\"test\", OrganizationPreferenceArgs.builder()        \n            .theme(\"light\")\n            .timezone(\"utc\")\n            .weekStart(\"Tuesday\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:OrganizationPreference\n    properties:\n      theme: light\n      timezone: utc\n      weekStart: Tuesday\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "homeDashboardId": {
                    "type": "integer",
                    "description": "The Organization home dashboard ID.\n"
                },
                "homeDashboardUid": {
                    "type": "string",
                    "description": "The Organization home dashboard UID.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The Organization theme. Available values are `light`, `dark`, or an empty string for the default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "The Organization week start.\n"
                }
            },
            "inputProperties": {
                "homeDashboardId": {
                    "type": "integer",
                    "description": "The Organization home dashboard ID.\n"
                },
                "homeDashboardUid": {
                    "type": "string",
                    "description": "The Organization home dashboard UID.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The Organization theme. Available values are `light`, `dark`, or an empty string for the default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "The Organization week start.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationPreference resources.\n",
                "properties": {
                    "homeDashboardId": {
                        "type": "integer",
                        "description": "The Organization home dashboard ID.\n"
                    },
                    "homeDashboardUid": {
                        "type": "string",
                        "description": "The Organization home dashboard UID.\n"
                    },
                    "theme": {
                        "type": "string",
                        "description": "The Organization theme. Available values are `light`, `dark`, or an empty string for the default.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.\n"
                    },
                    "weekStart": {
                        "type": "string",
                        "description": "The Organization week start.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/playlist:Playlist": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/playlist/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/playlist/)\n",
            "properties": {
                "interval": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/PlaylistItem:PlaylistItem"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the playlist.\n"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "required": [
                "interval",
                "items",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "interval": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/PlaylistItem:PlaylistItem"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the playlist.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "interval",
                "items"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Playlist resources.\n",
                "properties": {
                    "interval": {
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/PlaylistItem:PlaylistItem"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the playlist.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/report:Report": {
            "description": "**Note:** This resource is available only with Grafana Enterprise 7.+.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/enterprise/reporting/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/reporting/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst testDashboard = new grafana.Dashboard(\"testDashboard\", {\n    configJson: `{\n  \"title\": \"Dashboard for report\",\n  \"uid\": \"report\"\n}\n`,\n    message: \"inital commit.\",\n});\nconst testReport = new grafana.Report(\"testReport\", {\n    dashboardUid: testDashboard.uid,\n    recipients: [\"some@email.com\"],\n    schedule: {\n        frequency: \"hourly\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest_dashboard = grafana.Dashboard(\"testDashboard\",\n    config_json=\"\"\"{\n  \"title\": \"Dashboard for report\",\n  \"uid\": \"report\"\n}\n\"\"\",\n    message=\"inital commit.\")\ntest_report = grafana.Report(\"testReport\",\n    dashboard_uid=test_dashboard.uid,\n    recipients=[\"some@email.com\"],\n    schedule=grafana.ReportScheduleArgs(\n        frequency=\"hourly\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testDashboard = new Grafana.Dashboard(\"testDashboard\", new()\n    {\n        ConfigJson = @\"{\n  \"\"title\"\": \"\"Dashboard for report\"\",\n  \"\"uid\"\": \"\"report\"\"\n}\n\",\n        Message = \"inital commit.\",\n    });\n\n    var testReport = new Grafana.Report(\"testReport\", new()\n    {\n        DashboardUid = testDashboard.Uid,\n        Recipients = new[]\n        {\n            \"some@email.com\",\n        },\n        Schedule = new Grafana.Inputs.ReportScheduleArgs\n        {\n            Frequency = \"hourly\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestDashboard, err := grafana.NewDashboard(ctx, \"testDashboard\", \u0026grafana.DashboardArgs{\n\t\t\tConfigJson: pulumi.String(fmt.Sprintf(\"{\\n  \\\"title\\\": \\\"Dashboard for report\\\",\\n  \\\"uid\\\": \\\"report\\\"\\n}\\n\")),\n\t\t\tMessage:    pulumi.String(\"inital commit.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewReport(ctx, \"testReport\", \u0026grafana.ReportArgs{\n\t\t\tDashboardUid: testDashboard.Uid,\n\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"some@email.com\"),\n\t\t\t},\n\t\t\tSchedule: \u0026grafana.ReportScheduleArgs{\n\t\t\t\tFrequency: pulumi.String(\"hourly\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Dashboard;\nimport com.pulumi.grafana.DashboardArgs;\nimport com.pulumi.grafana.Report;\nimport com.pulumi.grafana.ReportArgs;\nimport com.pulumi.grafana.inputs.ReportScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testDashboard = new Dashboard(\"testDashboard\", DashboardArgs.builder()        \n            .configJson(\"\"\"\n{\n  \"title\": \"Dashboard for report\",\n  \"uid\": \"report\"\n}\n            \"\"\")\n            .message(\"inital commit.\")\n            .build());\n\n        var testReport = new Report(\"testReport\", ReportArgs.builder()        \n            .dashboardUid(testDashboard.uid())\n            .recipients(\"some@email.com\")\n            .schedule(ReportScheduleArgs.builder()\n                .frequency(\"hourly\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testDashboard:\n    type: grafana:Dashboard\n    properties:\n      configJson: |\n        {\n          \"title\": \"Dashboard for report\",\n          \"uid\": \"report\"\n        }\n      message: inital commit.\n  testReport:\n    type: grafana:Report\n    properties:\n      dashboardUid: ${testDashboard.uid}\n      recipients:\n        - some@email.com\n      schedule:\n        frequency: hourly\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.\n",
                    "deprecationMessage": "Use dashboard_uid instead"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "Dashboard to be sent in the report.\n"
                },
                "includeDashboardLink": {
                    "type": "boolean",
                    "description": "Whether to include a link to the dashboard in the report. Defaults to `true`.\n"
                },
                "includeTableCsv": {
                    "type": "boolean",
                    "description": "Whether to include a CSV file of table panel data. Defaults to `false`.\n"
                },
                "layout": {
                    "type": "string",
                    "description": "Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message to be sent in the report.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the report.\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of recipients of the report.\n"
                },
                "replyTo": {
                    "type": "string",
                    "description": "Reply-to email address of the report.\n"
                },
                "schedule": {
                    "$ref": "#/types/grafana:index/ReportSchedule:ReportSchedule",
                    "description": "Schedule of the report.\n"
                },
                "timeRange": {
                    "$ref": "#/types/grafana:index/ReportTimeRange:ReportTimeRange",
                    "description": "Time range of the report.\n"
                }
            },
            "required": [
                "dashboardId",
                "dashboardUid",
                "name",
                "recipients",
                "schedule"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.\n",
                    "deprecationMessage": "Use dashboard_uid instead"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "Dashboard to be sent in the report.\n"
                },
                "includeDashboardLink": {
                    "type": "boolean",
                    "description": "Whether to include a link to the dashboard in the report. Defaults to `true`.\n"
                },
                "includeTableCsv": {
                    "type": "boolean",
                    "description": "Whether to include a CSV file of table panel data. Defaults to `false`.\n"
                },
                "layout": {
                    "type": "string",
                    "description": "Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message to be sent in the report.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the report.\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of recipients of the report.\n"
                },
                "replyTo": {
                    "type": "string",
                    "description": "Reply-to email address of the report.\n"
                },
                "schedule": {
                    "$ref": "#/types/grafana:index/ReportSchedule:ReportSchedule",
                    "description": "Schedule of the report.\n"
                },
                "timeRange": {
                    "$ref": "#/types/grafana:index/ReportTimeRange:ReportTimeRange",
                    "description": "Time range of the report.\n"
                }
            },
            "requiredInputs": [
                "recipients",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Report resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer",
                        "description": "Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.\n",
                        "deprecationMessage": "Use dashboard_uid instead"
                    },
                    "dashboardUid": {
                        "type": "string",
                        "description": "Dashboard to be sent in the report.\n"
                    },
                    "includeDashboardLink": {
                        "type": "boolean",
                        "description": "Whether to include a link to the dashboard in the report. Defaults to `true`.\n"
                    },
                    "includeTableCsv": {
                        "type": "boolean",
                        "description": "Whether to include a CSV file of table panel data. Defaults to `false`.\n"
                    },
                    "layout": {
                        "type": "string",
                        "description": "Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message to be sent in the report.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the report.\n"
                    },
                    "orientation": {
                        "type": "string",
                        "description": "Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of recipients of the report.\n"
                    },
                    "replyTo": {
                        "type": "string",
                        "description": "Reply-to email address of the report.\n"
                    },
                    "schedule": {
                        "$ref": "#/types/grafana:index/ReportSchedule:ReportSchedule",
                        "description": "Schedule of the report.\n"
                    },
                    "timeRange": {
                        "$ref": "#/types/grafana:index/ReportTimeRange:ReportTimeRange",
                        "description": "Time range of the report.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/role:Role": {
            "description": "**Note:** This resource is available only with Grafana Enterprise 8.+.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst superUser = new grafana.Role(\"superUser\", {\n    description: \"My Super User description\",\n    global: true,\n    permissions: [\n        {\n            action: \"org.users:add\",\n            scope: \"users:*\",\n        },\n        {\n            action: \"org.users:write\",\n            scope: \"users:*\",\n        },\n        {\n            action: \"org.users:read\",\n            scope: \"users:*\",\n        },\n    ],\n    uid: \"superuseruid\",\n    version: 1,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nsuper_user = grafana.Role(\"superUser\",\n    description=\"My Super User description\",\n    global_=True,\n    permissions=[\n        grafana.RolePermissionArgs(\n            action=\"org.users:add\",\n            scope=\"users:*\",\n        ),\n        grafana.RolePermissionArgs(\n            action=\"org.users:write\",\n            scope=\"users:*\",\n        ),\n        grafana.RolePermissionArgs(\n            action=\"org.users:read\",\n            scope=\"users:*\",\n        ),\n    ],\n    uid=\"superuseruid\",\n    version=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var superUser = new Grafana.Role(\"superUser\", new()\n    {\n        Description = \"My Super User description\",\n        Global = true,\n        Permissions = new[]\n        {\n            new Grafana.Inputs.RolePermissionArgs\n            {\n                Action = \"org.users:add\",\n                Scope = \"users:*\",\n            },\n            new Grafana.Inputs.RolePermissionArgs\n            {\n                Action = \"org.users:write\",\n                Scope = \"users:*\",\n            },\n            new Grafana.Inputs.RolePermissionArgs\n            {\n                Action = \"org.users:read\",\n                Scope = \"users:*\",\n            },\n        },\n        Uid = \"superuseruid\",\n        Version = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewRole(ctx, \"superUser\", \u0026grafana.RoleArgs{\n\t\t\tDescription: pulumi.String(\"My Super User description\"),\n\t\t\tGlobal:      pulumi.Bool(true),\n\t\t\tPermissions: grafana.RolePermissionArray{\n\t\t\t\t\u0026grafana.RolePermissionArgs{\n\t\t\t\t\tAction: pulumi.String(\"org.users:add\"),\n\t\t\t\t\tScope:  pulumi.String(\"users:*\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.RolePermissionArgs{\n\t\t\t\t\tAction: pulumi.String(\"org.users:write\"),\n\t\t\t\t\tScope:  pulumi.String(\"users:*\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.RolePermissionArgs{\n\t\t\t\t\tAction: pulumi.String(\"org.users:read\"),\n\t\t\t\t\tScope:  pulumi.String(\"users:*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUid:     pulumi.String(\"superuseruid\"),\n\t\t\tVersion: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Role;\nimport com.pulumi.grafana.RoleArgs;\nimport com.pulumi.grafana.inputs.RolePermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var superUser = new Role(\"superUser\", RoleArgs.builder()        \n            .description(\"My Super User description\")\n            .global(true)\n            .permissions(            \n                RolePermissionArgs.builder()\n                    .action(\"org.users:add\")\n                    .scope(\"users:*\")\n                    .build(),\n                RolePermissionArgs.builder()\n                    .action(\"org.users:write\")\n                    .scope(\"users:*\")\n                    .build(),\n                RolePermissionArgs.builder()\n                    .action(\"org.users:read\")\n                    .scope(\"users:*\")\n                    .build())\n            .uid(\"superuseruid\")\n            .version(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  superUser:\n    type: grafana:Role\n    properties:\n      description: My Super User description\n      global: true\n      permissions:\n        - action: org.users:add\n          scope: users:*\n        - action: org.users:write\n          scope: users:*\n        - action: org.users:read\n          scope: users:*\n      uid: superuseruid\n      version: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/role:Role role_name {{uid}}\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the role. Available with Grafana 8.5+.\n"
                },
                "global": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role is available across all organizations or not. Defaults to `false`.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Group of the role. Available with Grafana 8.5+.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the role\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RolePermission:RolePermission"
                    },
                    "description": "Specific set of actions granted by the role.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier of the role. Used for assignments.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version of the role. A role is updated only on version increase.\n"
                }
            },
            "required": [
                "name",
                "uid",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the role. Available with Grafana 8.5+.\n"
                },
                "global": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role is available across all organizations or not. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "group": {
                    "type": "string",
                    "description": "Group of the role. Available with Grafana 8.5+.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the role\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RolePermission:RolePermission"
                    },
                    "description": "Specific set of actions granted by the role.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier of the role. Used for assignments.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "integer",
                    "description": "Version of the role. A role is updated only on version increase.\n"
                }
            },
            "requiredInputs": [
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the role.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the role. Available with Grafana 8.5+.\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Boolean to state whether the role is available across all organizations or not. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "group": {
                        "type": "string",
                        "description": "Group of the role. Available with Grafana 8.5+.\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the role\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/RolePermission:RolePermission"
                        },
                        "description": "Specific set of actions granted by the role.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier of the role. Used for assignments.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version of the role. A role is updated only on version increase.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/roleAssignment:RoleAssignment": {
            "description": "**Note:** This resource is available only with Grafana Enterprise 9.2+.\n* [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst testRole = new grafana.Role(\"testRole\", {\n    uid: \"testrole\",\n    version: 1,\n    global: true,\n    permissions: [{\n        action: \"org.users:add\",\n        scope: \"users:*\",\n    }],\n});\nconst testTeam = new grafana.Team(\"testTeam\", {});\nconst testUser = new grafana.User(\"testUser\", {\n    email: \"terraform_user@test.com\",\n    login: \"terraform_user@test.com\",\n    password: \"password\",\n});\nconst testSa = new grafana.ServiceAccount(\"testSa\", {role: \"Viewer\"});\nconst test = new grafana.RoleAssignment(\"test\", {\n    roleUid: testRole.uid,\n    users: [testUser.id],\n    teams: [testTeam.id],\n    serviceAccounts: [testSa.id],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest_role = grafana.Role(\"testRole\",\n    uid=\"testrole\",\n    version=1,\n    global_=True,\n    permissions=[grafana.RolePermissionArgs(\n        action=\"org.users:add\",\n        scope=\"users:*\",\n    )])\ntest_team = grafana.Team(\"testTeam\")\ntest_user = grafana.User(\"testUser\",\n    email=\"terraform_user@test.com\",\n    login=\"terraform_user@test.com\",\n    password=\"password\")\ntest_sa = grafana.ServiceAccount(\"testSa\", role=\"Viewer\")\ntest = grafana.RoleAssignment(\"test\",\n    role_uid=test_role.uid,\n    users=[test_user.id],\n    teams=[test_team.id],\n    service_accounts=[test_sa.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testRole = new Grafana.Role(\"testRole\", new()\n    {\n        Uid = \"testrole\",\n        Version = 1,\n        Global = true,\n        Permissions = new[]\n        {\n            new Grafana.Inputs.RolePermissionArgs\n            {\n                Action = \"org.users:add\",\n                Scope = \"users:*\",\n            },\n        },\n    });\n\n    var testTeam = new Grafana.Team(\"testTeam\");\n\n    var testUser = new Grafana.User(\"testUser\", new()\n    {\n        Email = \"terraform_user@test.com\",\n        Login = \"terraform_user@test.com\",\n        Password = \"password\",\n    });\n\n    var testSa = new Grafana.ServiceAccount(\"testSa\", new()\n    {\n        Role = \"Viewer\",\n    });\n\n    var test = new Grafana.RoleAssignment(\"test\", new()\n    {\n        RoleUid = testRole.Uid,\n        Users = new[]\n        {\n            testUser.Id,\n        },\n        Teams = new[]\n        {\n            testTeam.Id,\n        },\n        ServiceAccounts = new[]\n        {\n            testSa.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestRole, err := grafana.NewRole(ctx, \"testRole\", \u0026grafana.RoleArgs{\n\t\t\tUid:     pulumi.String(\"testrole\"),\n\t\t\tVersion: pulumi.Int(1),\n\t\t\tGlobal:  pulumi.Bool(true),\n\t\t\tPermissions: grafana.RolePermissionArray{\n\t\t\t\t\u0026grafana.RolePermissionArgs{\n\t\t\t\t\tAction: pulumi.String(\"org.users:add\"),\n\t\t\t\t\tScope:  pulumi.String(\"users:*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestTeam, err := grafana.NewTeam(ctx, \"testTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestUser, err := grafana.NewUser(ctx, \"testUser\", \u0026grafana.UserArgs{\n\t\t\tEmail:    pulumi.String(\"terraform_user@test.com\"),\n\t\t\tLogin:    pulumi.String(\"terraform_user@test.com\"),\n\t\t\tPassword: pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestSa, err := grafana.NewServiceAccount(ctx, \"testSa\", \u0026grafana.ServiceAccountArgs{\n\t\t\tRole: pulumi.String(\"Viewer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewRoleAssignment(ctx, \"test\", \u0026grafana.RoleAssignmentArgs{\n\t\t\tRoleUid: testRole.Uid,\n\t\t\tUsers: pulumi.IntArray{\n\t\t\t\ttestUser.ID(),\n\t\t\t},\n\t\t\tTeams: pulumi.IntArray{\n\t\t\t\ttestTeam.ID(),\n\t\t\t},\n\t\t\tServiceAccounts: pulumi.IntArray{\n\t\t\t\ttestSa.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Role;\nimport com.pulumi.grafana.RoleArgs;\nimport com.pulumi.grafana.inputs.RolePermissionArgs;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.User;\nimport com.pulumi.grafana.UserArgs;\nimport com.pulumi.grafana.ServiceAccount;\nimport com.pulumi.grafana.ServiceAccountArgs;\nimport com.pulumi.grafana.RoleAssignment;\nimport com.pulumi.grafana.RoleAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRole = new Role(\"testRole\", RoleArgs.builder()        \n            .uid(\"testrole\")\n            .version(1)\n            .global(true)\n            .permissions(RolePermissionArgs.builder()\n                .action(\"org.users:add\")\n                .scope(\"users:*\")\n                .build())\n            .build());\n\n        var testTeam = new Team(\"testTeam\");\n\n        var testUser = new User(\"testUser\", UserArgs.builder()        \n            .email(\"terraform_user@test.com\")\n            .login(\"terraform_user@test.com\")\n            .password(\"password\")\n            .build());\n\n        var testSa = new ServiceAccount(\"testSa\", ServiceAccountArgs.builder()        \n            .role(\"Viewer\")\n            .build());\n\n        var test = new RoleAssignment(\"test\", RoleAssignmentArgs.builder()        \n            .roleUid(testRole.uid())\n            .users(testUser.id())\n            .teams(testTeam.id())\n            .serviceAccounts(testSa.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testRole:\n    type: grafana:Role\n    properties:\n      uid: testrole\n      version: 1\n      global: true\n      permissions:\n        - action: org.users:add\n          scope: users:*\n  testTeam:\n    type: grafana:Team\n  testUser:\n    type: grafana:User\n    properties:\n      email: terraform_user@test.com\n      login: terraform_user@test.com\n      password: password\n  testSa:\n    type: grafana:ServiceAccount\n    properties:\n      role: Viewer\n  test:\n    type: grafana:RoleAssignment\n    properties:\n      roleUid: ${testRole.uid}\n      users:\n        - ${testUser.id}\n      teams:\n        - ${testTeam.id}\n      serviceAccounts:\n        - ${testSa.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "roleUid": {
                    "type": "string",
                    "description": "Grafana RBAC role UID.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of service accounts that the role should be assigned to.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of teams that the role should be assigned to.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of users that the role should be assigned to.\n"
                }
            },
            "required": [
                "roleUid"
            ],
            "inputProperties": {
                "roleUid": {
                    "type": "string",
                    "description": "Grafana RBAC role UID.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of service accounts that the role should be assigned to.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of teams that the role should be assigned to.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of users that the role should be assigned to.\n"
                }
            },
            "requiredInputs": [
                "roleUid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleAssignment resources.\n",
                "properties": {
                    "roleUid": {
                        "type": "string",
                        "description": "Grafana RBAC role UID.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of service accounts that the role should be assigned to.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of teams that the role should be assigned to.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of users that the role should be assigned to.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/ruleGroup:RuleGroup": {
            "description": "Manages Grafana Alerting rule groups.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/alerting/alerting-rules)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#alert-rules)\n\nThis resource requires Grafana 9.1.0 or later.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst ruleFolder = new grafana.Folder(\"ruleFolder\", {title: \"My Alert Rule Folder\"});\nconst myAlertRule = new grafana.RuleGroup(\"myAlertRule\", {\n    folderUid: ruleFolder.uid,\n    intervalSeconds: 240,\n    orgId: 1,\n    rules: [{\n        name: \"My Alert Rule 1\",\n        \"for\": \"2m\",\n        condition: \"B\",\n        noDataState: \"NoData\",\n        execErrState: \"Alerting\",\n        annotations: {\n            a: \"b\",\n            c: \"d\",\n        },\n        labels: {\n            e: \"f\",\n            g: \"h\",\n        },\n        datas: [\n            {\n                refId: \"A\",\n                queryType: \"\",\n                relativeTimeRange: {\n                    from: 600,\n                    to: 0,\n                },\n                datasourceUid: \"PD8C576611E62080A\",\n                model: JSON.stringify({\n                    hide: false,\n                    intervalMs: 1000,\n                    maxDataPoints: 43200,\n                    refId: \"A\",\n                }),\n            },\n            {\n                refId: \"B\",\n                queryType: \"\",\n                relativeTimeRange: {\n                    from: 0,\n                    to: 0,\n                },\n                datasourceUid: \"-100\",\n                model: `{\n    \"conditions\": [\n        {\n        \"evaluator\": {\n            \"params\": [\n            3\n            ],\n            \"type\": \"gt\"\n        },\n        \"operator\": {\n            \"type\": \"and\"\n        },\n        \"query\": {\n            \"params\": [\n            \"A\"\n            ]\n        },\n        \"reducer\": {\n            \"params\": [],\n            \"type\": \"last\"\n        },\n        \"type\": \"query\"\n        }\n    ],\n    \"datasource\": {\n        \"type\": \"__expr__\",\n        \"uid\": \"-100\"\n    },\n    \"hide\": false,\n    \"intervalMs\": 1000,\n    \"maxDataPoints\": 43200,\n    \"refId\": \"B\",\n    \"type\": \"classic_conditions\"\n}\n`,\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport lbrlabs_pulumi_grafana as grafana\n\nrule_folder = grafana.Folder(\"ruleFolder\", title=\"My Alert Rule Folder\")\nmy_alert_rule = grafana.RuleGroup(\"myAlertRule\",\n    folder_uid=rule_folder.uid,\n    interval_seconds=240,\n    org_id=1,\n    rules=[grafana.RuleGroupRuleArgs(\n        name=\"My Alert Rule 1\",\n        for_=\"2m\",\n        condition=\"B\",\n        no_data_state=\"NoData\",\n        exec_err_state=\"Alerting\",\n        annotations={\n            \"a\": \"b\",\n            \"c\": \"d\",\n        },\n        labels={\n            \"e\": \"f\",\n            \"g\": \"h\",\n        },\n        datas=[\n            grafana.RuleGroupRuleDataArgs(\n                ref_id=\"A\",\n                query_type=\"\",\n                relative_time_range=grafana.RuleGroupRuleDataRelativeTimeRangeArgs(\n                    from_=600,\n                    to=0,\n                ),\n                datasource_uid=\"PD8C576611E62080A\",\n                model=json.dumps({\n                    \"hide\": False,\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"A\",\n                }),\n            ),\n            grafana.RuleGroupRuleDataArgs(\n                ref_id=\"B\",\n                query_type=\"\",\n                relative_time_range=grafana.RuleGroupRuleDataRelativeTimeRangeArgs(\n                    from_=0,\n                    to=0,\n                ),\n                datasource_uid=\"-100\",\n                model=\"\"\"{\n    \"conditions\": [\n        {\n        \"evaluator\": {\n            \"params\": [\n            3\n            ],\n            \"type\": \"gt\"\n        },\n        \"operator\": {\n            \"type\": \"and\"\n        },\n        \"query\": {\n            \"params\": [\n            \"A\"\n            ]\n        },\n        \"reducer\": {\n            \"params\": [],\n            \"type\": \"last\"\n        },\n        \"type\": \"query\"\n        }\n    ],\n    \"datasource\": {\n        \"type\": \"__expr__\",\n        \"uid\": \"-100\"\n    },\n    \"hide\": false,\n    \"intervalMs\": 1000,\n    \"maxDataPoints\": 43200,\n    \"refId\": \"B\",\n    \"type\": \"classic_conditions\"\n}\n\"\"\",\n            ),\n        ],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ruleFolder = new Grafana.Folder(\"ruleFolder\", new()\n    {\n        Title = \"My Alert Rule Folder\",\n    });\n\n    var myAlertRule = new Grafana.RuleGroup(\"myAlertRule\", new()\n    {\n        FolderUid = ruleFolder.Uid,\n        IntervalSeconds = 240,\n        OrgId = 1,\n        Rules = new[]\n        {\n            new Grafana.Inputs.RuleGroupRuleArgs\n            {\n                Name = \"My Alert Rule 1\",\n                For = \"2m\",\n                Condition = \"B\",\n                NoDataState = \"NoData\",\n                ExecErrState = \"Alerting\",\n                Annotations = \n                {\n                    { \"a\", \"b\" },\n                    { \"c\", \"d\" },\n                },\n                Labels = \n                {\n                    { \"e\", \"f\" },\n                    { \"g\", \"h\" },\n                },\n                Datas = new[]\n                {\n                    new Grafana.Inputs.RuleGroupRuleDataArgs\n                    {\n                        RefId = \"A\",\n                        QueryType = \"\",\n                        RelativeTimeRange = new Grafana.Inputs.RuleGroupRuleDataRelativeTimeRangeArgs\n                        {\n                            From = 600,\n                            To = 0,\n                        },\n                        DatasourceUid = \"PD8C576611E62080A\",\n                        Model = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"hide\"] = false,\n                            [\"intervalMs\"] = 1000,\n                            [\"maxDataPoints\"] = 43200,\n                            [\"refId\"] = \"A\",\n                        }),\n                    },\n                    new Grafana.Inputs.RuleGroupRuleDataArgs\n                    {\n                        RefId = \"B\",\n                        QueryType = \"\",\n                        RelativeTimeRange = new Grafana.Inputs.RuleGroupRuleDataRelativeTimeRangeArgs\n                        {\n                            From = 0,\n                            To = 0,\n                        },\n                        DatasourceUid = \"-100\",\n                        Model = @\"{\n    \"\"conditions\"\": [\n        {\n        \"\"evaluator\"\": {\n            \"\"params\"\": [\n            3\n            ],\n            \"\"type\"\": \"\"gt\"\"\n        },\n        \"\"operator\"\": {\n            \"\"type\"\": \"\"and\"\"\n        },\n        \"\"query\"\": {\n            \"\"params\"\": [\n            \"\"A\"\"\n            ]\n        },\n        \"\"reducer\"\": {\n            \"\"params\"\": [],\n            \"\"type\"\": \"\"last\"\"\n        },\n        \"\"type\"\": \"\"query\"\"\n        }\n    ],\n    \"\"datasource\"\": {\n        \"\"type\"\": \"\"__expr__\"\",\n        \"\"uid\"\": \"\"-100\"\"\n    },\n    \"\"hide\"\": false,\n    \"\"intervalMs\"\": 1000,\n    \"\"maxDataPoints\"\": 43200,\n    \"\"refId\"\": \"\"B\"\",\n    \"\"type\"\": \"\"classic_conditions\"\"\n}\n\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\truleFolder, err := grafana.NewFolder(ctx, \"ruleFolder\", \u0026grafana.FolderArgs{\n\t\t\tTitle: pulumi.String(\"My Alert Rule Folder\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"hide\":          false,\n\t\t\t\"intervalMs\":    1000,\n\t\t\t\"maxDataPoints\": 43200,\n\t\t\t\"refId\":         \"A\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = grafana.NewRuleGroup(ctx, \"myAlertRule\", \u0026grafana.RuleGroupArgs{\n\t\t\tFolderUid:       ruleFolder.Uid,\n\t\t\tIntervalSeconds: pulumi.Int(240),\n\t\t\tOrgId:           pulumi.Int(1),\n\t\t\tRules: grafana.RuleGroupRuleArray{\n\t\t\t\t\u0026grafana.RuleGroupRuleArgs{\n\t\t\t\t\tName:         pulumi.String(\"My Alert Rule 1\"),\n\t\t\t\t\tFor:          pulumi.String(\"2m\"),\n\t\t\t\t\tCondition:    pulumi.String(\"B\"),\n\t\t\t\t\tNoDataState:  pulumi.String(\"NoData\"),\n\t\t\t\t\tExecErrState: pulumi.String(\"Alerting\"),\n\t\t\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\t\t\"a\": pulumi.String(\"b\"),\n\t\t\t\t\t\t\"c\": pulumi.String(\"d\"),\n\t\t\t\t\t},\n\t\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\t\"e\": pulumi.String(\"f\"),\n\t\t\t\t\t\t\"g\": pulumi.String(\"h\"),\n\t\t\t\t\t},\n\t\t\t\t\tDatas: grafana.RuleGroupRuleDataArray{\n\t\t\t\t\t\t\u0026grafana.RuleGroupRuleDataArgs{\n\t\t\t\t\t\t\tRefId:     pulumi.String(\"A\"),\n\t\t\t\t\t\t\tQueryType: pulumi.String(\"\"),\n\t\t\t\t\t\t\tRelativeTimeRange: \u0026grafana.RuleGroupRuleDataRelativeTimeRangeArgs{\n\t\t\t\t\t\t\t\tFrom: pulumi.Int(600),\n\t\t\t\t\t\t\t\tTo:   pulumi.Int(0),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDatasourceUid: pulumi.String(\"PD8C576611E62080A\"),\n\t\t\t\t\t\t\tModel:         pulumi.String(json0),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026grafana.RuleGroupRuleDataArgs{\n\t\t\t\t\t\t\tRefId:     pulumi.String(\"B\"),\n\t\t\t\t\t\t\tQueryType: pulumi.String(\"\"),\n\t\t\t\t\t\t\tRelativeTimeRange: \u0026grafana.RuleGroupRuleDataRelativeTimeRangeArgs{\n\t\t\t\t\t\t\t\tFrom: pulumi.Int(0),\n\t\t\t\t\t\t\t\tTo:   pulumi.Int(0),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDatasourceUid: pulumi.String(\"-100\"),\n\t\t\t\t\t\t\tModel: pulumi.String(fmt.Sprintf(`{\n    \"conditions\": [\n        {\n        \"evaluator\": {\n            \"params\": [\n            3\n            ],\n            \"type\": \"gt\"\n        },\n        \"operator\": {\n            \"type\": \"and\"\n        },\n        \"query\": {\n            \"params\": [\n            \"A\"\n            ]\n        },\n        \"reducer\": {\n            \"params\": [],\n            \"type\": \"last\"\n        },\n        \"type\": \"query\"\n        }\n    ],\n    \"datasource\": {\n        \"type\": \"__expr__\",\n        \"uid\": \"-100\"\n    },\n    \"hide\": false,\n    \"intervalMs\": 1000,\n    \"maxDataPoints\": 43200,\n    \"refId\": \"B\",\n    \"type\": \"classic_conditions\"\n}\n`)),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Folder;\nimport com.pulumi.grafana.FolderArgs;\nimport com.pulumi.grafana.RuleGroup;\nimport com.pulumi.grafana.RuleGroupArgs;\nimport com.pulumi.grafana.inputs.RuleGroupRuleArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ruleFolder = new Folder(\"ruleFolder\", FolderArgs.builder()        \n            .title(\"My Alert Rule Folder\")\n            .build());\n\n        var myAlertRule = new RuleGroup(\"myAlertRule\", RuleGroupArgs.builder()        \n            .folderUid(ruleFolder.uid())\n            .intervalSeconds(240)\n            .orgId(1)\n            .rules(RuleGroupRuleArgs.builder()\n                .name(\"My Alert Rule 1\")\n                .for_(\"2m\")\n                .condition(\"B\")\n                .noDataState(\"NoData\")\n                .execErrState(\"Alerting\")\n                .annotations(Map.ofEntries(\n                    Map.entry(\"a\", \"b\"),\n                    Map.entry(\"c\", \"d\")\n                ))\n                .labels(Map.ofEntries(\n                    Map.entry(\"e\", \"f\"),\n                    Map.entry(\"g\", \"h\")\n                ))\n                .datas(                \n                    RuleGroupRuleDataArgs.builder()\n                        .refId(\"A\")\n                        .queryType(\"\")\n                        .relativeTimeRange(RuleGroupRuleDataRelativeTimeRangeArgs.builder()\n                            .from(600)\n                            .to(0)\n                            .build())\n                        .datasourceUid(\"PD8C576611E62080A\")\n                        .model(serializeJson(\n                            jsonObject(\n                                jsonProperty(\"hide\", false),\n                                jsonProperty(\"intervalMs\", 1000),\n                                jsonProperty(\"maxDataPoints\", 43200),\n                                jsonProperty(\"refId\", \"A\")\n                            )))\n                        .build(),\n                    RuleGroupRuleDataArgs.builder()\n                        .refId(\"B\")\n                        .queryType(\"\")\n                        .relativeTimeRange(RuleGroupRuleDataRelativeTimeRangeArgs.builder()\n                            .from(0)\n                            .to(0)\n                            .build())\n                        .datasourceUid(\"-100\")\n                        .model(\"\"\"\n{\n    \"conditions\": [\n        {\n        \"evaluator\": {\n            \"params\": [\n            3\n            ],\n            \"type\": \"gt\"\n        },\n        \"operator\": {\n            \"type\": \"and\"\n        },\n        \"query\": {\n            \"params\": [\n            \"A\"\n            ]\n        },\n        \"reducer\": {\n            \"params\": [],\n            \"type\": \"last\"\n        },\n        \"type\": \"query\"\n        }\n    ],\n    \"datasource\": {\n        \"type\": \"__expr__\",\n        \"uid\": \"-100\"\n    },\n    \"hide\": false,\n    \"intervalMs\": 1000,\n    \"maxDataPoints\": 43200,\n    \"refId\": \"B\",\n    \"type\": \"classic_conditions\"\n}\n                        \"\"\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ruleFolder:\n    type: grafana:Folder\n    properties:\n      title: My Alert Rule Folder\n  myAlertRule:\n    type: grafana:RuleGroup\n    properties:\n      folderUid: ${ruleFolder.uid}\n      intervalSeconds: 240\n      orgId: 1\n      rules:\n        - name: My Alert Rule 1\n          for: 2m\n          condition: B\n          noDataState: NoData\n          execErrState: Alerting\n          annotations:\n            a: b\n            c: d\n          labels:\n            e: f\n            g: h\n          datas:\n            - refId: A\n              queryType:\n              relativeTimeRange:\n                from: 600\n                to: 0\n              datasourceUid: PD8C576611E62080A\n              model:\n                fn::toJSON:\n                  hide: false\n                  intervalMs: 1000\n                  maxDataPoints: 43200\n                  refId: A\n            - refId: B\n              queryType:\n              relativeTimeRange:\n                from: 0\n                to: 0\n              datasourceUid: '-100'\n              model: |\n                {\n                    \"conditions\": [\n                        {\n                        \"evaluator\": {\n                            \"params\": [\n                            3\n                            ],\n                            \"type\": \"gt\"\n                        },\n                        \"operator\": {\n                            \"type\": \"and\"\n                        },\n                        \"query\": {\n                            \"params\": [\n                            \"A\"\n                            ]\n                        },\n                        \"reducer\": {\n                            \"params\": [],\n                            \"type\": \"last\"\n                        },\n                        \"type\": \"query\"\n                        }\n                    ],\n                    \"datasource\": {\n                        \"type\": \"__expr__\",\n                        \"uid\": \"-100\"\n                    },\n                    \"hide\": false,\n                    \"intervalMs\": 1000,\n                    \"maxDataPoints\": 43200,\n                    \"refId\": \"B\",\n                    \"type\": \"classic_conditions\"\n                }\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/ruleGroup:RuleGroup rule_group_name {{folder_uid}};{{rule_group_name}}\n```\n\n ",
            "properties": {
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder that the group belongs to.\n"
                },
                "intervalSeconds": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule group.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "The ID of the org to which the group belongs.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RuleGroupRule:RuleGroupRule"
                    },
                    "description": "The rules within the group.\n"
                }
            },
            "required": [
                "folderUid",
                "intervalSeconds",
                "name",
                "orgId",
                "rules"
            ],
            "inputProperties": {
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder that the group belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "intervalSeconds": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule group.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "integer",
                    "description": "The ID of the org to which the group belongs.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RuleGroupRule:RuleGroupRule"
                    },
                    "description": "The rules within the group.\n"
                }
            },
            "requiredInputs": [
                "folderUid",
                "intervalSeconds",
                "orgId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleGroup resources.\n",
                "properties": {
                    "folderUid": {
                        "type": "string",
                        "description": "The UID of the folder that the group belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "intervalSeconds": {
                        "type": "integer",
                        "description": "The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule group.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "The ID of the org to which the group belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/RuleGroupRule:RuleGroupRule"
                        },
                        "description": "The rules within the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/serviceAccount:ServiceAccount": {
            "description": "**Note:** This resource is available only with Grafana 9.1+.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst admin = new grafana.ServiceAccount(\"admin\", {\n    isDisabled: false,\n    role: \"Admin\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nadmin = grafana.ServiceAccount(\"admin\",\n    is_disabled=False,\n    role=\"Admin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = new Grafana.ServiceAccount(\"admin\", new()\n    {\n        IsDisabled = false,\n        Role = \"Admin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewServiceAccount(ctx, \"admin\", \u0026grafana.ServiceAccountArgs{\n\t\t\tIsDisabled: pulumi.Bool(false),\n\t\t\tRole:       pulumi.String(\"Admin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.ServiceAccount;\nimport com.pulumi.grafana.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var admin = new ServiceAccount(\"admin\", ServiceAccountArgs.builder()        \n            .isDisabled(false)\n            .role(\"Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: grafana:ServiceAccount\n    properties:\n      isDisabled: false\n      role: Admin\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "isDisabled": {
                    "type": "boolean",
                    "description": "The disabled status for the service account. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The basic role of the service account in the organization.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "isDisabled": {
                    "type": "boolean",
                    "description": "The disabled status for the service account. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The basic role of the service account in the organization.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "isDisabled": {
                        "type": "boolean",
                        "description": "The disabled status for the service account. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service account.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The basic role of the service account in the organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/serviceAccountPermission:ServiceAccountPermission": {
            "description": "**Note:** This resource is available from Grafana 9.2.4 onwards.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/#manage-users-and-teams-permissions-for-a-service-account-in-grafana)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test = new grafana.ServiceAccount(\"test\", {\n    role: \"Editor\",\n    isDisabled: false,\n});\nconst testTeam = new grafana.Team(\"testTeam\", {});\nconst testUser = new grafana.User(\"testUser\", {\n    email: \"tf_user@test.com\",\n    login: \"tf_user@test.com\",\n    password: \"password\",\n});\nconst testPermissions = new grafana.ServiceAccountPermission(\"testPermissions\", {\n    serviceAccountId: test.id,\n    permissions: [\n        {\n            userId: testUser.id,\n            permission: \"Edit\",\n        },\n        {\n            teamId: testTeam.id,\n            permission: \"Admin\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest = grafana.ServiceAccount(\"test\",\n    role=\"Editor\",\n    is_disabled=False)\ntest_team = grafana.Team(\"testTeam\")\ntest_user = grafana.User(\"testUser\",\n    email=\"tf_user@test.com\",\n    login=\"tf_user@test.com\",\n    password=\"password\")\ntest_permissions = grafana.ServiceAccountPermission(\"testPermissions\",\n    service_account_id=test.id,\n    permissions=[\n        grafana.ServiceAccountPermissionPermissionArgs(\n            user_id=test_user.id,\n            permission=\"Edit\",\n        ),\n        grafana.ServiceAccountPermissionPermissionArgs(\n            team_id=test_team.id,\n            permission=\"Admin\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.ServiceAccount(\"test\", new()\n    {\n        Role = \"Editor\",\n        IsDisabled = false,\n    });\n\n    var testTeam = new Grafana.Team(\"testTeam\");\n\n    var testUser = new Grafana.User(\"testUser\", new()\n    {\n        Email = \"tf_user@test.com\",\n        Login = \"tf_user@test.com\",\n        Password = \"password\",\n    });\n\n    var testPermissions = new Grafana.ServiceAccountPermission(\"testPermissions\", new()\n    {\n        ServiceAccountId = test.Id,\n        Permissions = new[]\n        {\n            new Grafana.Inputs.ServiceAccountPermissionPermissionArgs\n            {\n                UserId = testUser.Id,\n                Permission = \"Edit\",\n            },\n            new Grafana.Inputs.ServiceAccountPermissionPermissionArgs\n            {\n                TeamId = testTeam.Id,\n                Permission = \"Admin\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := grafana.NewServiceAccount(ctx, \"test\", \u0026grafana.ServiceAccountArgs{\n\t\t\tRole:       pulumi.String(\"Editor\"),\n\t\t\tIsDisabled: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestTeam, err := grafana.NewTeam(ctx, \"testTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestUser, err := grafana.NewUser(ctx, \"testUser\", \u0026grafana.UserArgs{\n\t\t\tEmail:    pulumi.String(\"tf_user@test.com\"),\n\t\t\tLogin:    pulumi.String(\"tf_user@test.com\"),\n\t\t\tPassword: pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewServiceAccountPermission(ctx, \"testPermissions\", \u0026grafana.ServiceAccountPermissionArgs{\n\t\t\tServiceAccountId: test.ID(),\n\t\t\tPermissions: grafana.ServiceAccountPermissionPermissionArray{\n\t\t\t\t\u0026grafana.ServiceAccountPermissionPermissionArgs{\n\t\t\t\t\tUserId:     testUser.ID(),\n\t\t\t\t\tPermission: pulumi.String(\"Edit\"),\n\t\t\t\t},\n\t\t\t\t\u0026grafana.ServiceAccountPermissionPermissionArgs{\n\t\t\t\t\tTeamId:     testTeam.ID(),\n\t\t\t\t\tPermission: pulumi.String(\"Admin\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.ServiceAccount;\nimport com.pulumi.grafana.ServiceAccountArgs;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.User;\nimport com.pulumi.grafana.UserArgs;\nimport com.pulumi.grafana.ServiceAccountPermission;\nimport com.pulumi.grafana.ServiceAccountPermissionArgs;\nimport com.pulumi.grafana.inputs.ServiceAccountPermissionPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ServiceAccount(\"test\", ServiceAccountArgs.builder()        \n            .role(\"Editor\")\n            .isDisabled(false)\n            .build());\n\n        var testTeam = new Team(\"testTeam\");\n\n        var testUser = new User(\"testUser\", UserArgs.builder()        \n            .email(\"tf_user@test.com\")\n            .login(\"tf_user@test.com\")\n            .password(\"password\")\n            .build());\n\n        var testPermissions = new ServiceAccountPermission(\"testPermissions\", ServiceAccountPermissionArgs.builder()        \n            .serviceAccountId(test.id())\n            .permissions(            \n                ServiceAccountPermissionPermissionArgs.builder()\n                    .userId(testUser.id())\n                    .permission(\"Edit\")\n                    .build(),\n                ServiceAccountPermissionPermissionArgs.builder()\n                    .teamId(testTeam.id())\n                    .permission(\"Admin\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:ServiceAccount\n    properties:\n      role: Editor\n      isDisabled: false\n  testTeam:\n    type: grafana:Team\n  testUser:\n    type: grafana:User\n    properties:\n      email: tf_user@test.com\n      login: tf_user@test.com\n      password: password\n  testPermissions:\n    type: grafana:ServiceAccountPermission\n    properties:\n      serviceAccountId: ${test.id}\n      permissions:\n        - userId: ${testUser.id}\n          permission: Edit\n        - teamId: ${testTeam.id}\n          permission: Admin\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                },
                "serviceAccountId": {
                    "type": "integer",
                    "description": "The id of the service account.\n"
                }
            },
            "required": [
                "permissions",
                "serviceAccountId"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                },
                "serviceAccountId": {
                    "type": "integer",
                    "description": "The id of the service account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions",
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountPermission resources.\n",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    },
                    "serviceAccountId": {
                        "type": "integer",
                        "description": "The id of the service account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/serviceAccountToken:ServiceAccountToken": {
            "description": "**Note:** This resource is available only with Grafana 9.1+.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst foo = new grafana.ServiceAccountToken(\"foo\", {serviceAccountId: 1});\nconst bar = new grafana.ServiceAccountToken(\"bar\", {\n    serviceAccountId: 1,\n    secondsToLive: 30,\n});\nexport const serviceAccountTokenFooKeyOnly = foo.key;\nexport const serviceAccountTokenBar = bar;\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nfoo = grafana.ServiceAccountToken(\"foo\", service_account_id=1)\nbar = grafana.ServiceAccountToken(\"bar\",\n    service_account_id=1,\n    seconds_to_live=30)\npulumi.export(\"serviceAccountTokenFooKeyOnly\", foo.key)\npulumi.export(\"serviceAccountTokenBar\", bar)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Grafana.ServiceAccountToken(\"foo\", new()\n    {\n        ServiceAccountId = 1,\n    });\n\n    var bar = new Grafana.ServiceAccountToken(\"bar\", new()\n    {\n        ServiceAccountId = 1,\n        SecondsToLive = 30,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceAccountTokenFooKeyOnly\"] = foo.Key,\n        [\"serviceAccountTokenBar\"] = bar,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := grafana.NewServiceAccountToken(ctx, \"foo\", \u0026grafana.ServiceAccountTokenArgs{\n\t\t\tServiceAccountId: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := grafana.NewServiceAccountToken(ctx, \"bar\", \u0026grafana.ServiceAccountTokenArgs{\n\t\t\tServiceAccountId: pulumi.Int(1),\n\t\t\tSecondsToLive:    pulumi.Int(30),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceAccountTokenFooKeyOnly\", foo.Key)\n\t\tctx.Export(\"serviceAccountTokenBar\", bar)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.ServiceAccountToken;\nimport com.pulumi.grafana.ServiceAccountTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ServiceAccountToken(\"foo\", ServiceAccountTokenArgs.builder()        \n            .serviceAccountId(1)\n            .build());\n\n        var bar = new ServiceAccountToken(\"bar\", ServiceAccountTokenArgs.builder()        \n            .serviceAccountId(1)\n            .secondsToLive(30)\n            .build());\n\n        ctx.export(\"serviceAccountTokenFooKeyOnly\", foo.key());\n        ctx.export(\"serviceAccountTokenBar\", bar);\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: grafana:ServiceAccountToken\n    properties:\n      serviceAccountId: 1\n  bar:\n    type: grafana:ServiceAccountToken\n    properties:\n      serviceAccountId: 1\n      secondsToLive: 30\noutputs:\n  serviceAccountTokenFooKeyOnly: ${foo.key}\n  serviceAccountTokenBar: ${bar}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "hasExpired": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "name": {
                    "type": "string"
                },
                "secondsToLive": {
                    "type": "integer"
                },
                "serviceAccountId": {
                    "type": "integer"
                }
            },
            "required": [
                "expiration",
                "hasExpired",
                "key",
                "name",
                "serviceAccountId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "secondsToLive": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "serviceAccountId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountToken resources.\n",
                "properties": {
                    "expiration": {
                        "type": "string"
                    },
                    "hasExpired": {
                        "type": "boolean"
                    },
                    "key": {
                        "type": "string",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "secondsToLive": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccountId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck": {
            "description": "Synthetic Monitoring checks are tests that run on selected probes at defined\nintervals and report metrics and logs back to your Grafana Cloud account. The\ntarget for checks can be a domain name, a server, or a website, depending on\nwhat information you would like to gather about your endpoint. You can define\nmultiple checks for a single endpoint to check different capabilities.\n\n* [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/checks/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### DNS Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst dns = new grafana.SyntheticMonitoringCheck(\"dns\", {\n    job: \"DNS Defaults\",\n    target: \"grafana.com\",\n    enabled: false,\n    probes: [main.then(main =\u003e main.probes?.Atlanta)],\n    labels: {\n        foo: \"bar\",\n    },\n    settings: {\n        dns: {},\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var dns = new Grafana.SyntheticMonitoringCheck(\"dns\", new()\n    {\n        Job = \"DNS Defaults\",\n        Target = \"grafana.com\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Atlanta),\n        },\n        Labels = \n        {\n            { \"foo\", \"bar\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Dns = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"dns\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"DNS Defaults\"),\n\t\t\tTarget:  pulumi.String(\"grafana.com\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Atlanta),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tDns: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var dns = new SyntheticMonitoringCheck(\"dns\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"DNS Defaults\")\n            .target(\"grafana.com\")\n            .enabled(false)\n            .probes(main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Atlanta()))\n            .labels(Map.of(\"foo\", \"bar\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .dns()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dns:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: DNS Defaults\n      target: grafana.com\n      enabled: false\n      probes:\n        - ${main.probes.Atlanta}\n      labels:\n        foo: bar\n      settings:\n        dns: {}\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### DNS Complex\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst dns = new grafana.SyntheticMonitoringCheck(\"dns\", {\n    job: \"DNS Updated\",\n    target: \"grafana.net\",\n    enabled: false,\n    probes: [\n        main.then(main =\u003e main.probes?.Frankfurt),\n        main.then(main =\u003e main.probes?.London),\n    ],\n    labels: {\n        foo: \"baz\",\n    },\n    settings: {\n        dns: {\n            ipVersion: \"Any\",\n            server: \"8.8.4.4\",\n            port: 8600,\n            recordType: \"CNAME\",\n            protocol: \"TCP\",\n            validRCodes: [\n                \"NOERROR\",\n                \"NOTAUTH\",\n            ],\n            validateAnswerRrs: {\n                failIfMatchesRegexps: [\".+-bad-stuff*\"],\n                failIfNotMatchesRegexps: [\".+-good-stuff*\"],\n            },\n            validateAuthorityRrs: {\n                failIfMatchesRegexps: [\".+-bad-stuff*\"],\n                failIfNotMatchesRegexps: [\".+-good-stuff*\"],\n            },\n            validateAdditionalRrs: [{\n                failIfMatchesRegexps: [\".+-bad-stuff*\"],\n                failIfNotMatchesRegexps: [\".+-good-stuff*\"],\n            }],\n        },\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var dns = new Grafana.SyntheticMonitoringCheck(\"dns\", new()\n    {\n        Job = \"DNS Updated\",\n        Target = \"grafana.net\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Frankfurt),\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.London),\n        },\n        Labels = \n        {\n            { \"foo\", \"baz\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Dns = new Grafana.Inputs.SyntheticMonitoringCheckSettingsDnsArgs\n            {\n                IpVersion = \"Any\",\n                Server = \"8.8.4.4\",\n                Port = 8600,\n                RecordType = \"CNAME\",\n                Protocol = \"TCP\",\n                ValidRCodes = new[]\n                {\n                    \"NOERROR\",\n                    \"NOTAUTH\",\n                },\n                ValidateAnswerRrs = new Grafana.Inputs.SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs\n                {\n                    FailIfMatchesRegexps = new[]\n                    {\n                        \".+-bad-stuff*\",\n                    },\n                    FailIfNotMatchesRegexps = new[]\n                    {\n                        \".+-good-stuff*\",\n                    },\n                },\n                ValidateAuthorityRrs = new Grafana.Inputs.SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs\n                {\n                    FailIfMatchesRegexps = new[]\n                    {\n                        \".+-bad-stuff*\",\n                    },\n                    FailIfNotMatchesRegexps = new[]\n                    {\n                        \".+-good-stuff*\",\n                    },\n                },\n                ValidateAdditionalRrs = new[]\n                {\n                    new Grafana.Inputs.SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs\n                    {\n                        FailIfMatchesRegexps = new[]\n                        {\n                            \".+-bad-stuff*\",\n                        },\n                        FailIfNotMatchesRegexps = new[]\n                        {\n                            \".+-good-stuff*\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"dns\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"DNS Updated\"),\n\t\t\tTarget:  pulumi.String(\"grafana.net\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Frankfurt),\n\t\t\t\t*pulumi.Int(main.Probes.London),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"baz\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tDns: \u0026grafana.SyntheticMonitoringCheckSettingsDnsArgs{\n\t\t\t\t\tIpVersion:  pulumi.String(\"Any\"),\n\t\t\t\t\tServer:     pulumi.String(\"8.8.4.4\"),\n\t\t\t\t\tPort:       pulumi.Int(8600),\n\t\t\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\t\t\tProtocol:   pulumi.String(\"TCP\"),\n\t\t\t\t\tValidRCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"NOERROR\"),\n\t\t\t\t\t\tpulumi.String(\"NOTAUTH\"),\n\t\t\t\t\t},\n\t\t\t\t\tValidateAnswerRrs: \u0026grafana.SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{\n\t\t\t\t\t\tFailIfMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\".+-bad-stuff*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tFailIfNotMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\".+-good-stuff*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tValidateAuthorityRrs: \u0026grafana.SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{\n\t\t\t\t\t\tFailIfMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\".+-bad-stuff*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tFailIfNotMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\".+-good-stuff*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tValidateAdditionalRrs: grafana.SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray{\n\t\t\t\t\t\t\u0026grafana.SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{\n\t\t\t\t\t\t\tFailIfMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\".+-bad-stuff*\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFailIfNotMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\".+-good-stuff*\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var dns = new SyntheticMonitoringCheck(\"dns\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"DNS Updated\")\n            .target(\"grafana.net\")\n            .enabled(false)\n            .probes(            \n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Frankfurt()),\n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().London()))\n            .labels(Map.of(\"foo\", \"baz\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .dns(SyntheticMonitoringCheckSettingsDnsArgs.builder()\n                    .ipVersion(\"Any\")\n                    .server(\"8.8.4.4\")\n                    .port(8600)\n                    .recordType(\"CNAME\")\n                    .protocol(\"TCP\")\n                    .validRCodes(                    \n                        \"NOERROR\",\n                        \"NOTAUTH\")\n                    .validateAnswerRrs(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs.builder()\n                        .failIfMatchesRegexps(\".+-bad-stuff*\")\n                        .failIfNotMatchesRegexps(\".+-good-stuff*\")\n                        .build())\n                    .validateAuthorityRrs(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs.builder()\n                        .failIfMatchesRegexps(\".+-bad-stuff*\")\n                        .failIfNotMatchesRegexps(\".+-good-stuff*\")\n                        .build())\n                    .validateAdditionalRrs(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs.builder()\n                        .failIfMatchesRegexps(\".+-bad-stuff*\")\n                        .failIfNotMatchesRegexps(\".+-good-stuff*\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dns:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: DNS Updated\n      target: grafana.net\n      enabled: false\n      probes:\n        - ${main.probes.Frankfurt}\n        - ${main.probes.London}\n      labels:\n        foo: baz\n      settings:\n        dns:\n          ipVersion: Any\n          server: 8.8.4.4\n          port: 8600\n          recordType: CNAME\n          protocol: TCP\n          validRCodes:\n            - NOERROR\n            - NOTAUTH\n          validateAnswerRrs:\n            failIfMatchesRegexps:\n              - .+-bad-stuff*\n            failIfNotMatchesRegexps:\n              - .+-good-stuff*\n          validateAuthorityRrs:\n            failIfMatchesRegexps:\n              - .+-bad-stuff*\n            failIfNotMatchesRegexps:\n              - .+-good-stuff*\n          validateAdditionalRrs:\n            - failIfMatchesRegexps:\n                - .+-bad-stuff*\n              failIfNotMatchesRegexps:\n                - .+-good-stuff*\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### HTTP Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst http = new grafana.SyntheticMonitoringCheck(\"http\", {\n    job: \"HTTP Defaults\",\n    target: \"https://grafana.com\",\n    enabled: false,\n    probes: [main.then(main =\u003e main.probes?.Atlanta)],\n    labels: {\n        foo: \"bar\",\n    },\n    settings: {\n        http: {},\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var http = new Grafana.SyntheticMonitoringCheck(\"http\", new()\n    {\n        Job = \"HTTP Defaults\",\n        Target = \"https://grafana.com\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Atlanta),\n        },\n        Labels = \n        {\n            { \"foo\", \"bar\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Http = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"http\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"HTTP Defaults\"),\n\t\t\tTarget:  pulumi.String(\"https://grafana.com\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Atlanta),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tHttp: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var http = new SyntheticMonitoringCheck(\"http\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"HTTP Defaults\")\n            .target(\"https://grafana.com\")\n            .enabled(false)\n            .probes(main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Atlanta()))\n            .labels(Map.of(\"foo\", \"bar\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .http()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  http:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: HTTP Defaults\n      target: https://grafana.com\n      enabled: false\n      probes:\n        - ${main.probes.Atlanta}\n      labels:\n        foo: bar\n      settings:\n        http: {}\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### HTTP Complex\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst http = new grafana.SyntheticMonitoringCheck(\"http\", {\n    job: \"HTTP Defaults\",\n    target: \"https://grafana.org\",\n    enabled: false,\n    probes: [\n        main.then(main =\u003e main.probes?.Bangalore),\n        main.then(main =\u003e main.probes?.Mumbai),\n    ],\n    labels: {\n        foo: \"bar\",\n    },\n    settings: {\n        http: {\n            ipVersion: \"V6\",\n            method: \"TRACE\",\n            body: \"and spirit\",\n            noFollowRedirects: true,\n            bearerToken: \"asdfjkl;\",\n            proxyUrl: \"https://almost-there\",\n            failIfSsl: true,\n            failIfNotSsl: true,\n            cacheBustingQueryParamName: \"pineapple\",\n            tlsConfig: {\n                serverName: \"grafana.org\",\n                clientCert: `-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n`,\n            },\n            headers: [\"Content-Type: multipart/form-data; boundary=something\"],\n            basicAuth: {\n                username: \"open\",\n                password: \"sesame\",\n            },\n            validStatusCodes: [\n                200,\n                201,\n            ],\n            validHttpVersions: [\n                \"HTTP/1.0\",\n                \"HTTP/1.1\",\n                \"HTTP/2\",\n            ],\n            failIfBodyMatchesRegexps: [\"*bad stuff*\"],\n            failIfBodyNotMatchesRegexps: [\"*good stuff*\"],\n            failIfHeaderMatchesRegexps: [{\n                header: \"Content-Type\",\n                regexp: \"application/soap*\",\n                allowMissing: true,\n            }],\n        },\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var http = new Grafana.SyntheticMonitoringCheck(\"http\", new()\n    {\n        Job = \"HTTP Defaults\",\n        Target = \"https://grafana.org\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Bangalore),\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Mumbai),\n        },\n        Labels = \n        {\n            { \"foo\", \"bar\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Http = new Grafana.Inputs.SyntheticMonitoringCheckSettingsHttpArgs\n            {\n                IpVersion = \"V6\",\n                Method = \"TRACE\",\n                Body = \"and spirit\",\n                NoFollowRedirects = true,\n                BearerToken = \"asdfjkl;\",\n                ProxyUrl = \"https://almost-there\",\n                FailIfSsl = true,\n                FailIfNotSsl = true,\n                CacheBustingQueryParamName = \"pineapple\",\n                TlsConfig = new Grafana.Inputs.SyntheticMonitoringCheckSettingsHttpTlsConfigArgs\n                {\n                    ServerName = \"grafana.org\",\n                    ClientCert = @\"-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n\",\n                },\n                Headers = new[]\n                {\n                    \"Content-Type: multipart/form-data; boundary=something\",\n                },\n                BasicAuth = new Grafana.Inputs.SyntheticMonitoringCheckSettingsHttpBasicAuthArgs\n                {\n                    Username = \"open\",\n                    Password = \"sesame\",\n                },\n                ValidStatusCodes = new[]\n                {\n                    200,\n                    201,\n                },\n                ValidHttpVersions = new[]\n                {\n                    \"HTTP/1.0\",\n                    \"HTTP/1.1\",\n                    \"HTTP/2\",\n                },\n                FailIfBodyMatchesRegexps = new[]\n                {\n                    \"*bad stuff*\",\n                },\n                FailIfBodyNotMatchesRegexps = new[]\n                {\n                    \"*good stuff*\",\n                },\n                FailIfHeaderMatchesRegexps = new[]\n                {\n                    new Grafana.Inputs.SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs\n                    {\n                        Header = \"Content-Type\",\n                        Regexp = \"application/soap*\",\n                        AllowMissing = true,\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"http\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"HTTP Defaults\"),\n\t\t\tTarget:  pulumi.String(\"https://grafana.org\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Bangalore),\n\t\t\t\t*pulumi.Int(main.Probes.Mumbai),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tHttp: \u0026grafana.SyntheticMonitoringCheckSettingsHttpArgs{\n\t\t\t\t\tIpVersion:                  pulumi.String(\"V6\"),\n\t\t\t\t\tMethod:                     pulumi.String(\"TRACE\"),\n\t\t\t\t\tBody:                       pulumi.String(\"and spirit\"),\n\t\t\t\t\tNoFollowRedirects:          pulumi.Bool(true),\n\t\t\t\t\tBearerToken:                pulumi.String(\"asdfjkl;\"),\n\t\t\t\t\tProxyUrl:                   pulumi.String(\"https://almost-there\"),\n\t\t\t\t\tFailIfSsl:                  pulumi.Bool(true),\n\t\t\t\t\tFailIfNotSsl:               pulumi.Bool(true),\n\t\t\t\t\tCacheBustingQueryParamName: pulumi.String(\"pineapple\"),\n\t\t\t\t\tTlsConfig: \u0026grafana.SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{\n\t\t\t\t\t\tServerName: pulumi.String(\"grafana.org\"),\n\t\t\t\t\t\tClientCert: pulumi.String(fmt.Sprintf(`-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n`)),\n\t\t\t\t\t},\n\t\t\t\t\tHeaders: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Content-Type: multipart/form-data; boundary=something\"),\n\t\t\t\t\t},\n\t\t\t\t\tBasicAuth: \u0026grafana.SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{\n\t\t\t\t\t\tUsername: pulumi.String(\"open\"),\n\t\t\t\t\t\tPassword: pulumi.String(\"sesame\"),\n\t\t\t\t\t},\n\t\t\t\t\tValidStatusCodes: pulumi.IntArray{\n\t\t\t\t\t\tpulumi.Int(200),\n\t\t\t\t\t\tpulumi.Int(201),\n\t\t\t\t\t},\n\t\t\t\t\tValidHttpVersions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"HTTP/1.0\"),\n\t\t\t\t\t\tpulumi.String(\"HTTP/1.1\"),\n\t\t\t\t\t\tpulumi.String(\"HTTP/2\"),\n\t\t\t\t\t},\n\t\t\t\t\tFailIfBodyMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*bad stuff*\"),\n\t\t\t\t\t},\n\t\t\t\t\tFailIfBodyNotMatchesRegexps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*good stuff*\"),\n\t\t\t\t\t},\n\t\t\t\t\tFailIfHeaderMatchesRegexps: grafana.SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray{\n\t\t\t\t\t\t\u0026grafana.SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{\n\t\t\t\t\t\t\tHeader:       pulumi.String(\"Content-Type\"),\n\t\t\t\t\t\t\tRegexp:       pulumi.String(\"application/soap*\"),\n\t\t\t\t\t\t\tAllowMissing: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpTlsConfigArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsHttpBasicAuthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var http = new SyntheticMonitoringCheck(\"http\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"HTTP Defaults\")\n            .target(\"https://grafana.org\")\n            .enabled(false)\n            .probes(            \n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Bangalore()),\n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Mumbai()))\n            .labels(Map.of(\"foo\", \"bar\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .http(SyntheticMonitoringCheckSettingsHttpArgs.builder()\n                    .ipVersion(\"V6\")\n                    .method(\"TRACE\")\n                    .body(\"and spirit\")\n                    .noFollowRedirects(true)\n                    .bearerToken(\"asdfjkl;\")\n                    .proxyUrl(\"https://almost-there\")\n                    .failIfSsl(true)\n                    .failIfNotSsl(true)\n                    .cacheBustingQueryParamName(\"pineapple\")\n                    .tlsConfig(SyntheticMonitoringCheckSettingsHttpTlsConfigArgs.builder()\n                        .serverName(\"grafana.org\")\n                        .clientCert(\"\"\"\n-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n                        \"\"\")\n                        .build())\n                    .headers(\"Content-Type: multipart/form-data; boundary=something\")\n                    .basicAuth(SyntheticMonitoringCheckSettingsHttpBasicAuthArgs.builder()\n                        .username(\"open\")\n                        .password(\"sesame\")\n                        .build())\n                    .validStatusCodes(                    \n                        200,\n                        201)\n                    .validHttpVersions(                    \n                        \"HTTP/1.0\",\n                        \"HTTP/1.1\",\n                        \"HTTP/2\")\n                    .failIfBodyMatchesRegexps(\"*bad stuff*\")\n                    .failIfBodyNotMatchesRegexps(\"*good stuff*\")\n                    .failIfHeaderMatchesRegexps(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs.builder()\n                        .header(\"Content-Type\")\n                        .regexp(\"application/soap*\")\n                        .allowMissing(true)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  http:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: HTTP Defaults\n      target: https://grafana.org\n      enabled: false\n      probes:\n        - ${main.probes.Bangalore}\n        - ${main.probes.Mumbai}\n      labels:\n        foo: bar\n      settings:\n        http:\n          ipVersion: V6\n          method: TRACE\n          body: and spirit\n          noFollowRedirects: true\n          bearerToken: asdfjkl;\n          proxyUrl: https://almost-there\n          failIfSsl: true\n          failIfNotSsl: true\n          cacheBustingQueryParamName: pineapple\n          tlsConfig:\n            serverName: grafana.org\n            clientCert: |\n              -----BEGIN CERTIFICATE-----\n              MIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\n              RTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\n              MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n              0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\n              h1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\n              BN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\n              iDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\n              a+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\n              FWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\n              qq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\n              FTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\n              Z18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n              6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\n              UV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\n              yzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\n              e2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\n              XeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\n              tqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\n              QxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\n              tf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\n              prulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n              5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\n              l3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n              7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\n              vuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n              -----END CERTIFICATE-----\n          headers:\n            - 'Content-Type: multipart/form-data; boundary=something'\n          basicAuth:\n            username: open\n            password: sesame\n          validStatusCodes:\n            - 200\n            - 201\n          validHttpVersions:\n            - HTTP/1.0\n            - HTTP/1.1\n            - HTTP/2\n          failIfBodyMatchesRegexps:\n            - '*bad stuff*'\n          failIfBodyNotMatchesRegexps:\n            - '*good stuff*'\n          failIfHeaderMatchesRegexps:\n            - header: Content-Type\n              regexp: application/soap*\n              allowMissing: true\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### Ping Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst ping = new grafana.SyntheticMonitoringCheck(\"ping\", {\n    job: \"Ping Defaults\",\n    target: \"grafana.com\",\n    enabled: false,\n    probes: [main.then(main =\u003e main.probes?.Atlanta)],\n    labels: {\n        foo: \"bar\",\n    },\n    settings: {\n        ping: {},\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var ping = new Grafana.SyntheticMonitoringCheck(\"ping\", new()\n    {\n        Job = \"Ping Defaults\",\n        Target = \"grafana.com\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Atlanta),\n        },\n        Labels = \n        {\n            { \"foo\", \"bar\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Ping = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"ping\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"Ping Defaults\"),\n\t\t\tTarget:  pulumi.String(\"grafana.com\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Atlanta),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tPing: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsPingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var ping = new SyntheticMonitoringCheck(\"ping\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"Ping Defaults\")\n            .target(\"grafana.com\")\n            .enabled(false)\n            .probes(main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Atlanta()))\n            .labels(Map.of(\"foo\", \"bar\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .ping()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ping:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: Ping Defaults\n      target: grafana.com\n      enabled: false\n      probes:\n        - ${main.probes.Atlanta}\n      labels:\n        foo: bar\n      settings:\n        ping: {}\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### Ping Complex\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst ping = new grafana.SyntheticMonitoringCheck(\"ping\", {\n    job: \"Ping Updated\",\n    target: \"grafana.net\",\n    enabled: false,\n    probes: [\n        main.then(main =\u003e main.probes?.Frankfurt),\n        main.then(main =\u003e main.probes?.London),\n    ],\n    labels: {\n        foo: \"baz\",\n    },\n    settings: {\n        ping: {\n            ipVersion: \"Any\",\n            payloadSize: 20,\n            dontFragment: true,\n        },\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var ping = new Grafana.SyntheticMonitoringCheck(\"ping\", new()\n    {\n        Job = \"Ping Updated\",\n        Target = \"grafana.net\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Frankfurt),\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.London),\n        },\n        Labels = \n        {\n            { \"foo\", \"baz\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Ping = new Grafana.Inputs.SyntheticMonitoringCheckSettingsPingArgs\n            {\n                IpVersion = \"Any\",\n                PayloadSize = 20,\n                DontFragment = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"ping\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"Ping Updated\"),\n\t\t\tTarget:  pulumi.String(\"grafana.net\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Frankfurt),\n\t\t\t\t*pulumi.Int(main.Probes.London),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"baz\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tPing: \u0026grafana.SyntheticMonitoringCheckSettingsPingArgs{\n\t\t\t\t\tIpVersion:    pulumi.String(\"Any\"),\n\t\t\t\t\tPayloadSize:  pulumi.Int(20),\n\t\t\t\t\tDontFragment: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsPingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var ping = new SyntheticMonitoringCheck(\"ping\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"Ping Updated\")\n            .target(\"grafana.net\")\n            .enabled(false)\n            .probes(            \n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Frankfurt()),\n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().London()))\n            .labels(Map.of(\"foo\", \"baz\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .ping(SyntheticMonitoringCheckSettingsPingArgs.builder()\n                    .ipVersion(\"Any\")\n                    .payloadSize(20)\n                    .dontFragment(true)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ping:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: Ping Updated\n      target: grafana.net\n      enabled: false\n      probes:\n        - ${main.probes.Frankfurt}\n        - ${main.probes.London}\n      labels:\n        foo: baz\n      settings:\n        ping:\n          ipVersion: Any\n          payloadSize: 20\n          dontFragment: true\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### TCP Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst tcp = new grafana.SyntheticMonitoringCheck(\"tcp\", {\n    job: \"TCP Defaults\",\n    target: \"grafana.com:80\",\n    enabled: false,\n    probes: [main.then(main =\u003e main.probes?.Atlanta)],\n    labels: {\n        foo: \"bar\",\n    },\n    settings: {\n        tcp: {},\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var tcp = new Grafana.SyntheticMonitoringCheck(\"tcp\", new()\n    {\n        Job = \"TCP Defaults\",\n        Target = \"grafana.com:80\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Atlanta),\n        },\n        Labels = \n        {\n            { \"foo\", \"bar\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Tcp = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"tcp\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"TCP Defaults\"),\n\t\t\tTarget:  pulumi.String(\"grafana.com:80\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Atlanta),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tTcp: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTcpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var tcp = new SyntheticMonitoringCheck(\"tcp\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"TCP Defaults\")\n            .target(\"grafana.com:80\")\n            .enabled(false)\n            .probes(main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Atlanta()))\n            .labels(Map.of(\"foo\", \"bar\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .tcp()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tcp:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: TCP Defaults\n      target: grafana.com:80\n      enabled: false\n      probes:\n        - ${main.probes.Atlanta}\n      labels:\n        foo: bar\n      settings:\n        tcp: {}\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### TCP Complex\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst tcp = new grafana.SyntheticMonitoringCheck(\"tcp\", {\n    job: \"TCP Defaults\",\n    target: \"grafana.com:443\",\n    enabled: false,\n    probes: [\n        main.then(main =\u003e main.probes?.Frankfurt),\n        main.then(main =\u003e main.probes?.London),\n    ],\n    labels: {\n        foo: \"baz\",\n    },\n    settings: {\n        tcp: {\n            ipVersion: \"V6\",\n            tls: true,\n            queryResponses: [\n                {\n                    send: \"howdy\",\n                    expect: \"hi\",\n                },\n                {\n                    send: \"like this\",\n                    expect: \"like that\",\n                    startTls: true,\n                },\n            ],\n            tlsConfig: {\n                serverName: \"grafana.com\",\n                caCert: `-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n`,\n            },\n        },\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var tcp = new Grafana.SyntheticMonitoringCheck(\"tcp\", new()\n    {\n        Job = \"TCP Defaults\",\n        Target = \"grafana.com:443\",\n        Enabled = false,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Frankfurt),\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.London),\n        },\n        Labels = \n        {\n            { \"foo\", \"baz\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Tcp = new Grafana.Inputs.SyntheticMonitoringCheckSettingsTcpArgs\n            {\n                IpVersion = \"V6\",\n                Tls = true,\n                QueryResponses = new[]\n                {\n                    new Grafana.Inputs.SyntheticMonitoringCheckSettingsTcpQueryResponseArgs\n                    {\n                        Send = \"howdy\",\n                        Expect = \"hi\",\n                    },\n                    new Grafana.Inputs.SyntheticMonitoringCheckSettingsTcpQueryResponseArgs\n                    {\n                        Send = \"like this\",\n                        Expect = \"like that\",\n                        StartTls = true,\n                    },\n                },\n                TlsConfig = new Grafana.Inputs.SyntheticMonitoringCheckSettingsTcpTlsConfigArgs\n                {\n                    ServerName = \"grafana.com\",\n                    CaCert = @\"-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"tcp\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:     pulumi.String(\"TCP Defaults\"),\n\t\t\tTarget:  pulumi.String(\"grafana.com:443\"),\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Frankfurt),\n\t\t\t\t*pulumi.Int(main.Probes.London),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"baz\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tTcp: \u0026grafana.SyntheticMonitoringCheckSettingsTcpArgs{\n\t\t\t\t\tIpVersion: pulumi.String(\"V6\"),\n\t\t\t\t\tTls:       pulumi.Bool(true),\n\t\t\t\t\tQueryResponses: grafana.SyntheticMonitoringCheckSettingsTcpQueryResponseArray{\n\t\t\t\t\t\t\u0026grafana.SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{\n\t\t\t\t\t\t\tSend:   pulumi.String(\"howdy\"),\n\t\t\t\t\t\t\tExpect: pulumi.String(\"hi\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026grafana.SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{\n\t\t\t\t\t\t\tSend:     pulumi.String(\"like this\"),\n\t\t\t\t\t\t\tExpect:   pulumi.String(\"like that\"),\n\t\t\t\t\t\t\tStartTls: pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTlsConfig: \u0026grafana.SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{\n\t\t\t\t\t\tServerName: pulumi.String(\"grafana.com\"),\n\t\t\t\t\t\tCaCert: pulumi.String(fmt.Sprintf(`-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n`)),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTcpArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTcpTlsConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var tcp = new SyntheticMonitoringCheck(\"tcp\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"TCP Defaults\")\n            .target(\"grafana.com:443\")\n            .enabled(false)\n            .probes(            \n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Frankfurt()),\n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().London()))\n            .labels(Map.of(\"foo\", \"baz\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .tcp(SyntheticMonitoringCheckSettingsTcpArgs.builder()\n                    .ipVersion(\"V6\")\n                    .tls(true)\n                    .queryResponses(                    \n                        SyntheticMonitoringCheckSettingsTcpQueryResponseArgs.builder()\n                            .send(\"howdy\")\n                            .expect(\"hi\")\n                            .build(),\n                        SyntheticMonitoringCheckSettingsTcpQueryResponseArgs.builder()\n                            .send(\"like this\")\n                            .expect(\"like that\")\n                            .startTls(true)\n                            .build())\n                    .tlsConfig(SyntheticMonitoringCheckSettingsTcpTlsConfigArgs.builder()\n                        .serverName(\"grafana.com\")\n                        .caCert(\"\"\"\n-----BEGIN CERTIFICATE-----\nMIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\nRTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\nh1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\nBN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\niDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\na+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\nFWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\nqq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\nFTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\nZ18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\nUV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\nyzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\ne2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\nXeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\ntqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\nQxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\ntf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\nprulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\nl3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\nvuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n-----END CERTIFICATE-----\n                        \"\"\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tcp:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: TCP Defaults\n      target: grafana.com:443\n      enabled: false\n      probes:\n        - ${main.probes.Frankfurt}\n        - ${main.probes.London}\n      labels:\n        foo: baz\n      settings:\n        tcp:\n          ipVersion: V6\n          tls: true\n          queryResponses:\n            - send: howdy\n              expect: hi\n            - send: like this\n              expect: like that\n              startTls: true\n          tlsConfig:\n            serverName: grafana.com\n            caCert: |\n              -----BEGIN CERTIFICATE-----\n              MIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT\n              RTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF\n              MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+\n              0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr\n              h1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD\n              BN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl\n              iDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL\n              a+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En\n              FWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7\n              qq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk\n              FTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB\n              Z18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW\n              6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z\n              UV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w\n              yzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA\n              e2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ\n              XeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB\n              tqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8\n              QxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP\n              tf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4\n              prulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9\n              5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY\n              l3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq\n              7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N\n              vuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=\n              -----END CERTIFICATE-----\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### Traceroute Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst traceroute = new grafana.SyntheticMonitoringCheck(\"traceroute\", {\n    job: \"Traceroute defaults\",\n    target: \"grafana.com\",\n    enabled: false,\n    frequency: 120000,\n    timeout: 30000,\n    probes: [main.then(main =\u003e main.probes?.Atlanta)],\n    labels: {\n        foo: \"bar\",\n    },\n    settings: {\n        traceroute: {},\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var traceroute = new Grafana.SyntheticMonitoringCheck(\"traceroute\", new()\n    {\n        Job = \"Traceroute defaults\",\n        Target = \"grafana.com\",\n        Enabled = false,\n        Frequency = 120000,\n        Timeout = 30000,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Atlanta),\n        },\n        Labels = \n        {\n            { \"foo\", \"bar\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Traceroute = null,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"traceroute\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:       pulumi.String(\"Traceroute defaults\"),\n\t\t\tTarget:    pulumi.String(\"grafana.com\"),\n\t\t\tEnabled:   pulumi.Bool(false),\n\t\t\tFrequency: pulumi.Int(120000),\n\t\t\tTimeout:   pulumi.Int(30000),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Atlanta),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tTraceroute: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTracerouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var traceroute = new SyntheticMonitoringCheck(\"traceroute\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"Traceroute defaults\")\n            .target(\"grafana.com\")\n            .enabled(false)\n            .frequency(120000)\n            .timeout(30000)\n            .probes(main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Atlanta()))\n            .labels(Map.of(\"foo\", \"bar\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .traceroute()\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  traceroute:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: Traceroute defaults\n      target: grafana.com\n      enabled: false\n      frequency: 120000\n      timeout: 30000\n      probes:\n        - ${main.probes.Atlanta}\n      labels:\n        foo: bar\n      settings:\n        traceroute: {}\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### Traceroute Complex\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\nconst traceroute = new grafana.SyntheticMonitoringCheck(\"traceroute\", {\n    job: \"Traceroute complex\",\n    target: \"grafana.net\",\n    enabled: false,\n    frequency: 120000,\n    timeout: 30000,\n    probes: [\n        main.then(main =\u003e main.probes?.Frankfurt),\n        main.then(main =\u003e main.probes?.London),\n    ],\n    labels: {\n        foo: \"baz\",\n    },\n    settings: {\n        traceroute: {\n            maxHops: 25,\n            maxUnknownHops: 10,\n            ptrLookup: false,\n        },\n    },\n});\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n    var traceroute = new Grafana.SyntheticMonitoringCheck(\"traceroute\", new()\n    {\n        Job = \"Traceroute complex\",\n        Target = \"grafana.net\",\n        Enabled = false,\n        Frequency = 120000,\n        Timeout = 30000,\n        Probes = new[]\n        {\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.Frankfurt),\n            main.Apply(getSyntheticMonitoringProbesResult =\u003e getSyntheticMonitoringProbesResult.Probes?.London),\n        },\n        Labels = \n        {\n            { \"foo\", \"baz\" },\n        },\n        Settings = new Grafana.Inputs.SyntheticMonitoringCheckSettingsArgs\n        {\n            Traceroute = new Grafana.Inputs.SyntheticMonitoringCheckSettingsTracerouteArgs\n            {\n                MaxHops = 25,\n                MaxUnknownHops = 10,\n                PtrLookup = false,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringCheck(ctx, \"traceroute\", \u0026grafana.SyntheticMonitoringCheckArgs{\n\t\t\tJob:       pulumi.String(\"Traceroute complex\"),\n\t\t\tTarget:    pulumi.String(\"grafana.net\"),\n\t\t\tEnabled:   pulumi.Bool(false),\n\t\t\tFrequency: pulumi.Int(120000),\n\t\t\tTimeout:   pulumi.Int(30000),\n\t\t\tProbes: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(main.Probes.Frankfurt),\n\t\t\t\t*pulumi.Int(main.Probes.London),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"baz\"),\n\t\t\t},\n\t\t\tSettings: \u0026grafana.SyntheticMonitoringCheckSettingsArgs{\n\t\t\t\tTraceroute: \u0026grafana.SyntheticMonitoringCheckSettingsTracerouteArgs{\n\t\t\t\t\tMaxHops:        pulumi.Int(25),\n\t\t\t\t\tMaxUnknownHops: pulumi.Int(10),\n\t\t\t\t\tPtrLookup:      pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport com.pulumi.grafana.SyntheticMonitoringCheck;\nimport com.pulumi.grafana.SyntheticMonitoringCheckArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsArgs;\nimport com.pulumi.grafana.inputs.SyntheticMonitoringCheckSettingsTracerouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n        var traceroute = new SyntheticMonitoringCheck(\"traceroute\", SyntheticMonitoringCheckArgs.builder()        \n            .job(\"Traceroute complex\")\n            .target(\"grafana.net\")\n            .enabled(false)\n            .frequency(120000)\n            .timeout(30000)\n            .probes(            \n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().Frankfurt()),\n                main.applyValue(getSyntheticMonitoringProbesResult -\u003e getSyntheticMonitoringProbesResult.probes().London()))\n            .labels(Map.of(\"foo\", \"baz\"))\n            .settings(SyntheticMonitoringCheckSettingsArgs.builder()\n                .traceroute(SyntheticMonitoringCheckSettingsTracerouteArgs.builder()\n                    .maxHops(25)\n                    .maxUnknownHops(10)\n                    .ptrLookup(false)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  traceroute:\n    type: grafana:SyntheticMonitoringCheck\n    properties:\n      job: Traceroute complex\n      target: grafana.net\n      enabled: false\n      frequency: 120000\n      timeout: 30000\n      probes:\n        - ${main.probes.Frankfurt}\n        - ${main.probes.London}\n      labels:\n        foo: baz\n      settings:\n        traceroute:\n          maxHops: 25\n          maxUnknownHops: 10\n          ptrLookup: false\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck check {{check-id}}\n```\n\n ",
            "properties": {
                "alertSensitivity": {
                    "type": "string",
                    "description": "Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.\n"
                },
                "basicMetricsOnly": {
                    "type": "boolean",
                    "description": "Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the check. Defaults to `true`.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "How often the check runs in milliseconds (the value is not truly a \"frequency\" but a \"period\"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.\n"
                },
                "job": {
                    "type": "string",
                    "description": "Name used for job label.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.\n"
                },
                "probes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of probe location IDs where this target will be checked from.\n"
                },
                "settings": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings",
                    "description": "Check settings. Should contain exactly one nested block.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Hostname to ping.\n"
                },
                "tenantId": {
                    "type": "integer",
                    "description": "The tenant ID of the check.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.\n"
                }
            },
            "required": [
                "job",
                "probes",
                "settings",
                "target",
                "tenantId"
            ],
            "inputProperties": {
                "alertSensitivity": {
                    "type": "string",
                    "description": "Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.\n"
                },
                "basicMetricsOnly": {
                    "type": "boolean",
                    "description": "Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the check. Defaults to `true`.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "How often the check runs in milliseconds (the value is not truly a \"frequency\" but a \"period\"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.\n"
                },
                "job": {
                    "type": "string",
                    "description": "Name used for job label.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.\n"
                },
                "probes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of probe location IDs where this target will be checked from.\n"
                },
                "settings": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings",
                    "description": "Check settings. Should contain exactly one nested block.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Hostname to ping.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.\n"
                }
            },
            "requiredInputs": [
                "job",
                "probes",
                "settings",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticMonitoringCheck resources.\n",
                "properties": {
                    "alertSensitivity": {
                        "type": "string",
                        "description": "Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.\n"
                    },
                    "basicMetricsOnly": {
                        "type": "boolean",
                        "description": "Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether to enable the check. Defaults to `true`.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check runs in milliseconds (the value is not truly a \"frequency\" but a \"period\"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.\n"
                    },
                    "job": {
                        "type": "string",
                        "description": "Name used for job label.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.\n"
                    },
                    "probes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of probe location IDs where this target will be checked from.\n"
                    },
                    "settings": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings",
                        "description": "Check settings. Should contain exactly one nested block.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Hostname to ping.\n"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The tenant ID of the check.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation": {
            "description": "Sets up Synthetic Monitoring on a Grafana cloud stack and generates a token. \nOnce a Grafana Cloud stack is created, a user can either use this resource or go into the UI to install synthetic monitoring.\nThis resource cannot be imported but it can be used on an existing Synthetic Monitoring installation without issues.\n\n* [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/installation/)\n* [API documentation](https://github.com/grafana/synthetic-monitoring-api-go-client/blob/main/docs/API.md#apiv1registerinstall)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst smStackCloudStack = new grafana.CloudStack(\"smStackCloudStack\", {\n    slug: \"\u003cstack-slug\u003e\",\n    regionSlug: \"us\",\n});\nconst metricsPublish = new grafana.CloudApiKey(\"metricsPublish\", {\n    role: \"MetricsPublisher\",\n    cloudOrgSlug: \"\u003corg-slug\u003e\",\n});\nconst smStackSyntheticMonitoringInstallation = new grafana.SyntheticMonitoringInstallation(\"smStackSyntheticMonitoringInstallation\", {\n    stackId: smStackCloudStack.id,\n    metricsInstanceId: smStackCloudStack.prometheusUserId,\n    logsInstanceId: smStackCloudStack.logsUserId,\n    metricsPublisherKey: metricsPublish.key,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nsm_stack_cloud_stack = grafana.CloudStack(\"smStackCloudStack\",\n    slug=\"\u003cstack-slug\u003e\",\n    region_slug=\"us\")\nmetrics_publish = grafana.CloudApiKey(\"metricsPublish\",\n    role=\"MetricsPublisher\",\n    cloud_org_slug=\"\u003corg-slug\u003e\")\nsm_stack_synthetic_monitoring_installation = grafana.SyntheticMonitoringInstallation(\"smStackSyntheticMonitoringInstallation\",\n    stack_id=sm_stack_cloud_stack.id,\n    metrics_instance_id=sm_stack_cloud_stack.prometheus_user_id,\n    logs_instance_id=sm_stack_cloud_stack.logs_user_id,\n    metrics_publisher_key=metrics_publish.key)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var smStackCloudStack = new Grafana.CloudStack(\"smStackCloudStack\", new()\n    {\n        Slug = \"\u003cstack-slug\u003e\",\n        RegionSlug = \"us\",\n    });\n\n    var metricsPublish = new Grafana.CloudApiKey(\"metricsPublish\", new()\n    {\n        Role = \"MetricsPublisher\",\n        CloudOrgSlug = \"\u003corg-slug\u003e\",\n    });\n\n    var smStackSyntheticMonitoringInstallation = new Grafana.SyntheticMonitoringInstallation(\"smStackSyntheticMonitoringInstallation\", new()\n    {\n        StackId = smStackCloudStack.Id,\n        MetricsInstanceId = smStackCloudStack.PrometheusUserId,\n        LogsInstanceId = smStackCloudStack.LogsUserId,\n        MetricsPublisherKey = metricsPublish.Key,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsmStackCloudStack, err := grafana.NewCloudStack(ctx, \"smStackCloudStack\", \u0026grafana.CloudStackArgs{\n\t\t\tSlug:       pulumi.String(\"\u003cstack-slug\u003e\"),\n\t\t\tRegionSlug: pulumi.String(\"us\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmetricsPublish, err := grafana.NewCloudApiKey(ctx, \"metricsPublish\", \u0026grafana.CloudApiKeyArgs{\n\t\t\tRole:         pulumi.String(\"MetricsPublisher\"),\n\t\t\tCloudOrgSlug: pulumi.String(\"\u003corg-slug\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewSyntheticMonitoringInstallation(ctx, \"smStackSyntheticMonitoringInstallation\", \u0026grafana.SyntheticMonitoringInstallationArgs{\n\t\t\tStackId:             smStackCloudStack.ID(),\n\t\t\tMetricsInstanceId:   smStackCloudStack.PrometheusUserId,\n\t\t\tLogsInstanceId:      smStackCloudStack.LogsUserId,\n\t\t\tMetricsPublisherKey: metricsPublish.Key,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.CloudStack;\nimport com.pulumi.grafana.CloudStackArgs;\nimport com.pulumi.grafana.CloudApiKey;\nimport com.pulumi.grafana.CloudApiKeyArgs;\nimport com.pulumi.grafana.SyntheticMonitoringInstallation;\nimport com.pulumi.grafana.SyntheticMonitoringInstallationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var smStackCloudStack = new CloudStack(\"smStackCloudStack\", CloudStackArgs.builder()        \n            .slug(\"\u003cstack-slug\u003e\")\n            .regionSlug(\"us\")\n            .build());\n\n        var metricsPublish = new CloudApiKey(\"metricsPublish\", CloudApiKeyArgs.builder()        \n            .role(\"MetricsPublisher\")\n            .cloudOrgSlug(\"\u003corg-slug\u003e\")\n            .build());\n\n        var smStackSyntheticMonitoringInstallation = new SyntheticMonitoringInstallation(\"smStackSyntheticMonitoringInstallation\", SyntheticMonitoringInstallationArgs.builder()        \n            .stackId(smStackCloudStack.id())\n            .metricsInstanceId(smStackCloudStack.prometheusUserId())\n            .logsInstanceId(smStackCloudStack.logsUserId())\n            .metricsPublisherKey(metricsPublish.key())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  smStackCloudStack:\n    type: grafana:CloudStack\n    properties:\n      slug: \u003cstack-slug\u003e\n      regionSlug: us\n  metricsPublish:\n    type: grafana:CloudApiKey\n    properties:\n      role: MetricsPublisher\n      cloudOrgSlug: \u003corg-slug\u003e\n  smStackSyntheticMonitoringInstallation:\n    type: grafana:SyntheticMonitoringInstallation\n    properties:\n      stackId: ${smStackCloudStack.id}\n      metricsInstanceId: ${smStackCloudStack.prometheusUserId}\n      logsInstanceId: ${smStackCloudStack.logsUserId}\n      metricsPublisherKey: ${metricsPublish.key}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "logsInstanceId": {
                    "type": "integer",
                    "description": "The ID of the logs instance to install SM on (stack's `logs_user_id` attribute).\n"
                },
                "metricsInstanceId": {
                    "type": "integer",
                    "description": "The ID of the metrics instance to install SM on (stack's `prometheus_user_id` attribute).\n"
                },
                "metricsPublisherKey": {
                    "type": "string",
                    "description": "The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API\n",
                    "secret": true
                },
                "smAccessToken": {
                    "type": "string",
                    "description": "Generated token to access the SM API.\n"
                },
                "stackId": {
                    "type": "integer",
                    "description": "The ID of the stack to install SM on.\n"
                }
            },
            "required": [
                "logsInstanceId",
                "metricsInstanceId",
                "metricsPublisherKey",
                "smAccessToken",
                "stackId"
            ],
            "inputProperties": {
                "logsInstanceId": {
                    "type": "integer",
                    "description": "The ID of the logs instance to install SM on (stack's `logs_user_id` attribute).\n",
                    "willReplaceOnChanges": true
                },
                "metricsInstanceId": {
                    "type": "integer",
                    "description": "The ID of the metrics instance to install SM on (stack's `prometheus_user_id` attribute).\n",
                    "willReplaceOnChanges": true
                },
                "metricsPublisherKey": {
                    "type": "string",
                    "description": "The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "integer",
                    "description": "The ID of the stack to install SM on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "logsInstanceId",
                "metricsInstanceId",
                "metricsPublisherKey",
                "stackId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticMonitoringInstallation resources.\n",
                "properties": {
                    "logsInstanceId": {
                        "type": "integer",
                        "description": "The ID of the logs instance to install SM on (stack's `logs_user_id` attribute).\n",
                        "willReplaceOnChanges": true
                    },
                    "metricsInstanceId": {
                        "type": "integer",
                        "description": "The ID of the metrics instance to install SM on (stack's `prometheus_user_id` attribute).\n",
                        "willReplaceOnChanges": true
                    },
                    "metricsPublisherKey": {
                        "type": "string",
                        "description": "The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "smAccessToken": {
                        "type": "string",
                        "description": "Generated token to access the SM API.\n"
                    },
                    "stackId": {
                        "type": "integer",
                        "description": "The ID of the stack to install SM on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe": {
            "description": "Besides the public probes run by Grafana Labs, you can also install your\nown private probes. These are only accessible to you and only write data to\nyour Grafana Cloud account. Private probes are instances of the open source\nGrafana Synthetic Monitoring Agent.\n\n* [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst main = new grafana.SyntheticMonitoringProbe(\"main\", {\n    labels: {\n        type: \"mountain\",\n    },\n    latitude: 27.98606,\n    longitude: 86.92262,\n    region: \"APAC\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nmain = grafana.SyntheticMonitoringProbe(\"main\",\n    labels={\n        \"type\": \"mountain\",\n    },\n    latitude=27.98606,\n    longitude=86.92262,\n    region=\"APAC\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Grafana.SyntheticMonitoringProbe(\"main\", new()\n    {\n        Labels = \n        {\n            { \"type\", \"mountain\" },\n        },\n        Latitude = 27.98606,\n        Longitude = 86.92262,\n        Region = \"APAC\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewSyntheticMonitoringProbe(ctx, \"main\", \u0026grafana.SyntheticMonitoringProbeArgs{\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"mountain\"),\n\t\t\t},\n\t\t\tLatitude:  pulumi.Float64(27.98606),\n\t\t\tLongitude: pulumi.Float64(86.92262),\n\t\t\tRegion:    pulumi.String(\"APAC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.SyntheticMonitoringProbe;\nimport com.pulumi.grafana.SyntheticMonitoringProbeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new SyntheticMonitoringProbe(\"main\", SyntheticMonitoringProbeArgs.builder()        \n            .labels(Map.of(\"type\", \"mountain\"))\n            .latitude(27.98606)\n            .longitude(86.92262)\n            .region(\"APAC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: grafana:SyntheticMonitoringProbe\n    properties:\n      labels:\n        type: mountain\n      latitude: 27.98606\n      longitude: 86.92262\n      region: APAC\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe probe {{probe-id}}\n```\n\n\n\n```sh\n $ pulumi import grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe probe {{probe-id}}:{{auth_token}}\n```\n\n ",
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs.\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude coordinates.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude coordinates.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the probe.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the probe.\n"
                },
                "tenantId": {
                    "type": "integer",
                    "description": "The tenant ID of the probe.\n"
                }
            },
            "required": [
                "authToken",
                "latitude",
                "longitude",
                "name",
                "region",
                "tenantId"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs.\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude coordinates.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude coordinates.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the probe.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the probe.\n"
                }
            },
            "requiredInputs": [
                "latitude",
                "longitude",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticMonitoringProbe resources.\n",
                "properties": {
                    "authToken": {
                        "type": "string",
                        "description": "The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom labels to be included with collected metrics and logs.\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude coordinates.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude coordinates.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the probe.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the probe.\n"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The tenant ID of the probe.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/team:Team": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-users-and-permissions/manage-teams/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/team/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test_team = new grafana.Team(\"test-team\", {\n    email: \"teamemail@example.com\",\n    members: [\"viewer-01@example.com\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest_team = grafana.Team(\"test-team\",\n    email=\"teamemail@example.com\",\n    members=[\"viewer-01@example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_team = new Grafana.Team(\"test-team\", new()\n    {\n        Email = \"teamemail@example.com\",\n        Members = new[]\n        {\n            \"viewer-01@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewTeam(ctx, \"test-team\", \u0026grafana.TeamArgs{\n\t\t\tEmail: pulumi.String(\"teamemail@example.com\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"viewer-01@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_team = new Team(\"test-team\", TeamArgs.builder()        \n            .email(\"teamemail@example.com\")\n            .members(\"viewer-01@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-team:\n    type: grafana:Team\n    properties:\n      email: teamemail@example.com\n      members:\n        - viewer-01@example.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "An email address for the team.\n"
                },
                "ignoreExternallySyncedMembers": {
                    "type": "boolean",
                    "description": "Ignores team members that have been added to team by [Team\nSync](https://grafana.com/docs/grafana/latest/enterprise/team-sync/). Team Sync can be provisioned using\n[grafana_team_external_group\nresource](https://registry.terraform.io/providers/grafana/grafana/latest/docs/resources/team_external_group).\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of email addresses corresponding to users who should be given membership\nto the team. Note: users specified here must already exist in Grafana.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana team created.\n"
                },
                "teamId": {
                    "type": "integer",
                    "description": "The team id assigned to this team by Grafana.\n"
                }
            },
            "required": [
                "name",
                "teamId"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "An email address for the team.\n"
                },
                "ignoreExternallySyncedMembers": {
                    "type": "boolean",
                    "description": "Ignores team members that have been added to team by [Team\nSync](https://grafana.com/docs/grafana/latest/enterprise/team-sync/). Team Sync can be provisioned using\n[grafana_team_external_group\nresource](https://registry.terraform.io/providers/grafana/grafana/latest/docs/resources/team_external_group).\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of email addresses corresponding to users who should be given membership\nto the team. Note: users specified here must already exist in Grafana.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana team created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "An email address for the team.\n"
                    },
                    "ignoreExternallySyncedMembers": {
                        "type": "boolean",
                        "description": "Ignores team members that have been added to team by [Team\nSync](https://grafana.com/docs/grafana/latest/enterprise/team-sync/). Team Sync can be provisioned using\n[grafana_team_external_group\nresource](https://registry.terraform.io/providers/grafana/grafana/latest/docs/resources/team_external_group).\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of email addresses corresponding to users who should be given membership\nto the team. Note: users specified here must already exist in Grafana.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the Grafana team created.\n"
                    },
                    "teamId": {
                        "type": "integer",
                        "description": "The team id assigned to this team by Grafana.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/teamExternalGroup:TeamExternalGroup": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/enterprise/team-sync/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/external_group_sync/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst test_team_group = new grafana.TeamExternalGroup(\"test-team-group\", {\n    groups: [\n        \"test-group-1\",\n        \"test-group-2\",\n    ],\n    teamId: 1,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\ntest_team_group = grafana.TeamExternalGroup(\"test-team-group\",\n    groups=[\n        \"test-group-1\",\n        \"test-group-2\",\n    ],\n    team_id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_team_group = new Grafana.TeamExternalGroup(\"test-team-group\", new()\n    {\n        Groups = new[]\n        {\n            \"test-group-1\",\n            \"test-group-2\",\n        },\n        TeamId = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewTeamExternalGroup(ctx, \"test-team-group\", \u0026grafana.TeamExternalGroupArgs{\n\t\t\tGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test-group-1\"),\n\t\t\t\tpulumi.String(\"test-group-2\"),\n\t\t\t},\n\t\t\tTeamId: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.TeamExternalGroup;\nimport com.pulumi.grafana.TeamExternalGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_team_group = new TeamExternalGroup(\"test-team-group\", TeamExternalGroupArgs.builder()        \n            .groups(            \n                \"test-group-1\",\n                \"test-group-2\")\n            .teamId(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-team-group:\n    type: grafana:TeamExternalGroup\n    properties:\n      groups:\n        - test-group-1\n        - test-group-2\n      teamId: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/teamExternalGroup:TeamExternalGroup main {{team_id}}\n```\n\n ",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The team external groups list\n"
                },
                "teamId": {
                    "type": "integer",
                    "description": "The Team ID\n"
                }
            },
            "required": [
                "groups",
                "teamId"
            ],
            "inputProperties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The team external groups list\n"
                },
                "teamId": {
                    "type": "integer",
                    "description": "The Team ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groups",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamExternalGroup resources.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The team external groups list\n"
                    },
                    "teamId": {
                        "type": "integer",
                        "description": "The Team ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/teamPreferences:TeamPreferences": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/preferences/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/team/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst metrics = new grafana.Dashboard(\"metrics\", {configJson: fs.readFileSync(\"grafana-dashboard.json\")});\nconst team = new grafana.Team(\"team\", {});\nconst teamPreferences = new grafana.TeamPreferences(\"teamPreferences\", {\n    teamId: team.id,\n    theme: \"dark\",\n    timezone: \"browser\",\n    homeDashboardId: metrics.dashboardId,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nmetrics = grafana.Dashboard(\"metrics\", config_json=(lambda path: open(path).read())(\"grafana-dashboard.json\"))\nteam = grafana.Team(\"team\")\nteam_preferences = grafana.TeamPreferences(\"teamPreferences\",\n    team_id=team.id,\n    theme=\"dark\",\n    timezone=\"browser\",\n    home_dashboard_id=metrics.dashboard_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var metrics = new Grafana.Dashboard(\"metrics\", new()\n    {\n        ConfigJson = File.ReadAllText(\"grafana-dashboard.json\"),\n    });\n\n    var team = new Grafana.Team(\"team\");\n\n    var teamPreferences = new Grafana.TeamPreferences(\"teamPreferences\", new()\n    {\n        TeamId = team.Id,\n        Theme = \"dark\",\n        Timezone = \"browser\",\n        HomeDashboardId = metrics.DashboardId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmetrics, err := grafana.NewDashboard(ctx, \"metrics\", \u0026grafana.DashboardArgs{\n\t\t\tConfigJson: readFileOrPanic(\"grafana-dashboard.json\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tteam, err := grafana.NewTeam(ctx, \"team\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewTeamPreferences(ctx, \"teamPreferences\", \u0026grafana.TeamPreferencesArgs{\n\t\t\tTeamId:          team.ID(),\n\t\t\tTheme:           pulumi.String(\"dark\"),\n\t\t\tTimezone:        pulumi.String(\"browser\"),\n\t\t\tHomeDashboardId: metrics.DashboardId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Dashboard;\nimport com.pulumi.grafana.DashboardArgs;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.TeamPreferences;\nimport com.pulumi.grafana.TeamPreferencesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var metrics = new Dashboard(\"metrics\", DashboardArgs.builder()        \n            .configJson(Files.readString(Paths.get(\"grafana-dashboard.json\")))\n            .build());\n\n        var team = new Team(\"team\");\n\n        var teamPreferences = new TeamPreferences(\"teamPreferences\", TeamPreferencesArgs.builder()        \n            .teamId(team.id())\n            .theme(\"dark\")\n            .timezone(\"browser\")\n            .homeDashboardId(metrics.dashboardId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  metrics:\n    type: grafana:Dashboard\n    properties:\n      configJson:\n        fn::readFile: grafana-dashboard.json\n  team:\n    type: grafana:Team\n  teamPreferences:\n    type: grafana:TeamPreferences\n    properties:\n      teamId: ${team.id}\n      theme: dark\n      timezone: browser\n      homeDashboardId: ${metrics.dashboardId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "homeDashboardId": {
                    "type": "integer",
                    "description": "The numeric ID of the dashboard to display when a team member logs in.\n"
                },
                "teamId": {
                    "type": "integer",
                    "description": "The numeric team ID.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.\n"
                }
            },
            "required": [
                "teamId"
            ],
            "inputProperties": {
                "homeDashboardId": {
                    "type": "integer",
                    "description": "The numeric ID of the dashboard to display when a team member logs in.\n"
                },
                "teamId": {
                    "type": "integer",
                    "description": "The numeric team ID.\n",
                    "willReplaceOnChanges": true
                },
                "theme": {
                    "type": "string",
                    "description": "The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.\n"
                }
            },
            "requiredInputs": [
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamPreferences resources.\n",
                "properties": {
                    "homeDashboardId": {
                        "type": "integer",
                        "description": "The numeric ID of the dashboard to display when a team member logs in.\n"
                    },
                    "teamId": {
                        "type": "integer",
                        "description": "The numeric team ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "theme": {
                        "type": "string",
                        "description": "The theme for the specified team. Available themes are `light`, `dark`, or an empty string for the default theme.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone for the specified team. Available values are `utc`, `browser`, or an empty string for the default.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/user:User": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-users-and-permissions/manage-server-users/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/user/)\n\nThis resource uses Grafana's admin APIs for creating and updating users which\ndoes not currently work with API Tokens. You must use basic auth.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\n\nconst staff = new grafana.User(\"staff\", {\n    email: \"staff.name@example.com\",\n    isAdmin: false,\n    login: \"staff\",\n    password: \"my-password\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\n\nstaff = grafana.User(\"staff\",\n    email=\"staff.name@example.com\",\n    is_admin=False,\n    login=\"staff\",\n    password=\"my-password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var staff = new Grafana.User(\"staff\", new()\n    {\n        Email = \"staff.name@example.com\",\n        IsAdmin = false,\n        Login = \"staff\",\n        Password = \"my-password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewUser(ctx, \"staff\", \u0026grafana.UserArgs{\n\t\t\tEmail:    pulumi.String(\"staff.name@example.com\"),\n\t\t\tIsAdmin:  pulumi.Bool(false),\n\t\t\tLogin:    pulumi.String(\"staff\"),\n\t\t\tPassword: pulumi.String(\"my-password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.User;\nimport com.pulumi.grafana.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var staff = new User(\"staff\", UserArgs.builder()        \n            .email(\"staff.name@example.com\")\n            .isAdmin(false)\n            .login(\"staff\")\n            .password(\"my-password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  staff:\n    type: grafana:User\n    properties:\n      email: staff.name@example.com\n      isAdmin: false\n      login: staff\n      password: my-password\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import grafana:index/user:User user_name {{user_id}}\n```\n\n ",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the Grafana user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Whether to make user an admin. Defaults to `false`.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The username for the Grafana user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Grafana user.\n",
                    "secret": true
                },
                "userId": {
                    "type": "integer",
                    "description": "The numerical ID of the Grafana user.\n"
                }
            },
            "required": [
                "email",
                "name",
                "password",
                "userId"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the Grafana user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Whether to make user an admin. Defaults to `false`.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The username for the Grafana user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Grafana user.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "email",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the Grafana user.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Whether to make user an admin. Defaults to `false`.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The username for the Grafana user.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the Grafana user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the Grafana user.\n",
                        "secret": true
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The numerical ID of the Grafana user.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "grafana:index/getCloudIps:getCloudIps": {
            "description": "Data source for retrieving sets of cloud IPs. See https://grafana.com/docs/grafana-cloud/reference/allow-list/ for more info\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst test = grafana.getCloudIps({});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\ntest = grafana.get_cloud_ips()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Grafana.GetCloudIps.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.GetCloudIps(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = GrafanaFunctions.getCloudIps();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: grafana:getCloudIps\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCloudIps.\n",
                "properties": {
                    "hostedAlerts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IP addresses that are used for hosted alerts.\n"
                    },
                    "hostedGrafanas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IP addresses that are used for hosted Grafana.\n"
                    },
                    "hostedLogs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IP addresses that are used for hosted logs.\n"
                    },
                    "hostedMetrics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IP addresses that are used for hosted metrics.\n"
                    },
                    "hostedTraces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of IP addresses that are used for hosted traces.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostedAlerts",
                    "hostedGrafanas",
                    "hostedLogs",
                    "hostedMetrics",
                    "hostedTraces",
                    "id"
                ]
            }
        },
        "grafana:index/getCloudStack:getCloudStack": {
            "description": "Data source for Grafana Stack\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudStack.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "Subdomain that the Grafana instance will be available at (i.e. setting slug to “\\n\\n” will make the instance\navailable at “https://\\n\\n.grafana.net\".\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudStack.\n",
                "properties": {
                    "alertmanagerName": {
                        "type": "string",
                        "description": "Name of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerStatus": {
                        "type": "string",
                        "description": "Status of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerUrl": {
                        "type": "string",
                        "description": "Base URL of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerUserId": {
                        "type": "integer",
                        "description": "User ID of the Alertmanager instance configured for this stack.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of stack.\n"
                    },
                    "graphiteName": {
                        "type": "string"
                    },
                    "graphiteStatus": {
                        "type": "string"
                    },
                    "graphiteUrl": {
                        "type": "string"
                    },
                    "graphiteUserId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The stack id assigned to this stack by Grafana.\n"
                    },
                    "logsName": {
                        "type": "string"
                    },
                    "logsStatus": {
                        "type": "string"
                    },
                    "logsUrl": {
                        "type": "string"
                    },
                    "logsUserId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of stack. Conventionally matches the url of the instance (e.g. “\\n\\n.grafana.net”).\n"
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "Organization id to assign to this stack.\n"
                    },
                    "orgName": {
                        "type": "string",
                        "description": "Organization name to assign to this stack.\n"
                    },
                    "orgSlug": {
                        "type": "string",
                        "description": "Organization slug to assign to this stack.\n"
                    },
                    "prometheusName": {
                        "type": "string",
                        "description": "Prometheus name for this instance.\n"
                    },
                    "prometheusRemoteEndpoint": {
                        "type": "string",
                        "description": "Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana\n"
                    },
                    "prometheusRemoteWriteEndpoint": {
                        "type": "string",
                        "description": "Use this URL to send prometheus metrics to Grafana cloud\n"
                    },
                    "prometheusStatus": {
                        "type": "string",
                        "description": "Prometheus status for this instance.\n"
                    },
                    "prometheusUrl": {
                        "type": "string",
                        "description": "Prometheus url for this instance.\n"
                    },
                    "prometheusUserId": {
                        "type": "integer",
                        "description": "Prometheus user ID. Used for e.g. remote_write.\n"
                    },
                    "regionSlug": {
                        "type": "string",
                        "description": "The region this stack is deployed to.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Subdomain that the Grafana instance will be available at (i.e. setting slug to “\\n\\n” will make the instance\navailable at “https://\\n\\n.grafana.net\".\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the stack.\n"
                    },
                    "tracesName": {
                        "type": "string"
                    },
                    "tracesStatus": {
                        "type": "string"
                    },
                    "tracesUrl": {
                        "type": "string"
                    },
                    "tracesUserId": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string",
                        "description": "Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack\n"
                    }
                },
                "type": "object",
                "required": [
                    "alertmanagerName",
                    "alertmanagerStatus",
                    "alertmanagerUrl",
                    "alertmanagerUserId",
                    "description",
                    "graphiteName",
                    "graphiteStatus",
                    "graphiteUrl",
                    "graphiteUserId",
                    "id",
                    "logsName",
                    "logsStatus",
                    "logsUrl",
                    "logsUserId",
                    "name",
                    "orgId",
                    "orgName",
                    "orgSlug",
                    "prometheusName",
                    "prometheusRemoteEndpoint",
                    "prometheusRemoteWriteEndpoint",
                    "prometheusStatus",
                    "prometheusUrl",
                    "prometheusUserId",
                    "regionSlug",
                    "slug",
                    "status",
                    "tracesName",
                    "tracesStatus",
                    "tracesUrl",
                    "tracesUserId",
                    "url"
                ]
            }
        },
        "grafana:index/getDashboard:getDashboard": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)\n* [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/http_api/folder_dashboard_search/)\n* [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/http_api/dashboard/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst test = new grafana.Dashboard(\"test\", {configJson: JSON.stringify({\n    id: 12345,\n    uid: \"test-ds-dashboard-uid\",\n    title: \"Production Overview\",\n    tags: [\"templated\"],\n    timezone: \"browser\",\n    schemaVersion: 16,\n    version: 0,\n    refresh: \"25s\",\n})});\nconst fromId = grafana.getDashboardOutput({\n    dashboardId: test.dashboardId,\n});\nconst fromUid = grafana.getDashboard({\n    uid: \"test-ds-dashboard-uid\",\n});\n```\n```python\nimport pulumi\nimport json\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ntest = grafana.Dashboard(\"test\", config_json=json.dumps({\n    \"id\": 12345,\n    \"uid\": \"test-ds-dashboard-uid\",\n    \"title\": \"Production Overview\",\n    \"tags\": [\"templated\"],\n    \"timezone\": \"browser\",\n    \"schemaVersion\": 16,\n    \"version\": 0,\n    \"refresh\": \"25s\",\n}))\nfrom_id = grafana.get_dashboard_output(dashboard_id=test.dashboard_id)\nfrom_uid = grafana.get_dashboard(uid=\"test-ds-dashboard-uid\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.Dashboard(\"test\", new()\n    {\n        ConfigJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"id\"] = 12345,\n            [\"uid\"] = \"test-ds-dashboard-uid\",\n            [\"title\"] = \"Production Overview\",\n            [\"tags\"] = new[]\n            {\n                \"templated\",\n            },\n            [\"timezone\"] = \"browser\",\n            [\"schemaVersion\"] = 16,\n            [\"version\"] = 0,\n            [\"refresh\"] = \"25s\",\n        }),\n    });\n\n    var fromId = Grafana.GetDashboard.Invoke(new()\n    {\n        DashboardId = test.DashboardId,\n    });\n\n    var fromUid = Grafana.GetDashboard.Invoke(new()\n    {\n        Uid = \"test-ds-dashboard-uid\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"id\":    12345,\n\t\t\t\"uid\":   \"test-ds-dashboard-uid\",\n\t\t\t\"title\": \"Production Overview\",\n\t\t\t\"tags\": []string{\n\t\t\t\t\"templated\",\n\t\t\t},\n\t\t\t\"timezone\":      \"browser\",\n\t\t\t\"schemaVersion\": 16,\n\t\t\t\"version\":       0,\n\t\t\t\"refresh\":       \"25s\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttest, err := grafana.NewDashboard(ctx, \"test\", \u0026grafana.DashboardArgs{\n\t\t\tConfigJson: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = grafana.LookupDashboardOutput(ctx, grafana.GetDashboardOutputArgs{\n\t\t\tDashboardId: test.DashboardId,\n\t\t}, nil)\n\t\t_, err = grafana.LookupDashboard(ctx, \u0026grafana.LookupDashboardArgs{\n\t\t\tUid: pulumi.StringRef(\"test-ds-dashboard-uid\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Dashboard;\nimport com.pulumi.grafana.DashboardArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetDashboardArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Dashboard(\"test\", DashboardArgs.builder()        \n            .configJson(serializeJson(\n                jsonObject(\n                    jsonProperty(\"id\", 12345),\n                    jsonProperty(\"uid\", \"test-ds-dashboard-uid\"),\n                    jsonProperty(\"title\", \"Production Overview\"),\n                    jsonProperty(\"tags\", jsonArray(\"templated\")),\n                    jsonProperty(\"timezone\", \"browser\"),\n                    jsonProperty(\"schemaVersion\", 16),\n                    jsonProperty(\"version\", 0),\n                    jsonProperty(\"refresh\", \"25s\")\n                )))\n            .build());\n\n        final var fromId = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()\n            .dashboardId(test.dashboardId())\n            .build());\n\n        final var fromUid = GrafanaFunctions.getDashboard(GetDashboardArgs.builder()\n            .uid(\"test-ds-dashboard-uid\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:Dashboard\n    properties:\n      configJson:\n        fn::toJSON:\n          id: 12345\n          uid: test-ds-dashboard-uid\n          title: Production Overview\n          tags:\n            - templated\n          timezone: browser\n          schemaVersion: 16\n          version: 0\n          refresh: 25s\nvariables:\n  fromId:\n    fn::invoke:\n      Function: grafana:getDashboard\n      Arguments:\n        dashboardId: ${test.dashboardId}\n  fromUid:\n    fn::invoke:\n      Function: grafana:getDashboard\n      Arguments:\n        uid: test-ds-dashboard-uid\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDashboard.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer",
                        "description": "The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The uid of the Grafana dashboard. Specify either this or `dashboard_id`. Defaults to ``.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDashboard.\n",
                "properties": {
                    "configJson": {
                        "type": "string",
                        "description": "The complete dashboard model JSON.\n"
                    },
                    "dashboardId": {
                        "type": "integer",
                        "description": "The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.\n"
                    },
                    "folder": {
                        "type": "integer",
                        "description": "The numerical ID of the folder where the Grafana dashboard is found.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isStarred": {
                        "type": "boolean",
                        "description": "Whether or not the Grafana dashboard is starred. Starred Dashboards will show up on your own Home Dashboard by default, and are a convenient way to mark Dashboards that you’re interested in.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL slug of the dashboard (deprecated).\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the Grafana dashboard.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The uid of the Grafana dashboard. Specify either this or `dashboard_id`. Defaults to ``.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The full URL of the dashboard.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "The numerical version of the Grafana dashboard.\n"
                    }
                },
                "type": "object",
                "required": [
                    "configJson",
                    "folder",
                    "isStarred",
                    "slug",
                    "title",
                    "url",
                    "version",
                    "id"
                ]
            }
        },
        "grafana:index/getDashboards:getDashboards": {
            "description": "Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.\n\n* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)\n* [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/http_api/folder_dashboard_search/)\n* [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/http_api/dashboard/)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDashboards.\n",
                "properties": {
                    "folderIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Numerical IDs of Grafana folders containing dashboards. Specify to filter for dashboards by folder (eg. `[0]` for General folder), or leave blank to get all dashboards in all folders.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of dashboard search results to return. Defaults to `5000`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of string Grafana dashboard tags to search for, eg. `[\"prod\"]`. Used only as search input, i.e., attribute value will remain unchanged.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDashboards.\n",
                "properties": {
                    "dashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getDashboardsDashboard:getDashboardsDashboard"
                        }
                    },
                    "folderIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Numerical IDs of Grafana folders containing dashboards. Specify to filter for dashboards by folder (eg. `[0]` for General folder), or leave blank to get all dashboards in all folders.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of dashboard search results to return. Defaults to `5000`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of string Grafana dashboard tags to search for, eg. `[\"prod\"]`. Used only as search input, i.e., attribute value will remain unchanged.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dashboards",
                    "id"
                ]
            }
        },
        "grafana:index/getFolder:getFolder": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/dashboard-folders/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/folder/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst test = new grafana.Folder(\"test\", {\n    title: \"test-folder\",\n    uid: \"test-ds-folder-uid\",\n});\nconst fromTitle = grafana.getFolderOutput({\n    title: test.title,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ntest = grafana.Folder(\"test\",\n    title=\"test-folder\",\n    uid=\"test-ds-folder-uid\")\nfrom_title = grafana.get_folder_output(title=test.title)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.Folder(\"test\", new()\n    {\n        Title = \"test-folder\",\n        Uid = \"test-ds-folder-uid\",\n    });\n\n    var fromTitle = Grafana.GetFolder.Invoke(new()\n    {\n        Title = test.Title,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := grafana.NewFolder(ctx, \"test\", \u0026grafana.FolderArgs{\n\t\t\tTitle: pulumi.String(\"test-folder\"),\n\t\t\tUid:   pulumi.String(\"test-ds-folder-uid\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = grafana.LookupFolderOutput(ctx, grafana.GetFolderOutputArgs{\n\t\t\tTitle: test.Title,\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Folder;\nimport com.pulumi.grafana.FolderArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Folder(\"test\", FolderArgs.builder()        \n            .title(\"test-folder\")\n            .uid(\"test-ds-folder-uid\")\n            .build());\n\n        final var fromTitle = GrafanaFunctions.getFolder(GetFolderArgs.builder()\n            .title(test.title())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:Folder\n    properties:\n      title: test-folder\n      uid: test-ds-folder-uid\nvariables:\n  fromTitle:\n    fn::invoke:\n      Function: grafana:getFolder\n      Arguments:\n        title: ${test.title}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFolder.\n",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The name of the Grafana folder.\n"
                    }
                },
                "type": "object",
                "required": [
                    "title"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFolder.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The numerical ID of the Grafana folder.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The name of the Grafana folder.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The uid of the Grafana folder.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The full URL of the folder.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "title",
                    "uid",
                    "url"
                ]
            }
        },
        "grafana:index/getFolders:getFolders": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/dashboard-folders/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst testA = new grafana.Folder(\"testA\", {\n    title: \"test-folder-a\",\n    uid: \"test-ds-folder-uid-a\",\n});\nconst testB = new grafana.Folder(\"testB\", {\n    title: \"test-folder-b\",\n    uid: \"test-ds-folder-uid-b\",\n});\nconst test = grafana.getFolders({});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ntest_a = grafana.Folder(\"testA\",\n    title=\"test-folder-a\",\n    uid=\"test-ds-folder-uid-a\")\ntest_b = grafana.Folder(\"testB\",\n    title=\"test-folder-b\",\n    uid=\"test-ds-folder-uid-b\")\ntest = grafana.get_folders()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testA = new Grafana.Folder(\"testA\", new()\n    {\n        Title = \"test-folder-a\",\n        Uid = \"test-ds-folder-uid-a\",\n    });\n\n    var testB = new Grafana.Folder(\"testB\", new()\n    {\n        Title = \"test-folder-b\",\n        Uid = \"test-ds-folder-uid-b\",\n    });\n\n    var test = Grafana.GetFolders.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewFolder(ctx, \"testA\", \u0026grafana.FolderArgs{\n\t\t\tTitle: pulumi.String(\"test-folder-a\"),\n\t\t\tUid:   pulumi.String(\"test-ds-folder-uid-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.NewFolder(ctx, \"testB\", \u0026grafana.FolderArgs{\n\t\t\tTitle: pulumi.String(\"test-folder-b\"),\n\t\t\tUid:   pulumi.String(\"test-ds-folder-uid-b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.GetFolders(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Folder;\nimport com.pulumi.grafana.FolderArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testA = new Folder(\"testA\", FolderArgs.builder()        \n            .title(\"test-folder-a\")\n            .uid(\"test-ds-folder-uid-a\")\n            .build());\n\n        var testB = new Folder(\"testB\", FolderArgs.builder()        \n            .title(\"test-folder-b\")\n            .uid(\"test-ds-folder-uid-b\")\n            .build());\n\n        final var test = GrafanaFunctions.getFolders();\n\n    }\n}\n```\n```yaml\nresources:\n  testA:\n    type: grafana:Folder\n    properties:\n      title: test-folder-a\n      uid: test-ds-folder-uid-a\n  testB:\n    type: grafana:Folder\n    properties:\n      title: test-folder-b\n      uid: test-ds-folder-uid-b\nvariables:\n  test:\n    fn::invoke:\n      Function: grafana:getFolders\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getFolders.\n",
                "properties": {
                    "folders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getFoldersFolder:getFoldersFolder"
                        },
                        "description": "The Grafana instance's folders.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "folders",
                    "id"
                ]
            }
        },
        "grafana:index/getLibraryPanel:getLibraryPanel": {
            "description": "Data source for retrieving a single library panel by name or uid.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLibraryPanel.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the library panel.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The unique identifier (UID) of the library panel.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLibraryPanel.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "Timestamp when the library panel was created.\n"
                    },
                    "dashboardIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Numerical IDs of Grafana dashboards containing the library panel.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the library panel.\n"
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "ID of the folder where the library panel is stored.\n"
                    },
                    "folderName": {
                        "type": "string",
                        "description": "Name of the folder containing the library panel.\n"
                    },
                    "folderUid": {
                        "type": "string",
                        "description": "Unique ID (UID) of the folder containing the library panel.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "modelJson": {
                        "type": "string",
                        "description": "The JSON model for the library panel.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the library panel.\n"
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "The numeric ID of the library panel computed by Grafana.\n"
                    },
                    "panelId": {
                        "type": "integer",
                        "description": "The numeric ID of the library panel computed by Grafana.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the library panel (eg. text).\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The unique identifier (UID) of the library panel.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "Timestamp when the library panel was last modified.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version of the library panel.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "dashboardIds",
                    "description",
                    "folderId",
                    "folderName",
                    "folderUid",
                    "modelJson",
                    "orgId",
                    "panelId",
                    "type",
                    "updated",
                    "version",
                    "id"
                ]
            }
        },
        "grafana:index/getOnCallSlackChannel:getOnCallSlackChannel": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/slack_channels/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst exampleSlackChannel = grafana.getOnCallSlackChannel({\n    name: \"example_slack_channel\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\nexample_slack_channel = grafana.get_on_call_slack_channel(name=\"example_slack_channel\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSlackChannel = Grafana.GetOnCallSlackChannel.Invoke(new()\n    {\n        Name = \"example_slack_channel\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.GetOnCallSlackChannel(ctx, \u0026grafana.GetOnCallSlackChannelArgs{\n\t\t\tName: \"example_slack_channel\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOnCallSlackChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleSlackChannel = GrafanaFunctions.getOnCallSlackChannel(GetOnCallSlackChannelArgs.builder()\n            .name(\"example_slack_channel\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleSlackChannel:\n    fn::invoke:\n      Function: grafana:getOnCallSlackChannel\n      Arguments:\n        name: example_slack_channel\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOnCallSlackChannel.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Slack channel name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOnCallSlackChannel.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Slack channel name.\n"
                    },
                    "slackId": {
                        "type": "string",
                        "description": "The Slack ID of the channel.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "slackId",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallAction:getOncallAction": {
            "description": "**Note:** This data source is going to be deprecated, please use outgoing webhook data source instead.\n* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/outgoing_webhooks/)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOncallAction.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The action name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallAction.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The action name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallEscalationChain:getOncallEscalationChain": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/escalation_chains/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst default = grafana.getOncallEscalationChain({\n    name: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\ndefault = grafana.get_oncall_escalation_chain(name=\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Grafana.GetOncallEscalationChain.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.LookupOncallEscalationChain(ctx, \u0026grafana.LookupOncallEscalationChainArgs{\n\t\t\tName: \"default\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOncallEscalationChainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = GrafanaFunctions.getOncallEscalationChain(GetOncallEscalationChainArgs.builder()\n            .name(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: grafana:getOncallEscalationChain\n      Arguments:\n        name: default\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOncallEscalationChain.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The escalation chain name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallEscalationChain.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The escalation chain name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallOutgoingWebhook:getOncallOutgoingWebhook": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/outgoing_webhooks/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst exampleOutgoingWebhook = grafana.getOncallOutgoingWebhook({\n    name: \"example_outgoing_webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\nexample_outgoing_webhook = grafana.get_oncall_outgoing_webhook(name=\"example_outgoing_webhook\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleOutgoingWebhook = Grafana.GetOncallOutgoingWebhook.Invoke(new()\n    {\n        Name = \"example_outgoing_webhook\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.LookupOncallOutgoingWebhook(ctx, \u0026grafana.LookupOncallOutgoingWebhookArgs{\n\t\t\tName: \"example_outgoing_webhook\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOncallOutgoingWebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleOutgoingWebhook = GrafanaFunctions.getOncallOutgoingWebhook(GetOncallOutgoingWebhookArgs.builder()\n            .name(\"example_outgoing_webhook\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleOutgoingWebhook:\n    fn::invoke:\n      Function: grafana:getOncallOutgoingWebhook\n      Arguments:\n        name: example_outgoing_webhook\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOncallOutgoingWebhook.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The outgoing webhook name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallOutgoingWebhook.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The outgoing webhook name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallSchedule:getOncallSchedule": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana-cloud/oncall/calendar-schedules/)\n* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/schedules/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst schedule = grafana.getOncallSchedule({\n    name: \"example_schedule\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\nschedule = grafana.get_oncall_schedule(name=\"example_schedule\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var schedule = Grafana.GetOncallSchedule.Invoke(new()\n    {\n        Name = \"example_schedule\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.LookupOncallSchedule(ctx, \u0026grafana.LookupOncallScheduleArgs{\n\t\t\tName: \"example_schedule\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOncallScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var schedule = GrafanaFunctions.getOncallSchedule(GetOncallScheduleArgs.builder()\n            .name(\"example_schedule\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  schedule:\n    fn::invoke:\n      Function: grafana:getOncallSchedule\n      Arguments:\n        name: example_schedule\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOncallSchedule.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The schedule name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallSchedule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The schedule name.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The schedule type.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallTeam:getOncallTeam": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst exampleTeam = grafana.getOncallTeam({\n    name: \"example_team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\nexample_team = grafana.get_oncall_team(name=\"example_team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Grafana.GetOncallTeam.Invoke(new()\n    {\n        Name = \"example_team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.GetOncallTeam(ctx, \u0026grafana.GetOncallTeamArgs{\n\t\t\tName: \"example_team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOncallTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = GrafanaFunctions.getOncallTeam(GetOncallTeamArgs.builder()\n            .name(\"example_team\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: grafana:getOncallTeam\n      Arguments:\n        name: example_team\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOncallTeam.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The team name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallTeam.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The team name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "email",
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallUser:getOncallUser": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/users/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst alex = grafana.getOncallUser({\n    username: \"alex\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\nalex = grafana.get_oncall_user(username=\"alex\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var alex = Grafana.GetOncallUser.Invoke(new()\n    {\n        Username = \"alex\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.GetOncallUser(ctx, \u0026grafana.GetOncallUserArgs{\n\t\t\tUsername: \"alex\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOncallUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var alex = GrafanaFunctions.getOncallUser(GetOncallUserArgs.builder()\n            .username(\"alex\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  alex:\n    fn::invoke:\n      Function: grafana:getOncallUser\n      Arguments:\n        username: alex\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOncallUser.\n",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "role",
                    "username",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallUserGroup:getOncallUserGroup": {
            "description": "* [HTTP API](https://grafana.com/docs/grafana-cloud/oncall/oncall-api-reference/user_groups/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst exampleUserGroup = grafana.getOncallUserGroup({\n    slackHandle: \"example_slack_handle\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\nexample_user_group = grafana.get_oncall_user_group(slack_handle=\"example_slack_handle\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUserGroup = Grafana.GetOncallUserGroup.Invoke(new()\n    {\n        SlackHandle = \"example_slack_handle\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.GetOncallUserGroup(ctx, \u0026grafana.GetOncallUserGroupArgs{\n\t\t\tSlackHandle: \"example_slack_handle\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOncallUserGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUserGroup = GrafanaFunctions.getOncallUserGroup(GetOncallUserGroupArgs.builder()\n            .slackHandle(\"example_slack_handle\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleUserGroup:\n    fn::invoke:\n      Function: grafana:getOncallUserGroup\n      Arguments:\n        slackHandle: example_slack_handle\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOncallUserGroup.\n",
                "properties": {
                    "slackHandle": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slackHandle"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallUserGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "slackHandle": {
                        "type": "string"
                    },
                    "slackId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slackHandle",
                    "slackId",
                    "id"
                ]
            }
        },
        "grafana:index/getOrganization:getOrganization": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-organizations/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/org/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst test = new grafana.Organization(\"test\", {\n    adminUser: \"admin\",\n    createUsers: true,\n    viewers: [\n        \"viewer-01@example.com\",\n        \"viewer-02@example.com\",\n    ],\n});\nconst fromName = grafana.getOrganizationOutput({\n    name: test.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ntest = grafana.Organization(\"test\",\n    admin_user=\"admin\",\n    create_users=True,\n    viewers=[\n        \"viewer-01@example.com\",\n        \"viewer-02@example.com\",\n    ])\nfrom_name = grafana.get_organization_output(name=test.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.Organization(\"test\", new()\n    {\n        AdminUser = \"admin\",\n        CreateUsers = true,\n        Viewers = new[]\n        {\n            \"viewer-01@example.com\",\n            \"viewer-02@example.com\",\n        },\n    });\n\n    var fromName = Grafana.GetOrganization.Invoke(new()\n    {\n        Name = test.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := grafana.NewOrganization(ctx, \"test\", \u0026grafana.OrganizationArgs{\n\t\t\tAdminUser:   pulumi.String(\"admin\"),\n\t\t\tCreateUsers: pulumi.Bool(true),\n\t\t\tViewers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"viewer-01@example.com\"),\n\t\t\t\tpulumi.String(\"viewer-02@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = grafana.LookupOrganizationOutput(ctx, grafana.GetOrganizationOutputArgs{\n\t\t\tName: test.Name,\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Organization;\nimport com.pulumi.grafana.OrganizationArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Organization(\"test\", OrganizationArgs.builder()        \n            .adminUser(\"admin\")\n            .createUsers(true)\n            .viewers(            \n                \"viewer-01@example.com\",\n                \"viewer-02@example.com\")\n            .build());\n\n        final var fromName = GrafanaFunctions.getOrganization(GetOrganizationArgs.builder()\n            .name(test.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:Organization\n    properties:\n      adminUser: admin\n      createUsers: true\n      viewers:\n        - viewer-01@example.com\n        - viewer-02@example.com\nvariables:\n  fromName:\n    fn::invoke:\n      Function: grafana:getOrganization\n      Arguments:\n        name: ${test.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users given admin access to the organization.\n"
                    },
                    "editors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users given editor access to the organization.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Organization.\n"
                    },
                    "viewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users given viewer access to the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "admins",
                    "editors",
                    "name",
                    "viewers",
                    "id"
                ]
            }
        },
        "grafana:index/getOrganizationPreferences:getOrganizationPreferences": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-organizations/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst test = grafana.getOrganizationPreferences({});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\ntest = grafana.get_organization_preferences()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Grafana.GetOrganizationPreferences.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.GetOrganizationPreferences(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = GrafanaFunctions.getOrganizationPreferences();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: grafana:getOrganizationPreferences\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganizationPreferences.\n",
                "properties": {
                    "homeDashboardId": {
                        "type": "integer",
                        "description": "The Organization home dashboard ID.\n"
                    },
                    "homeDashboardUid": {
                        "type": "string",
                        "description": "The Organization home dashboard UID.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "theme": {
                        "type": "string",
                        "description": "The Organization theme. Available values are `light`, `dark`, or an empty string for the default.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.\n"
                    },
                    "weekStart": {
                        "type": "string",
                        "description": "The Organization week start.\n"
                    }
                },
                "type": "object",
                "required": [
                    "homeDashboardId",
                    "homeDashboardUid",
                    "theme",
                    "timezone",
                    "weekStart",
                    "id"
                ]
            }
        },
        "grafana:index/getSyntheticMonitoringProbe:getSyntheticMonitoringProbe": {
            "description": "Data source for retrieving a single probe by name.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst atlanta = grafana.getSyntheticMonitoringProbe({\n    name: \"Atlanta\",\n});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\natlanta = grafana.get_synthetic_monitoring_probe(name=\"Atlanta\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var atlanta = Grafana.GetSyntheticMonitoringProbe.Invoke(new()\n    {\n        Name = \"Atlanta\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.LookupSyntheticMonitoringProbe(ctx, \u0026grafana.LookupSyntheticMonitoringProbeArgs{\n\t\t\tName: \"Atlanta\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var atlanta = GrafanaFunctions.getSyntheticMonitoringProbe(GetSyntheticMonitoringProbeArgs.builder()\n            .name(\"Atlanta\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  atlanta:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbe\n      Arguments:\n        name: Atlanta\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSyntheticMonitoringProbe.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the probe.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSyntheticMonitoringProbe.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the probe.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom labels to be included with collected metrics and logs.\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude coordinates.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude coordinates.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the probe.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the probe.\n"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The tenant ID of the probe.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "labels",
                    "latitude",
                    "longitude",
                    "name",
                    "public",
                    "region",
                    "tenantId"
                ]
            }
        },
        "grafana:index/getSyntheticMonitoringProbes:getSyntheticMonitoringProbes": {
            "description": "Data source for retrieving all probes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst main = grafana.getSyntheticMonitoringProbes({});\n```\n```python\nimport pulumi\nimport pulumi_grafana as grafana\n\nmain = grafana.get_synthetic_monitoring_probes()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = Grafana.GetSyntheticMonitoringProbes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetSyntheticMonitoringProbesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var main = GrafanaFunctions.getSyntheticMonitoringProbes();\n\n    }\n}\n```\n```yaml\nvariables:\n  main:\n    fn::invoke:\n      Function: grafana:getSyntheticMonitoringProbes\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSyntheticMonitoringProbes.\n",
                "properties": {
                    "filterDeprecated": {
                        "type": "boolean",
                        "description": "If true, only probes that are not deprecated will be returned. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSyntheticMonitoringProbes.\n",
                "properties": {
                    "filterDeprecated": {
                        "type": "boolean",
                        "description": "If true, only probes that are not deprecated will be returned. Defaults to `true`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "probes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "description": "Map of probes with their names as keys and IDs as values.\n"
                    }
                },
                "type": "object",
                "required": [
                    "probes",
                    "id"
                ]
            }
        },
        "grafana:index/getTeam:getTeam": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-users-and-permissions/manage-teams/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/team/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst test = new grafana.Team(\"test\", {email: \"test-team-email@test.com\"});\nconst fromName = grafana.getTeamOutput({\n    name: test.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ntest = grafana.Team(\"test\", email=\"test-team-email@test.com\")\nfrom_name = grafana.get_team_output(name=test.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.Team(\"test\", new()\n    {\n        Email = \"test-team-email@test.com\",\n    });\n\n    var fromName = Grafana.GetTeam.Invoke(new()\n    {\n        Name = test.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := grafana.NewTeam(ctx, \"test\", \u0026grafana.TeamArgs{\n\t\t\tEmail: pulumi.String(\"test-team-email@test.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = grafana.LookupTeamOutput(ctx, grafana.GetTeamOutputArgs{\n\t\t\tName: test.Name,\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.Team;\nimport com.pulumi.grafana.TeamArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Team(\"test\", TeamArgs.builder()        \n            .email(\"test-team-email@test.com\")\n            .build());\n\n        final var fromName = GrafanaFunctions.getTeam(GetTeamArgs.builder()\n            .name(test.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:Team\n    properties:\n      email: test-team-email@test.com\nvariables:\n  fromName:\n    fn::invoke:\n      Function: grafana:getTeam\n      Arguments:\n        name: ${test.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Grafana team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Grafana team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getUser:getUser": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-users-and-permissions/manage-server-users/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/user/)\n\nThis data source uses Grafana's admin APIs for reading users which\ndoes not currently work with API Tokens. You must use basic auth.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst test = new grafana.User(\"test\", {\n    email: \"test.datasource@example.com\",\n    login: \"test-datasource\",\n    password: \"my-password\",\n    isAdmin: true,\n});\nconst fromId = grafana.getUserOutput({\n    userId: test.userId,\n});\nconst fromEmail = grafana.getUserOutput({\n    email: test.email,\n});\nconst fromLogin = test.login.apply(login =\u003e grafana.getUserOutput({\n    login: login,\n}));\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ntest = grafana.User(\"test\",\n    email=\"test.datasource@example.com\",\n    login=\"test-datasource\",\n    password=\"my-password\",\n    is_admin=True)\nfrom_id = grafana.get_user_output(user_id=test.user_id)\nfrom_email = grafana.get_user_output(email=test.email)\nfrom_login = test.login.apply(lambda login: grafana.get_user_output(login=login))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Grafana.User(\"test\", new()\n    {\n        Email = \"test.datasource@example.com\",\n        Login = \"test-datasource\",\n        Password = \"my-password\",\n        IsAdmin = true,\n    });\n\n    var fromId = Grafana.GetUser.Invoke(new()\n    {\n        UserId = test.UserId,\n    });\n\n    var fromEmail = Grafana.GetUser.Invoke(new()\n    {\n        Email = test.Email,\n    });\n\n    var fromLogin = Grafana.GetUser.Invoke(new()\n    {\n        Login = test.Login,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := grafana.NewUser(ctx, \"test\", \u0026grafana.UserArgs{\n\t\t\tEmail:    pulumi.String(\"test.datasource@example.com\"),\n\t\t\tLogin:    pulumi.String(\"test-datasource\"),\n\t\t\tPassword: pulumi.String(\"my-password\"),\n\t\t\tIsAdmin:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{\n\t\t\tUserId: test.UserId,\n\t\t}, nil)\n\t\t_ = grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{\n\t\t\tEmail: test.Email,\n\t\t}, nil)\n\t\t_ = test.Login.ApplyT(func(login *string) (grafana.GetUserResult, error) {\n\t\t\treturn grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{\n\t\t\t\tLogin: login,\n\t\t\t}, nil), nil\n\t\t}).(grafana.GetUserResultOutput)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.User;\nimport com.pulumi.grafana.UserArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport com.pulumi.grafana.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new User(\"test\", UserArgs.builder()        \n            .email(\"test.datasource@example.com\")\n            .login(\"test-datasource\")\n            .password(\"my-password\")\n            .isAdmin(true)\n            .build());\n\n        final var fromId = GrafanaFunctions.getUser(GetUserArgs.builder()\n            .userId(test.userId())\n            .build());\n\n        final var fromEmail = GrafanaFunctions.getUser(GetUserArgs.builder()\n            .email(test.email())\n            .build());\n\n        final var fromLogin = GrafanaFunctions.getUser(GetUserArgs.builder()\n            .login(test.login())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: grafana:User\n    properties:\n      email: test.datasource@example.com\n      login: test-datasource\n      password: my-password\n      isAdmin: true\nvariables:\n  fromId:\n    fn::invoke:\n      Function: grafana:getUser\n      Arguments:\n        userId: ${test.userId}\n  fromEmail:\n    fn::invoke:\n      Function: grafana:getUser\n      Arguments:\n        email: ${test.email}\n  fromLogin:\n    fn::invoke:\n      Function: grafana:getUser\n      Arguments:\n        login: ${test.login}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the Grafana user. Defaults to ``.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The username for the Grafana user. Defaults to ``.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The numerical ID of the Grafana user. Defaults to `-1`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the Grafana user. Defaults to ``.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Whether the user is an admin.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The username for the Grafana user. Defaults to ``.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the Grafana user.\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The numerical ID of the Grafana user. Defaults to `-1`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "isAdmin",
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getUsers:getUsers": {
            "description": "* [Official documentation](https://grafana.com/docs/grafana/latest/administration/manage-users-and-permissions/manage-server-users/)\n* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/user/)\n\t\t\nThis data source uses Grafana's admin APIs for reading users which\ndoes not currently work with API Tokens. You must use basic auth.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as grafana from \"@lbrlabs/pulumi-grafana\";\nimport * as grafana from \"@pulumi/grafana\";\n\nconst testAllUsers = new grafana.User(\"testAllUsers\", {\n    email: \"all_users@example.com\",\n    login: \"test-grafana-users\",\n    password: \"my-password\",\n});\nconst allUsers = grafana.getUsers({});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_grafana as grafana\nimport pulumi_grafana as grafana\n\ntest_all_users = grafana.User(\"testAllUsers\",\n    email=\"all_users@example.com\",\n    login=\"test-grafana-users\",\n    password=\"my-password\")\nall_users = grafana.get_users()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Grafana = Lbrlabs.PulumiPackage.Grafana;\nusing Grafana = Pulumi.Grafana;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testAllUsers = new Grafana.User(\"testAllUsers\", new()\n    {\n        Email = \"all_users@example.com\",\n        Login = \"test-grafana-users\",\n        Password = \"my-password\",\n    });\n\n    var allUsers = Grafana.GetUsers.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := grafana.NewUser(ctx, \"testAllUsers\", \u0026grafana.UserArgs{\n\t\t\tEmail:    pulumi.String(\"all_users@example.com\"),\n\t\t\tLogin:    pulumi.String(\"test-grafana-users\"),\n\t\t\tPassword: pulumi.String(\"my-password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = grafana.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.grafana.User;\nimport com.pulumi.grafana.UserArgs;\nimport com.pulumi.grafana.GrafanaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAllUsers = new User(\"testAllUsers\", UserArgs.builder()        \n            .email(\"all_users@example.com\")\n            .login(\"test-grafana-users\")\n            .password(\"my-password\")\n            .build());\n\n        final var allUsers = GrafanaFunctions.getUsers();\n\n    }\n}\n```\n```yaml\nresources:\n  testAllUsers:\n    type: grafana:User\n    properties:\n      email: all_users@example.com\n      login: test-grafana-users\n      password: my-password\nvariables:\n  allUsers:\n    fn::invoke:\n      Function: grafana:getUsers\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getUsersUser:getUsersUser"
                        },
                        "description": "The Grafana instance's users.\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    }
}